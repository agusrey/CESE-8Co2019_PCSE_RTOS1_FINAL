
examples/c/tp_pcse_rtos1_b/out/tp_pcse_rtos1_b.elf:     file format elf32-littlearm
examples/c/tp_pcse_rtos1_b/out/tp_pcse_rtos1_b.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a001349

Program Header:
0x70000001 off    0x000188f4 vaddr 0x1a0088f4 paddr 0x1a0088f4 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x0000358c flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x000088fc memsz 0x000088fc flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a0088fc align 2**16
         filesz 0x000000e8 memsz 0x000000e8 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000088f0  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e8  10000000  1a0088fc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200e8  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200e8  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200e8  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200e8  2**2
                  CONTENTS
  6 .bss          000034a4  100000e8  100000e8  000000e8  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200e8  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200e8  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200e8  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200e8  2**2
                  CONTENTS
 11 .init_array   00000004  1a0088f0  1a0088f0  000188f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a0088f4  1a0088f4  000188f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200e8  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200e8  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200e8  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200e8  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200e8  2**2
                  CONTENTS
 18 .noinit       00000000  1000358c  1000358c  000200e8  2**2
                  CONTENTS
 19 .debug_info   00045fdd  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00007c83  00000000  00000000  000660c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000154ed  00000000  00000000  0006dd48  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00001630  00000000  00000000  00083235  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 000016e8  00000000  00000000  00084865  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  00014eac  00000000  00000000  00085f4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0001dcae  00000000  00000000  0009adf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0003694a  00000000  00000000  000b8aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  000ef3f1  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  000ef470  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00003c40  00000000  00000000  000ef4a8  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000e8 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a0088f0 l    d  .init_array	00000000 .init_array
1a0088f4 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
1000358c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a006d44 l     F .text	000000a4 uartProcessIRQ
10003490 l     O .bss	00000004 rxIsrCallbackUART0
10003494 l     O .bss	00000004 rxIsrCallbackUART2
10003498 l     O .bss	00000004 rxIsrCallbackUART3
1000349c l     O .bss	00000004 txIsrCallbackUART0
100034a0 l     O .bss	00000004 txIsrCallbackUART2
100034a4 l     O .bss	00000004 txIsrCallbackUART3
1a0087bc l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 Bluetooth.c
00000000 l    df *ABS*	00000000 milib.c
00000000 l    df *ABS*	00000000 math.c
00000000 l    df *ABS*	00000000 Disco.c
100000e8 l     O .bss	00000250 fp
10000338 l     O .bss	00000238 fs
00000000 l    df *ABS*	00000000 Botones.c
1a0006bc l     F .text	00000008 fsmArrebInicia
1a0006c4 l     F .text	000000ae fsmArreb
00000000 l    df *ABS*	00000000 app.c
10000570 l     O .bss	00000060 Pwm_Channels
100005d0 l     O .bss	00000004 angle.14338
10000000 l     O .data	00000001 cnt.14336
00000000 l    df *ABS*	00000000 mi_mcpwm.c
00000000 l    df *ABS*	00000000 Consola.c
100005d4 l     O .bss	00000014 comando.14290
00000000 l    df *ABS*	00000000 Control.c
00000000 l    df *ABS*	00000000 ff.c
1a0013d4 l     F .text	0000000a ld_word
1a0013de l     F .text	00000016 ld_dword
1a0013f4 l     F .text	000000a8 ld_qword
1a00149c l     F .text	00000008 st_word
1a0014a4 l     F .text	00000014 st_dword
1a0014b8 l     F .text	00000026 st_qword
1a0014de l     F .text	00000012 mem_cpy
1a0014f0 l     F .text	0000000a mem_set
1a0014fa l     F .text	0000001e mem_cmp
1a001518 l     F .text	00000010 chk_chr
1a001528 l     F .text	00000004 dbc_1st
1a00152c l     F .text	000000c0 tchar2uni
1a0015ec l     F .text	00000018 clst2sect
1a001604 l     F .text	00000026 ld_clust
1a00162a l     F .text	00000026 st_clust
1a001650 l     F .text	00000088 pick_lfn
1a0016d8 l     F .text	00000078 put_lfn
1a001750 l     F .text	000000b0 gen_numname
1a001800 l     F .text	0000001c sum_sfn
1a00181c l     F .text	00000030 xdir_sum
1a00184c l     F .text	0000002e init_alloc_info
1a00187c l     F .text	000000b0 get_ldnumber
1a00192c l     F .text	00000048 validate
1a001974 l     F .text	00000050 sync_window
1a0019c4 l     F .text	00000034 move_window
1a0019f8 l     F .text	00000084 check_fs
1a001a7c l     F .text	000004b4 find_volume
1a001f30 l     F .text	00000086 find_bitmap
1a001fb6 l     F .text	00000078 change_bitmap
1a00202e l     F .text	0000011e put_fat
1a00214c l     F .text	00000030 fill_last_frag
1a00217c l     F .text	00000032 fill_first_frag
1a0021ae l     F .text	00000172 get_fat
1a002320 l     F .text	000000b4 dir_sdi
1a0023d4 l     F .text	000001cc create_chain
1a0025a0 l     F .text	0000013e remove_chain
1a0026de l     F .text	00000052 dir_clear
1a002730 l     F .text	000000dc dir_next
1a00280c l     F .text	00000100 load_xdir
1a00290c l     F .text	0000003a load_obj_xdir
1a002946 l     F .text	000000ea dir_read
1a002a30 l     F .text	0000006c dir_alloc
1a002a9c l     F .text	0000005e store_xdir
1a002afc l     F .text	00000244 create_name
1a002d40 l     F .text	00000036 xname_sum
1a002d76 l     F .text	00000082 create_xdir
1a002df8 l     F .text	000000a4 cmp_lfn
1a002e9c l     F .text	0000015c dir_find
1a002ff8 l     F .text	000000b4 follow_path
1a0030ac l     F .text	00000208 dir_register
1a0032b4 l     F .text	0000008c sync_fs
100005e8 l     O .bss	00000260 DirBuf
10000848 l     O .bss	00000008 FatFs
10000850 l     O .bss	00000002 Fsid
10000854 l     O .bss	00000200 LfnBuf
1a007f98 l     O .text	00000080 ExCvt
1a008018 l     O .text	0000000d LfnOfs
1a008028 l     O .text	00000008 VolumeStr
00000000 l    df *ABS*	00000000 ffunicode.c
1a008064 l     O .text	000001f2 cvt1.5491
1a008258 l     O .text	000000bc cvt2.5492
1a008314 l     O .text	00000100 uc850
00000000 l    df *ABS*	00000000 heap_1.c
10000a58 l     O .bss	00002000 ucHeap
10000a54 l     O .bss	00000004 pucAlignedHeap.11438
10002a58 l     O .bss	00000004 xNextFreeByte
00000000 l    df *ABS*	00000000 queue.c
1a003b72 l     F .text	0000001e prvIsQueueFull
1a003b90 l     F .text	0000001a prvIsQueueEmpty
1a003baa l     F .text	00000076 prvCopyDataToQueue
1a003c20 l     F .text	00000024 prvCopyDataFromQueue
1a003c44 l     F .text	0000006e prvUnlockQueue
1a003d38 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
10002a5c l     O .bss	00000168 uxIdleTaskStack.10728
10002bc4 l     O .bss	000005a0 uxTimerTaskStack.10735
10003164 l     O .bss	00000060 xIdleTaskTCB.10727
100031c4 l     O .bss	00000060 xTimerTaskTCB.10734
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a004340 l     F .text	0000002c prvResetNextTaskUnblockTime
1a00436c l     F .text	00000092 prvInitialiseNewTask
1a004400 l     F .text	00000068 prvInitialiseTaskLists
1a004468 l     F .text	000000ac prvAddNewTaskToReadyList
1a004514 l     F .text	00000038 prvDeleteTCB
1a00454c l     F .text	0000004c prvCheckTasksWaitingTermination
1a004598 l     F .text	00000028 prvIdleTask
1a0045c0 l     F .text	00000098 prvAddCurrentTaskToDelayedList
10003228 l     O .bss	00000004 pxDelayedTaskList
1000322c l     O .bss	00000004 pxOverflowDelayedTaskList
10003230 l     O .bss	0000008c pxReadyTasksLists
100032bc l     O .bss	00000004 uxCurrentNumberOfTasks
100032c0 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
100032c4 l     O .bss	00000004 uxPendedTicks
100032c8 l     O .bss	00000004 uxSchedulerSuspended
100032cc l     O .bss	00000004 uxTaskNumber
100032d0 l     O .bss	00000004 uxTopReadyPriority
100032d4 l     O .bss	00000014 xDelayedTaskList1
100032e8 l     O .bss	00000014 xDelayedTaskList2
100032fc l     O .bss	00000004 xNextTaskUnblockTime
10003300 l     O .bss	00000004 xNumOfOverflows
10003304 l     O .bss	00000014 xPendingReadyList
10003318 l     O .bss	00000004 xSchedulerRunning
1000331c l     O .bss	00000014 xSuspendedTaskList
10003330 l     O .bss	00000014 xTasksWaitingTermination
10003344 l     O .bss	00000004 xTickCount
10003348 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a004d68 l     F .text	00000020 prvGetNextExpireTime
1a004d88 l     F .text	00000048 prvInsertTimerInActiveList
1a004dd0 l     F .text	00000070 prvCheckForValidListAndQueue
1a005184 l     F .text	00000016 prvTimerTask
1a004f10 l     F .text	00000078 prvSwitchTimerLists
1a004f88 l     F .text	0000002c prvSampleTimeNow
1a004fb4 l     F .text	00000060 prvProcessExpiredTimer
1a005014 l     F .text	00000074 prvProcessTimerOrBlockTask
1a005088 l     F .text	000000fc prvProcessReceivedCommands
1000334c l     O .bss	00000004 pxCurrentTimerList
10003350 l     O .bss	00000004 pxOverflowTimerList
10003354 l     O .bss	000000a0 ucStaticTimerQueueStorage.11828
100033f4 l     O .bss	00000014 xActiveTimerList1
10003408 l     O .bss	00000014 xActiveTimerList2
1000341c l     O .bss	00000004 xLastTime.11777
10003420 l     O .bss	00000050 xStaticTimerQueue.11827
10003470 l     O .bss	00000004 xTimerQueue
10003474 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a00519c l     F .text	00000040 prvTaskExitError
1a0051dc l     F .text	00000022 prvPortStartFirstTask
1a005204 l     F .text	0000000e vPortEnableVFP
1a005270 l       .text	00000000 pxCurrentTCBConst2
1a005350 l       .text	00000000 pxCurrentTCBConst
10003478 l     O .bss	00000001 ucMaxSysCallPriority
1000347c l     O .bss	00000004 ulMaxPRIGROUPValue
10000008 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 fssdc.c
1a005524 l     F .text	00000018 newCardStatus
1a00553c l     F .text	00000004 chk_power
1a005540 l     F .text	00000024 SSPSend
1a005564 l     F .text	00000018 xmit_spi
1a0055a0 l     F .text	0000001c rcvr_spi
1a0055bc l     F .text	00000024 wait_ready
1a0055e0 l     F .text	00000018 deselect
1a0055f8 l     F .text	00000024 select_
1a00561c l     F .text	00000084 send_cmd
1a0056a0 l     F .text	0000005c xmit_datablock
1a0056fc l     F .text	00000060 rcvr_datablock
10003480 l     O .bss	00000001 CardType
10003481 l     O .bss	00000001 Timer1
10003482 l     O .bss	00000001 Timer2
10003484 l     O .bss	00000004 g_statusUpdateCallback
1000000c l     O .data	00000001 g_cardStatus
1000000d l     O .data	00000001 g_diskStats
10000010 l     O .data	00000004 g_spiFastClock
10000014 l     O .data	00000004 g_spiSlowClock
00000000 l    df *ABS*	00000000 ffdisks.c
00000000 l    df *ABS*	00000000 board.c
1a005e48 l     F .text	00000044 Board_LED_Init
1a005e8c l     F .text	00000040 Board_TEC_Init
1a005ecc l     F .text	00000040 Board_GPIO_Init
1a005f0c l     F .text	00000030 Board_ADC_Init
1a005f3c l     F .text	00000038 Board_SPI_Init
1a005f74 l     F .text	00000024 Board_I2C_Init
1a008648 l     O .text	00000008 GpioButtons
1a008650 l     O .text	0000000c GpioLeds
1a00865c l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a008674 l     O .text	00000004 InitClkStates
1a008678 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0060c8 l     F .text	0000002c Chip_UART_GetIndex
1a0086ec l     O .text	00000008 UART_BClock
1a0086f4 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a006270 l     F .text	00000014 Chip_ADC_GetClockIndex
1a006284 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a006338 l     F .text	000000a4 pll_calc_divs
1a0063dc l     F .text	0000010c pll_get_frac
1a0064e8 l     F .text	0000004c Chip_Clock_FindBaseClock
1a00675c l     F .text	00000022 Chip_Clock_GetDivRate
10003488 l     O .bss	00000008 audio_usb_pll_freq
1a008708 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a008774 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 rtc_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a006a60 l     F .text	0000001a SSP_Write2BFifo
1a006a7a l     F .text	00000018 SSP_Write1BFifo
1a006a92 l     F .text	00000042 SSP_Read2BFifo
1a006ad4 l     F .text	00000040 SSP_Read1BFifo
1a006b14 l     F .text	00000014 Chip_SSP_GetClockIndex
1a006b28 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
1000001c l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000054 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_spi.c
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_timer.c
1a007036 l     F .text	00000002 errorOcurred
1a007038 l     F .text	00000002 doNothing
10000060 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a007144 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
100034a8 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a0074f0 l     F .text	00000010 clearInterrupt
1a007500 l     F .text	0000005c serveInterrupt
100000a0 l     O .data	00000048 ultrasonicSensors
1a0088ec l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 
1a0088f4 l       .init_array	00000000 __init_array_end
1a0088f0 l       .bss_RAM5	00000000 __preinit_array_end
1a0088f0 l       .init_array	00000000 __init_array_start
1a0088f0 l       .bss_RAM5	00000000 __preinit_array_start
1a006580 g     F .text	0000001c Chip_Clock_GetDividerSource
1a007908 g     F .text	00000010 strcpy
1a0070bc g     F .text	00000044 TIMER2_IRQHandler
1a006e18 g     F .text	00000014 uartRxRead
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a00575c g     F .text	0000000c FSSDC_FatFs_DiskStatus
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0005f8 g     F .text	000000c4 DiskLog
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0052b8 g     F .text	0000002c vPortExitCritical
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a006ebc g     F .text	0000001e uartReadByte
1a006010 g     F .text	00000008 __stdio_init
10003530 g     O .bss	00000004 qLog_Write
1a006a30 g     F .text	0000002e Chip_RTC_GetFullTime
1a0074ac g     F .text	00000042 delayRead
1a000d7a g     F .text	00000004 MCPWM_IntClear
1a00017a  w    F .text	00000002 HardFault_Handler
1a004228 g     F .text	00000052 vQueueWaitForMessageRestricted
1a000000 g       *ABS*	00000000 __vectors_start__
1a00632a g     F .text	0000000c Chip_ADC_SetResolution
1a00052e g     F .text	0000001c my_atoi
1a005fd0 g     F .text	00000014 Board_UARTPutSTR
1a005354 g     F .text	0000002c SysTick_Handler
1a006148 g     F .text	00000040 Chip_UART_SetBaud
1a001344  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a0052f0 g     F .text	00000064 PendSV_Handler
1a003fb4 g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a000ec8 g     F .text	0000047c Control
1a0088fc g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
10003224 g     O .bss	00000004 pxCurrentTCB
53ff6546 g       *ABS*	00000000 __valid_user_code_checksum
1a0088fc g       .ARM.exidx	00000000 _etext
10003534 g     O .bss	00000004 qCom_a_Bluetooth
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a003a50 g     F .text	0000009c ff_wtoupper
1a004bf4 g     F .text	00000018 vTaskInternalSetTimeOutState
1a006eda g     F .text	00000080 waitForReceiveStringOrTimeout
1a007100 g     F .text	00000044 TIMER3_IRQHandler
1a0067fe g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001bc g     F .text	0000000a UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a000c06 g     F .text	000000d2 MCPWM_ConfigChannel
1a0053b8 g     F .text	00000110 xPortStartScheduler
1a0078c4 g     F .text	00000016 memcpy
1a004b00 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a005380  w    F .text	00000038 vPortSetupTimerInterrupt
1a005de6 g     F .text	0000000e disk_initialize
1a00757c g     F .text	00000000 .hidden __aeabi_uldivmod
1000358c g       .noinit	00000000 _noinit
1a003b5c g     F .text	00000016 vPortFree
1a006fae g     F .text	00000018 uartWriteString
10003584 g     O .bss	00000004 SystemCoreClock
1a0060f4 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a0054c8 g     F .text	0000005c vPortValidateInterruptPriority
1a000180  w    F .text	00000002 UsageFault_Handler
1a00687c g     F .text	0000004c Chip_Clock_GetRate
1a004296 g     F .text	00000018 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a005dd8 g     F .text	0000000e disk_status
1a006050 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a000bdc g     F .text	0000002a MCPWM_WriteToShadow
1a0075ac g     F .text	000002cc .hidden __udivmoddi4
1a008644 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a004290 g     F .text	00000006 vListInitialiseItem
1a005e34 g     F .text	00000012 disk_ioctl
1a007566 g     F .text	0000000a GPIO1_IRQHandler
1a004080 g     F .text	00000158 xQueueReceive
10003544 g     O .bss	00000040 xQueueRegistry
1a004324 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a006de8 g     F .text	00000018 uartRxReady
1a0088f4 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a000bbc g     F .text	0000000e MCPWM_Init
1a0059a0 g     F .text	000000b4 FSSDC_FatFs_DiskWrite
10000018 g     O .data	00000004 VolToPart
1a00787c g     F .text	00000048 __libc_init_array
1a0004b0 g     F .text	0000007e searchforsubstr
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a003aec g     F .text	00000070 pvPortMalloc
1a005fe4 g     F .text	0000002c Board_Init
1a0013d2  w    F .text	00000002 _init
1a00427a g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a006b52 g     F .text	000000aa Chip_SSP_RWFrames_Blocking
1a0047d4 g     F .text	0000000c xTaskGetTickCount
1a003e38 g     F .text	0000017c xQueueGenericSend
1a003a10 g     F .text	00000040 ff_uni2oem
1a0001ba  w    F .text	00000002 RTC_IRQHandler
1000358c g       .bss	00000000 _ebss
1a00703c g     F .text	00000040 TIMER0_IRQHandler
1a00591c g     F .text	00000084 FSSDC_FatFs_DiskRead
1a001348 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a005a54 g     F .text	000002e8 FSSDC_FatFs_DiskIoCtl
1a006cb8 g     F .text	00000038 Chip_I2C_SetClockRate
1a004cb8 g     F .text	000000b0 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a006534 g     F .text	0000004c Chip_Clock_EnableCrystal
1a005768 g     F .text	000001b4 FSSDC_FatFs_DiskInitialize
1a005d3c g     F .text	00000060 FSSDC_InitSPI
1a000774 g     F .text	00000070 tecla
1a0007f8 g     F .text	00000030 hm10bleTest
10008000 g       *ABS*	00000000 __top_RamLoc32
1a004b68 g     F .text	0000008c xTaskRemoveFromEventList
1a00433e g     F .text	00000002 vApplicationMallocFailedHook
1a00018a g     F .text	0000001e data_init
1a0078ea g     F .text	0000001e strcat
1a00707c g     F .text	00000040 TIMER1_IRQHandler
1a000300 g     F .text	00000144 Bluetooth
1a006c94 g     F .text	00000024 Chip_I2C_Init
1a006fc6 g     F .text	0000000a UART2_IRQHandler
1a0066f0 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a008804 g     O .text	000000e6 gpioPinsInit
1a0007e4 g     F .text	00000012 Led_parpadea
1a006f94 g     F .text	0000001a uartWriteByte
1a006b40 g     F .text	00000012 Chip_SSP_SetClockRate
1a0073b6 g     F .text	00000016 gpioToggle
1a007570 g     F .text	0000000a GPIO2_IRQHandler
1a004c0c g     F .text	00000080 xTaskCheckForTimeOut
1a0067d8 g     F .text	00000026 Chip_Clock_GetBaseClock
100000e8 g       .bss	00000000 _bss
1a0062f8 g     F .text	00000032 Chip_ADC_SetSampleRate
1a0039e8 g     F .text	00000028 f_close
1a0047c4 g     F .text	00000010 vTaskSuspendAll
1a00748c g     F .text	00000020 delayInit
1a000d7e g     F .text	0000000c MCPWM_GetIntStatus
1a00557c g     F .text	00000024 SSPReceive
1a007bd8 g     O .text	00000004 teclas
1a00054c g     F .text	000000ac MCM_Trig_Functions
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a006bfc g     F .text	0000003e Chip_SSP_SetBitRate
1a0042e2 g     F .text	00000028 uxListRemove
1a006a5e g     F .text	00000002 Chip_GPIO_Init
1a008670 g     O .text	00000004 OscRateIn
1a006e40 g     F .text	0000007c uartInit
1a004658 g     F .text	00000072 xTaskCreateStatic
1000358c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a004a38 g     F .text	000000c8 vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a003d5a g     F .text	00000090 xQueueGenericCreateStatic
1a004b30 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a007178 g     F .text	00000194 gpioInit
10003538 g     O .bss	00000004 qCom_de_Consola
1a00430c g     F .text	00000018 vApplicationGetIdleTaskMemory
1a004ea4 g     F .text	0000006c xTimerGenericCommand
1a00433c g     F .text	00000002 vApplicationStackOverflowHook
1a007878  w    F .text	00000002 .hidden __aeabi_ldiv0
1000353c g     O .bss	00000004 qCom_a_Consola
1a000cfc g     F .text	00000074 MCPWM_InitChannels
1a005d9c g     F .text	0000003c get_fattime
1a0073cc g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a005fbc g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
10003540 g     O .bss	00000004 qTecla_Apretada
1a00659c g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a000d70 g     F .text	0000000a MCPWM_IntConfig
1a0078da g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000828 g     F .text	00000244 main
100034b0 g     O .bss	00000080 BotSt
100034ac g     O .bss	00000004 qCom_de_Bluetooth
1a003888 g     F .text	00000160 f_sync
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a006fdc g     F .text	00000050 spiInit
1a0042ae g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a005250 g     F .text	00000024 SVC_Handler
1a004e40 g     F .text	00000064 xTimerCreateTimerTask
1a006e00 g     F .text	00000018 uartTxReady
1a003340 g     F .text	00000050 f_mount
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a00680c g     F .text	0000003c Chip_Clock_EnableOpts
1a000bca g     F .text	00000012 MCPWM_ACMode
1a003dea g     F .text	0000004e xQueueGenericCreate
1a0065b8 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a006670 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a006cf0 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a000444 g     F .text	0000006c itoa_dec
1a007454 g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a00730c g     F .text	00000056 gpioWrite
1a0013d0  w    F .text	00000002 _fini
1a0048f8 g     F .text	000000f4 xTaskResumeAll
1a004730 g     F .text	00000094 vTaskStartScheduler
1a0062b8 g     F .text	00000040 Chip_ADC_Init
10003588 g     O .bss	00000004 g_pUsbApi
1a006018 g     F .text	00000038 Board_SetupMuxing
1a006188 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a00702c g     F .text	0000000a tickRead
10000058 g     O .data	00000008 tickRateMS
1a000cd8 g     F .text	00000024 MCPWM_Start
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a006f5a g     F .text	0000003a waitForReceiveStringOrTimeoutBlocking
1a006e2c g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a004c8c g     F .text	0000000c vTaskMissedYield
1000358c g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a006c3c g     F .text	00000038 Chip_SSP_Init
1a0041d8 g     F .text	00000026 uxQueueMessagesWaiting
1a004200 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0047e0 g     F .text	00000118 xTaskIncrementTick
10000004 g     O .data	00000002 Motor
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a005f98 g     F .text	00000024 Board_Debug_Init
1a003cb4 g     F .text	00000084 xQueueGenericReset
100000e8 g       .data	00000000 _edata
1a006c74 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a003648 g     F .text	00000240 f_write
1a0046ca g     F .text	00000066 xTaskCreate
1a0068dc g     F .text	00000154 Chip_SetupCoreClock
1a00755c g     F .text	0000000a GPIO0_IRQHandler
1a003390 g     F .text	000002b8 f_open
1a005e14 g     F .text	00000020 disk_write
1a000000 g     O .text	00000040 g_pfnVectors
1a0068c8 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0049ec g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a004c98 g     F .text	00000020 xTaskGetSchedulerState
1a007878  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a005df4 g     F .text	00000020 disk_read
1a005218 g     F .text	0000002c pxPortInitialiseStack
1a000d8c g     F .text	0000013c consola
1a006848 g     F .text	00000034 Chip_Clock_Enable
1a006fd0 g     F .text	0000000a UART3_IRQHandler
1a000a6c g     F .text	00000124 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a007362 g     F .text	00000054 gpioRead
1a0073e8 g     F .text	0000006c boardInit
1a005274 g     F .text	00000044 vPortEnterCritical
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a000b90 g     F .text	0000002c MCPWM_Pin_Init
1a0079a8 g     O .text	00000200 hSin_Cos_Table
1a006780 g     F .text	00000058 Chip_Clock_SetBaseClock
1a006d28 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a0060bc g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 49 13 00 1a 79 01 00 1a 7b 01 00 1a     ....I...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 46 65 ff 53     }...........Fe.S
	...
1a00002c:	51 52 00 1a 85 01 00 1a 00 00 00 00 f1 52 00 1a     QR...........R..
1a00003c:	55 53 00 1a                                         US..

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	cd 73 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     .s..............
1a000070:	3d 70 00 1a 7d 70 00 1a bd 70 00 1a 01 71 00 1a     =p..}p...p...q..
1a000080:	6d 0a 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     m...............
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bd 01 00 1a bb 01 00 1a c7 6f 00 1a d1 6f 00 1a     .........o...o..
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	5d 75 00 1a 67 75 00 1a 71 75 00 1a bb 01 00 1a     ]u..gu..qu......
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a0088fc 	.word	0x1a0088fc
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000e8 	.word	0x000000e8
1a000120:	1a0088fc 	.word	0x1a0088fc
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a0088fc 	.word	0x1a0088fc
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a0088fc 	.word	0x1a0088fc
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a0088fc 	.word	0x1a0088fc
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000e8 	.word	0x100000e8
1a000154:	000034a4 	.word	0x000034a4
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>

1a0001bc <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a0001bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a0001be:	2000      	movs	r0, #0
1a0001c0:	f006 fdc0 	bl	1a006d44 <uartProcessIRQ>
}
1a0001c4:	bd08      	pop	{r3, pc}
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <Bluetooth>:
 * Además si recibe algún comando del Bluetooth se lo envía a al rutina de control
 *
 */

void Bluetooth(void* taskParmPtr)
{
1a000300:	b530      	push	{r4, r5, lr}
1a000302:	b091      	sub	sp, #68	; 0x44
	uint8_t data;
	uint8_t Bcomando[STRLENGTHMAX];
	uint8_t info[20];
	uint8_t i = 0;
	uint8_t numstr[4];
	bool completo = FALSE;
1a000304:	2500      	movs	r5, #0
	uint8_t i = 0;
1a000306:	462c      	mov	r4, r5
1a000308:	e039      	b.n	1a00037e <Bluetooth+0x7e>
	while (1)
	{
		while (!completo)
		{
			if (uartReadByte( UART_BLUETOOTH, &data))
1a00030a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
1a00030e:	2005      	movs	r0, #5
1a000310:	f006 fdd4 	bl	1a006ebc <uartReadByte>
1a000314:	b308      	cbz	r0, 1a00035a <Bluetooth+0x5a>
			{
				Bcomando[i++] = data;
1a000316:	1c63      	adds	r3, r4, #1
1a000318:	b2db      	uxtb	r3, r3
1a00031a:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
1a00031e:	a910      	add	r1, sp, #64	; 0x40
1a000320:	440c      	add	r4, r1
1a000322:	f804 2c24 	strb.w	r2, [r4, #-36]
				if (i >= (STRLENGTHMAX - 2))
1a000326:	2b11      	cmp	r3, #17
1a000328:	d815      	bhi.n	1a000356 <Bluetooth+0x56>
				Bcomando[i++] = data;
1a00032a:	461c      	mov	r4, r3
					i = 0;
				if (data == '\0')
1a00032c:	bb3a      	cbnz	r2, 1a00037e <Bluetooth+0x7e>
				{	//ACA se termino el string
					Bcomando[i-1] = '\r';
1a00032e:	1e63      	subs	r3, r4, #1
1a000330:	a910      	add	r1, sp, #64	; 0x40
1a000332:	440b      	add	r3, r1
1a000334:	210d      	movs	r1, #13
1a000336:	f803 1c24 	strb.w	r1, [r3, #-36]
					Bcomando[i] = '\n';
1a00033a:	ab10      	add	r3, sp, #64	; 0x40
1a00033c:	4423      	add	r3, r4
1a00033e:	210a      	movs	r1, #10
1a000340:	f803 1c24 	strb.w	r1, [r3, #-36]
					Bcomando[i+1] = '\0';
1a000344:	3401      	adds	r4, #1
1a000346:	ab10      	add	r3, sp, #64	; 0x40
1a000348:	441c      	add	r4, r3
1a00034a:	2300      	movs	r3, #0
1a00034c:	f804 3c24 	strb.w	r3, [r4, #-36]
					i = 0;
1a000350:	4614      	mov	r4, r2
					completo = TRUE;
1a000352:	2501      	movs	r5, #1
1a000354:	e013      	b.n	1a00037e <Bluetooth+0x7e>
					i = 0;
1a000356:	2400      	movs	r4, #0
1a000358:	e7e8      	b.n	1a00032c <Bluetooth+0x2c>
				}
			}
			else//si encuentra que recibio un dato para enviar a Bluetooth lo manda a la UART_BLUETOOTH
			{
				if (qCom_a_Bluetooth != NULL)
1a00035a:	4b34      	ldr	r3, [pc, #208]	; (1a00042c <Bluetooth+0x12c>)
1a00035c:	6818      	ldr	r0, [r3, #0]
1a00035e:	b170      	cbz	r0, 1a00037e <Bluetooth+0x7e>
				{
					if (uxQueueMessagesWaiting(qCom_a_Bluetooth) > 0)
1a000360:	f003 ff3a 	bl	1a0041d8 <uxQueueMessagesWaiting>
1a000364:	b158      	cbz	r0, 1a00037e <Bluetooth+0x7e>
					{
						xQueueReceive(qCom_a_Bluetooth, &info, 0);
1a000366:	2200      	movs	r2, #0
1a000368:	a902      	add	r1, sp, #8
1a00036a:	4b30      	ldr	r3, [pc, #192]	; (1a00042c <Bluetooth+0x12c>)
1a00036c:	6818      	ldr	r0, [r3, #0]
1a00036e:	f003 fe87 	bl	1a004080 <xQueueReceive>
						uartWriteString( UART_BLUETOOTH, info);
1a000372:	a902      	add	r1, sp, #8
1a000374:	2005      	movs	r0, #5
1a000376:	f006 fe1a 	bl	1a006fae <uartWriteString>
1a00037a:	e000      	b.n	1a00037e <Bluetooth+0x7e>
					}
				}
			}
		}
		completo = FALSE;
1a00037c:	2500      	movs	r5, #0
		while (!completo)
1a00037e:	2d00      	cmp	r5, #0
1a000380:	d0c3      	beq.n	1a00030a <Bluetooth+0xa>

		//si llega acá es que se recibió un string, los analizamos y luego se envía a la cola

		if (searchforsubstr(&Bcomando[0], "START"))
1a000382:	492b      	ldr	r1, [pc, #172]	; (1a000430 <Bluetooth+0x130>)
1a000384:	a807      	add	r0, sp, #28
1a000386:	f000 f893 	bl	1a0004b0 <searchforsubstr>
1a00038a:	b1b8      	cbz	r0, 1a0003bc <Bluetooth+0xbc>
		{
			strcpy(Comando_a_Enviar.str, "START");
1a00038c:	4b28      	ldr	r3, [pc, #160]	; (1a000430 <Bluetooth+0x130>)
1a00038e:	e893 0003 	ldmia.w	r3, {r0, r1}
1a000392:	900d      	str	r0, [sp, #52]	; 0x34
1a000394:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
			Comando_a_Enviar.tipo = START;
1a000398:	2301      	movs	r3, #1
1a00039a:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
				{
					continue;
				}
			}
		}
		if ( xQueueSend(qCom_de_Bluetooth, (void * ) &Comando_a_Enviar,
1a00039e:	2300      	movs	r3, #0
1a0003a0:	2201      	movs	r2, #1
1a0003a2:	a90d      	add	r1, sp, #52	; 0x34
1a0003a4:	4823      	ldr	r0, [pc, #140]	; (1a000434 <Bluetooth+0x134>)
1a0003a6:	6800      	ldr	r0, [r0, #0]
1a0003a8:	f003 fd46 	bl	1a003e38 <xQueueGenericSend>
1a0003ac:	2801      	cmp	r0, #1
1a0003ae:	d0e5      	beq.n	1a00037c <Bluetooth+0x7c>
				(TickType_t ) 1) != pdPASS)
		{
			uartWriteString( UART_PC,
1a0003b0:	4921      	ldr	r1, [pc, #132]	; (1a000438 <Bluetooth+0x138>)
1a0003b2:	2003      	movs	r0, #3
1a0003b4:	f006 fdfb 	bl	1a006fae <uartWriteString>
		completo = FALSE;
1a0003b8:	2500      	movs	r5, #0
1a0003ba:	e7e0      	b.n	1a00037e <Bluetooth+0x7e>
			if (searchforsubstr(&Bcomando[0], "STOP"))
1a0003bc:	491f      	ldr	r1, [pc, #124]	; (1a00043c <Bluetooth+0x13c>)
1a0003be:	a807      	add	r0, sp, #28
1a0003c0:	f000 f876 	bl	1a0004b0 <searchforsubstr>
1a0003c4:	b148      	cbz	r0, 1a0003da <Bluetooth+0xda>
				strcpy(Comando_a_Enviar.str, "STOP");
1a0003c6:	4b1d      	ldr	r3, [pc, #116]	; (1a00043c <Bluetooth+0x13c>)
1a0003c8:	e893 0003 	ldmia.w	r3, {r0, r1}
1a0003cc:	900d      	str	r0, [sp, #52]	; 0x34
1a0003ce:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				Comando_a_Enviar.tipo = STOP;
1a0003d2:	2302      	movs	r3, #2
1a0003d4:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
1a0003d8:	e7e1      	b.n	1a00039e <Bluetooth+0x9e>
				if (searchforsubstr(&Bcomando[0], "FREC="))
1a0003da:	4919      	ldr	r1, [pc, #100]	; (1a000440 <Bluetooth+0x140>)
1a0003dc:	a807      	add	r0, sp, #28
1a0003de:	f000 f867 	bl	1a0004b0 <searchforsubstr>
1a0003e2:	4605      	mov	r5, r0
1a0003e4:	2800      	cmp	r0, #0
1a0003e6:	d0ca      	beq.n	1a00037e <Bluetooth+0x7e>
					if (Bcomando[5] != '\r')
1a0003e8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
1a0003ec:	2b0d      	cmp	r3, #13
1a0003ee:	d0d6      	beq.n	1a00039e <Bluetooth+0x9e>
						numstr[0] = Bcomando[5];
1a0003f0:	f88d 3004 	strb.w	r3, [sp, #4]
						if (Bcomando[6]!='\r')
1a0003f4:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
1a0003f8:	2a0d      	cmp	r2, #13
1a0003fa:	d013      	beq.n	1a000424 <Bluetooth+0x124>
							numstr[1] = Bcomando[5];
1a0003fc:	f88d 3005 	strb.w	r3, [sp, #5]
							numstr[2] = '\0';
1a000400:	2300      	movs	r3, #0
1a000402:	f88d 3006 	strb.w	r3, [sp, #6]
						Comando_a_Enviar.frecuencia = my_atoi(numstr);
1a000406:	a801      	add	r0, sp, #4
1a000408:	f000 f891 	bl	1a00052e <my_atoi>
1a00040c:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
						strcpy(Comando_a_Enviar.str, "FREC=");
1a000410:	4b0b      	ldr	r3, [pc, #44]	; (1a000440 <Bluetooth+0x140>)
1a000412:	e893 0003 	ldmia.w	r3, {r0, r1}
1a000416:	900d      	str	r0, [sp, #52]	; 0x34
1a000418:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
						Comando_a_Enviar.tipo = UPDATE_FREC;
1a00041c:	2300      	movs	r3, #0
1a00041e:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
1a000422:	e7bc      	b.n	1a00039e <Bluetooth+0x9e>
							numstr[1] = '\0';
1a000424:	2300      	movs	r3, #0
1a000426:	f88d 3005 	strb.w	r3, [sp, #5]
1a00042a:	e7ec      	b.n	1a000406 <Bluetooth+0x106>
1a00042c:	10003534 	.word	0x10003534
1a000430:	1a007918 	.word	0x1a007918
1a000434:	100034ac 	.word	0x100034ac
1a000438:	1a007930 	.word	0x1a007930
1a00043c:	1a007920 	.word	0x1a007920
1a000440:	1a007928 	.word	0x1a007928

1a000444 <itoa_dec>:
//----------- Rutina que convierte de entero a ascii base decimal---------------------------
char* itoa_dec(int value, char* result) {
	char* ptr = result, *ptr1 = result, tmp_char;
	int tmp_value;

	if (result != NULL) {
1a000444:	b379      	cbz	r1, 1a0004a6 <itoa_dec+0x62>
char* itoa_dec(int value, char* result) {
1a000446:	b470      	push	{r4, r5, r6}
1a000448:	460d      	mov	r5, r1
1a00044a:	e001      	b.n	1a000450 <itoa_dec+0xc>
		do {
			tmp_value = value;
			value /= 10;
			*ptr++ =
1a00044c:	4621      	mov	r1, r4
			value /= 10;
1a00044e:	4610      	mov	r0, r2
1a000450:	4b15      	ldr	r3, [pc, #84]	; (1a0004a8 <itoa_dec+0x64>)
1a000452:	fb83 2300 	smull	r2, r3, r3, r0
1a000456:	17c2      	asrs	r2, r0, #31
1a000458:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
					"zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35
							+ (tmp_value - value * 10)];
1a00045c:	f06f 0309 	mvn.w	r3, #9
1a000460:	fb03 0302 	mla	r3, r3, r2, r0
1a000464:	3323      	adds	r3, #35	; 0x23
			*ptr++ =
1a000466:	1c4c      	adds	r4, r1, #1
					"zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35
1a000468:	4e10      	ldr	r6, [pc, #64]	; (1a0004ac <itoa_dec+0x68>)
1a00046a:	5cf3      	ldrb	r3, [r6, r3]
			*ptr++ =
1a00046c:	700b      	strb	r3, [r1, #0]
		} while (value);
1a00046e:	2a00      	cmp	r2, #0
1a000470:	d1ec      	bne.n	1a00044c <itoa_dec+0x8>

// Apply negative sign
		if (tmp_value < 0)
1a000472:	2800      	cmp	r0, #0
1a000474:	db04      	blt.n	1a000480 <itoa_dec+0x3c>
			*ptr++ = '-';
		*ptr-- = '\0';
1a000476:	1e62      	subs	r2, r4, #1
1a000478:	2300      	movs	r3, #0
1a00047a:	7023      	strb	r3, [r4, #0]
	char* ptr = result, *ptr1 = result, tmp_char;
1a00047c:	462b      	mov	r3, r5
		while (ptr1 < ptr) {
1a00047e:	e00d      	b.n	1a00049c <itoa_dec+0x58>
			*ptr++ = '-';
1a000480:	1c8c      	adds	r4, r1, #2
1a000482:	232d      	movs	r3, #45	; 0x2d
1a000484:	704b      	strb	r3, [r1, #1]
1a000486:	e7f6      	b.n	1a000476 <itoa_dec+0x32>
			tmp_char = *ptr;
1a000488:	4611      	mov	r1, r2
1a00048a:	f811 0901 	ldrb.w	r0, [r1], #-1
			*ptr-- = *ptr1;
1a00048e:	461c      	mov	r4, r3
1a000490:	f814 6b01 	ldrb.w	r6, [r4], #1
1a000494:	7016      	strb	r6, [r2, #0]
			*ptr1++ = tmp_char;
1a000496:	7018      	strb	r0, [r3, #0]
1a000498:	4623      	mov	r3, r4
			*ptr-- = *ptr1;
1a00049a:	460a      	mov	r2, r1
		while (ptr1 < ptr) {
1a00049c:	429a      	cmp	r2, r3
1a00049e:	d8f3      	bhi.n	1a000488 <itoa_dec+0x44>
		}
		return result;
1a0004a0:	4628      	mov	r0, r5
	}
}
1a0004a2:	bc70      	pop	{r4, r5, r6}
1a0004a4:	4770      	bx	lr
1a0004a6:	4770      	bx	lr
1a0004a8:	66666667 	.word	0x66666667
1a0004ac:	1a007960 	.word	0x1a007960

1a0004b0 <searchforsubstr>:

#define MAXLENGTH 20
//rutna que busca un substrin dentro de un string y retorna TRUE si lo encuentra
bool searchforsubstr(char* str,  char* substr) {
1a0004b0:	b4f0      	push	{r4, r5, r6, r7}
1a0004b2:	b082      	sub	sp, #8
	uint32_t i, j, l1 = 0, l2 = 0;
	volatile bool flag = FALSE;
1a0004b4:	2300      	movs	r3, #0
1a0004b6:	f88d 3007 	strb.w	r3, [sp, #7]

	if (str == NULL || substr == NULL)//verifica que los punteros no sean nulos
1a0004ba:	b380      	cbz	r0, 1a00051e <searchforsubstr+0x6e>
1a0004bc:	4605      	mov	r5, r0
1a0004be:	b391      	cbz	r1, 1a000526 <searchforsubstr+0x76>
		return (FALSE);

	while (str[l1] != '\0') {			//determina el largo del string
1a0004c0:	5cea      	ldrb	r2, [r5, r3]
1a0004c2:	b122      	cbz	r2, 1a0004ce <searchforsubstr+0x1e>
		l1++;
1a0004c4:	3301      	adds	r3, #1
		if (l1 > MAXLENGTH)//verifica que la longitud del string no supere el maximo
1a0004c6:	2b14      	cmp	r3, #20
1a0004c8:	d9fa      	bls.n	1a0004c0 <searchforsubstr+0x10>
			return (FALSE);
1a0004ca:	2000      	movs	r0, #0
1a0004cc:	e028      	b.n	1a000520 <searchforsubstr+0x70>
	uint32_t i, j, l1 = 0, l2 = 0;
1a0004ce:	2000      	movs	r0, #0
	}

	while (substr[l2] != '\0') {	//determina el largo del substring
1a0004d0:	5c0a      	ldrb	r2, [r1, r0]
1a0004d2:	b122      	cbz	r2, 1a0004de <searchforsubstr+0x2e>
		l2++;
1a0004d4:	3001      	adds	r0, #1
		if (l2 > l1)	//verifica que la longitud del substring no supere la del string
1a0004d6:	4283      	cmp	r3, r0
1a0004d8:	d2fa      	bcs.n	1a0004d0 <searchforsubstr+0x20>
			return (FALSE);
1a0004da:	2000      	movs	r0, #0
1a0004dc:	e020      	b.n	1a000520 <searchforsubstr+0x70>
	}
	if (l2 > l1)		//el substring no puede ser mayor que el string
1a0004de:	4283      	cmp	r3, r0
1a0004e0:	d323      	bcc.n	1a00052a <searchforsubstr+0x7a>
		return (FALSE);

	for (i = 0; i <= l1 - l2; i++) {
1a0004e2:	2400      	movs	r4, #0
1a0004e4:	e012      	b.n	1a00050c <searchforsubstr+0x5c>
		for (j = i; j < i + l2; j++) {
1a0004e6:	3201      	adds	r2, #1
1a0004e8:	1826      	adds	r6, r4, r0
1a0004ea:	4296      	cmp	r6, r2
1a0004ec:	d90a      	bls.n	1a000504 <searchforsubstr+0x54>
			flag = TRUE;
1a0004ee:	2601      	movs	r6, #1
1a0004f0:	f88d 6007 	strb.w	r6, [sp, #7]
			if (str[j] != substr[j - i]) {
1a0004f4:	5caf      	ldrb	r7, [r5, r2]
1a0004f6:	1b16      	subs	r6, r2, r4
1a0004f8:	5d8e      	ldrb	r6, [r1, r6]
1a0004fa:	42b7      	cmp	r7, r6
1a0004fc:	d0f3      	beq.n	1a0004e6 <searchforsubstr+0x36>
				flag = FALSE;
1a0004fe:	2200      	movs	r2, #0
1a000500:	f88d 2007 	strb.w	r2, [sp, #7]
				break;
			}
		}
		if (flag == TRUE)
1a000504:	f89d 2007 	ldrb.w	r2, [sp, #7]
1a000508:	b92a      	cbnz	r2, 1a000516 <searchforsubstr+0x66>
	for (i = 0; i <= l1 - l2; i++) {
1a00050a:	3401      	adds	r4, #1
1a00050c:	1a1a      	subs	r2, r3, r0
1a00050e:	42a2      	cmp	r2, r4
1a000510:	d301      	bcc.n	1a000516 <searchforsubstr+0x66>
		for (j = i; j < i + l2; j++) {
1a000512:	4622      	mov	r2, r4
1a000514:	e7e8      	b.n	1a0004e8 <searchforsubstr+0x38>
			break;
	}
	return (flag);
1a000516:	f89d 0007 	ldrb.w	r0, [sp, #7]
1a00051a:	b2c0      	uxtb	r0, r0
1a00051c:	e000      	b.n	1a000520 <searchforsubstr+0x70>
		return (FALSE);
1a00051e:	2000      	movs	r0, #0
}
1a000520:	b002      	add	sp, #8
1a000522:	bcf0      	pop	{r4, r5, r6, r7}
1a000524:	4770      	bx	lr
		return (FALSE);
1a000526:	2000      	movs	r0, #0
1a000528:	e7fa      	b.n	1a000520 <searchforsubstr+0x70>
		return (FALSE);
1a00052a:	2000      	movs	r0, #0
1a00052c:	e7f8      	b.n	1a000520 <searchforsubstr+0x70>

1a00052e <my_atoi>:


//rutina que convierte un ascii en un entero

int my_atoi(char *p) {
1a00052e:	4602      	mov	r2, r0
    int k = 0;
1a000530:	2000      	movs	r0, #0
    while (*p) {
1a000532:	e006      	b.n	1a000542 <my_atoi+0x14>
        k = (k << 3) + (k << 1) + (*p) - '0';
1a000534:	0043      	lsls	r3, r0, #1
1a000536:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
1a00053a:	440b      	add	r3, r1
1a00053c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
        p++;
1a000540:	3201      	adds	r2, #1
    while (*p) {
1a000542:	7811      	ldrb	r1, [r2, #0]
1a000544:	2900      	cmp	r1, #0
1a000546:	d1f5      	bne.n	1a000534 <my_atoi+0x6>
     }
     return k;
}
1a000548:	4770      	bx	lr
1a00054a:	Address 0x000000001a00054a is out of bounds.


1a00054c <MCM_Trig_Functions>:
  * @param  hAngle: angle in q1.15 format
  * @retval Sin(angle) and Cos(angle) in Trig_Components format
  */

Trig_Components MCM_Trig_Functions( int16_t hAngle )
{
1a00054c:	b082      	sub	sp, #8
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
1a00054e:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex = ( uint16_t )shindex;
  uhindex /= ( uint16_t )64;
1a000552:	f3c0 1089 	ubfx	r0, r0, #6, #10


  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
1a000556:	f400 7340 	and.w	r3, r0, #768	; 0x300
1a00055a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
1a00055e:	d03a      	beq.n	1a0005d6 <MCM_Trig_Functions+0x8a>
1a000560:	d913      	bls.n	1a00058a <MCM_Trig_Functions+0x3e>
1a000562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a000566:	d020      	beq.n	1a0005aa <MCM_Trig_Functions+0x5e>
1a000568:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
1a00056c:	d129      	bne.n	1a0005c2 <MCM_Trig_Functions+0x76>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U90_180:
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
1a00056e:	b2c0      	uxtb	r0, r0
1a000570:	43c3      	mvns	r3, r0
1a000572:	b2db      	uxtb	r3, r3
1a000574:	4a1f      	ldr	r2, [pc, #124]	; (1a0005f4 <MCM_Trig_Functions+0xa8>)
1a000576:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
1a00057a:	f8ad 3002 	strh.w	r3, [sp, #2]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
1a00057e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
1a000582:	425b      	negs	r3, r3
1a000584:	f8ad 3000 	strh.w	r3, [sp]
      break;
1a000588:	e01b      	b.n	1a0005c2 <MCM_Trig_Functions+0x76>
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
1a00058a:	b9d3      	cbnz	r3, 1a0005c2 <MCM_Trig_Functions+0x76>

    case U180_270:
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
1a00058c:	b2c0      	uxtb	r0, r0
1a00058e:	4a19      	ldr	r2, [pc, #100]	; (1a0005f4 <MCM_Trig_Functions+0xa8>)
1a000590:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
1a000594:	425b      	negs	r3, r3
1a000596:	f8ad 3002 	strh.w	r3, [sp, #2]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
1a00059a:	43c0      	mvns	r0, r0
1a00059c:	b2c0      	uxtb	r0, r0
1a00059e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
1a0005a2:	425b      	negs	r3, r3
1a0005a4:	f8ad 3000 	strh.w	r3, [sp]
      break;
1a0005a8:	e00b      	b.n	1a0005c2 <MCM_Trig_Functions+0x76>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
1a0005aa:	b2c0      	uxtb	r0, r0
1a0005ac:	4b11      	ldr	r3, [pc, #68]	; (1a0005f4 <MCM_Trig_Functions+0xa8>)
1a0005ae:	f933 2010 	ldrsh.w	r2, [r3, r0, lsl #1]
1a0005b2:	f8ad 2002 	strh.w	r2, [sp, #2]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
1a0005b6:	43c0      	mvns	r0, r0
1a0005b8:	b2c0      	uxtb	r0, r0
1a0005ba:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
1a0005be:	f8ad 3000 	strh.w	r3, [sp]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
      break;
    default:
      break;
  }
  return ( Local_Components );
1a0005c2:	9b00      	ldr	r3, [sp, #0]
1a0005c4:	2000      	movs	r0, #0
1a0005c6:	b29a      	uxth	r2, r3
1a0005c8:	f362 000f 	bfi	r0, r2, #0, #16
1a0005cc:	0c1b      	lsrs	r3, r3, #16
1a0005ce:	f363 401f 	bfi	r0, r3, #16, #16
}
1a0005d2:	b002      	add	sp, #8
1a0005d4:	4770      	bx	lr
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
1a0005d6:	b2c0      	uxtb	r0, r0
1a0005d8:	43c3      	mvns	r3, r0
1a0005da:	b2db      	uxtb	r3, r3
1a0005dc:	4a05      	ldr	r2, [pc, #20]	; (1a0005f4 <MCM_Trig_Functions+0xa8>)
1a0005de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
1a0005e2:	425b      	negs	r3, r3
1a0005e4:	f8ad 3002 	strh.w	r3, [sp, #2]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
1a0005e8:	f932 3010 	ldrsh.w	r3, [r2, r0, lsl #1]
1a0005ec:	f8ad 3000 	strh.w	r3, [sp]
      break;
1a0005f0:	e7e7      	b.n	1a0005c2 <MCM_Trig_Functions+0x76>
1a0005f2:	bf00      	nop
1a0005f4:	1a0079a8 	.word	0x1a0079a8

1a0005f8 <DiskLog>:
static void DiskTp(void* taskParmPtr);

/*=====[Implementaciones de funciones publicas]==============================*/

void DiskLog(void* taskParmPtr)
{
1a0005f8:	b530      	push	{r4, r5, lr}
1a0005fa:	b089      	sub	sp, #36	; 0x24
	UINT nbytes;
	UINT i;
	Txt2Disk_t comLog;

	// SPI configuration
	spiConfig(SPI0);
1a0005fc:	2000      	movs	r0, #0
1a0005fe:	f006 fced 	bl	1a006fdc <spiInit>

	// Initialize SD card driver
	FSSDC_InitSPI();
1a000602:	f005 fb9b 	bl	1a005d3c <FSSDC_InitSPI>
	// Give a work area to the default drive
	if (f_mount(&fs, "SDC:", 0) != FR_OK)
1a000606:	2200      	movs	r2, #0
1a000608:	4927      	ldr	r1, [pc, #156]	; (1a0006a8 <DiskLog+0xb0>)
1a00060a:	4828      	ldr	r0, [pc, #160]	; (1a0006ac <DiskLog+0xb4>)
1a00060c:	f002 fe98 	bl	1a003340 <f_mount>
1a000610:	e039      	b.n	1a000686 <DiskLog+0x8e>
		if (qLog_Write != NULL)
		{
			if (uxQueueMessagesWaiting(qLog_Write) > 0)
			{
				xQueueReceive(qLog_Write, &comLog, 0);
				for (i = 0; comLog.str[i] != '\0'; i++);
1a000612:	3301      	adds	r3, #1
1a000614:	aa08      	add	r2, sp, #32
1a000616:	441a      	add	r2, r3
1a000618:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
1a00061c:	2a00      	cmp	r2, #0
1a00061e:	d1f8      	bne.n	1a000612 <DiskLog+0x1a>
				comLog.str[i++]='\r';
1a000620:	1c5a      	adds	r2, r3, #1
1a000622:	a908      	add	r1, sp, #32
1a000624:	4419      	add	r1, r3
1a000626:	200d      	movs	r0, #13
1a000628:	f801 0c1c 	strb.w	r0, [r1, #-28]
				comLog.str[i++]='\n';
1a00062c:	1c9c      	adds	r4, r3, #2
1a00062e:	ab08      	add	r3, sp, #32
1a000630:	4413      	add	r3, r2
1a000632:	220a      	movs	r2, #10
1a000634:	f803 2c1c 	strb.w	r2, [r3, #-28]

				if (f_open(&fp, FILENAME, FA_OPEN_APPEND | FA_WRITE) == FR_OK)
1a000638:	2232      	movs	r2, #50	; 0x32
1a00063a:	491d      	ldr	r1, [pc, #116]	; (1a0006b0 <DiskLog+0xb8>)
1a00063c:	481d      	ldr	r0, [pc, #116]	; (1a0006b4 <DiskLog+0xbc>)
1a00063e:	f002 fea7 	bl	1a003390 <f_open>
1a000642:	b9a8      	cbnz	r0, 1a000670 <DiskLog+0x78>
				{
					f_write(&fp, &comLog.str, i, &nbytes);
1a000644:	4d1b      	ldr	r5, [pc, #108]	; (1a0006b4 <DiskLog+0xbc>)
1a000646:	ab07      	add	r3, sp, #28
1a000648:	4622      	mov	r2, r4
1a00064a:	a901      	add	r1, sp, #4
1a00064c:	4628      	mov	r0, r5
1a00064e:	f002 fffb 	bl	1a003648 <f_write>

					f_close(&fp);
1a000652:	4628      	mov	r0, r5
1a000654:	f003 f9c8 	bl	1a0039e8 <f_close>

					if (nbytes == i)
1a000658:	9b07      	ldr	r3, [sp, #28]
1a00065a:	42a3      	cmp	r3, r4
1a00065c:	d110      	bne.n	1a000680 <DiskLog+0x88>
					{
						// Turn ON LEDG if the write operation was successful
						gpioWrite(LEDG, ON);
1a00065e:	2101      	movs	r1, #1
1a000660:	2029      	movs	r0, #41	; 0x29
1a000662:	f006 fe53 	bl	1a00730c <gpioWrite>
						gpioWrite(LEDR, OFF);
1a000666:	2100      	movs	r1, #0
1a000668:	2028      	movs	r0, #40	; 0x28
1a00066a:	f006 fe4f 	bl	1a00730c <gpioWrite>
1a00066e:	e007      	b.n	1a000680 <DiskLog+0x88>
					}
				}
				else
				{
					// Turn ON LEDR if the write operation was fail
					gpioWrite(LEDG, OFF);
1a000670:	2100      	movs	r1, #0
1a000672:	2029      	movs	r0, #41	; 0x29
1a000674:	f006 fe4a 	bl	1a00730c <gpioWrite>
					gpioWrite(LEDR, ON);
1a000678:	2101      	movs	r1, #1
1a00067a:	2028      	movs	r0, #40	; 0x28
1a00067c:	f006 fe46 	bl	1a00730c <gpioWrite>
				}
				vTaskDelay(2 / portTICK_RATE_MS);
1a000680:	2002      	movs	r0, #2
1a000682:	f004 f9b3 	bl	1a0049ec <vTaskDelay>
		if (qLog_Write != NULL)
1a000686:	4b0c      	ldr	r3, [pc, #48]	; (1a0006b8 <DiskLog+0xc0>)
1a000688:	6818      	ldr	r0, [r3, #0]
1a00068a:	2800      	cmp	r0, #0
1a00068c:	d0fb      	beq.n	1a000686 <DiskLog+0x8e>
			if (uxQueueMessagesWaiting(qLog_Write) > 0)
1a00068e:	f003 fda3 	bl	1a0041d8 <uxQueueMessagesWaiting>
1a000692:	2800      	cmp	r0, #0
1a000694:	d0f7      	beq.n	1a000686 <DiskLog+0x8e>
				xQueueReceive(qLog_Write, &comLog, 0);
1a000696:	2200      	movs	r2, #0
1a000698:	a901      	add	r1, sp, #4
1a00069a:	4b07      	ldr	r3, [pc, #28]	; (1a0006b8 <DiskLog+0xc0>)
1a00069c:	6818      	ldr	r0, [r3, #0]
1a00069e:	f003 fcef 	bl	1a004080 <xQueueReceive>
				for (i = 0; comLog.str[i] != '\0'; i++);
1a0006a2:	2300      	movs	r3, #0
1a0006a4:	e7b6      	b.n	1a000614 <DiskLog+0x1c>
1a0006a6:	bf00      	nop
1a0006a8:	1a007ba8 	.word	0x1a007ba8
1a0006ac:	10000338 	.word	0x10000338
1a0006b0:	1a007bb0 	.word	0x1a007bb0
1a0006b4:	100000e8 	.word	0x100000e8
1a0006b8:	10003530 	.word	0x10003530

1a0006bc <fsmArrebInicia>:

/*=====[Implementaciones de funciones privadas]==============================*/

static void fsmArrebInicia(arrebSt_t* Boton, gpioMap_t tecla)
{
	Boton->boton = tecla;
1a0006bc:	7001      	strb	r1, [r0, #0]
	Boton->status = UP;
1a0006be:	2300      	movs	r3, #0
1a0006c0:	7043      	strb	r3, [r0, #1]
}
1a0006c2:	4770      	bx	lr

1a0006c4 <fsmArreb>:

static bool fsmArreb(arrebSt_t* Boton)
{
	bool retorno = FALSE;
	if (Boton == NULL)
1a0006c4:	2800      	cmp	r0, #0
1a0006c6:	d052      	beq.n	1a00076e <fsmArreb+0xaa>
{
1a0006c8:	b538      	push	{r3, r4, r5, lr}
1a0006ca:	4604      	mov	r4, r0
		return (retorno);

	switch (Boton->status)
1a0006cc:	7843      	ldrb	r3, [r0, #1]
1a0006ce:	2b02      	cmp	r3, #2
1a0006d0:	d028      	beq.n	1a000724 <fsmArreb+0x60>
1a0006d2:	2b03      	cmp	r3, #3
1a0006d4:	d03a      	beq.n	1a00074c <fsmArreb+0x88>
1a0006d6:	2b01      	cmp	r3, #1
1a0006d8:	d013      	beq.n	1a000702 <fsmArreb+0x3e>
	{
	default:
	case UP:
		if (!gpioRead(Boton->boton)) //detecta que se pulsó, va a falling
1a0006da:	7800      	ldrb	r0, [r0, #0]
1a0006dc:	f006 fe41 	bl	1a007362 <gpioRead>
1a0006e0:	b108      	cbz	r0, 1a0006e6 <fsmArreb+0x22>
	bool retorno = FALSE;
1a0006e2:	2000      	movs	r0, #0
				Boton->status = DOWN;
		}
		break;
	}
	return (retorno);
}
1a0006e4:	bd38      	pop	{r3, r4, r5, pc}
			delayConfig(&Boton->demSt, TIEMPO_ANTIRREBOTE);
1a0006e6:	f104 0508 	add.w	r5, r4, #8
1a0006ea:	2228      	movs	r2, #40	; 0x28
1a0006ec:	2300      	movs	r3, #0
1a0006ee:	4628      	mov	r0, r5
1a0006f0:	f006 fecc 	bl	1a00748c <delayInit>
			delayRead(&Boton->demSt);	//al leerlo se le da arranque
1a0006f4:	4628      	mov	r0, r5
1a0006f6:	f006 fed9 	bl	1a0074ac <delayRead>
			Boton->status = FALLING;
1a0006fa:	2301      	movs	r3, #1
1a0006fc:	7063      	strb	r3, [r4, #1]
	bool retorno = FALSE;
1a0006fe:	2000      	movs	r0, #0
1a000700:	e7f0      	b.n	1a0006e4 <fsmArreb+0x20>
		if (delayRead(&Boton->demSt)) //pasó el tiempo, verificar que la tecla sigue apretada
1a000702:	3008      	adds	r0, #8
1a000704:	f006 fed2 	bl	1a0074ac <delayRead>
1a000708:	b908      	cbnz	r0, 1a00070e <fsmArreb+0x4a>
	bool retorno = FALSE;
1a00070a:	2000      	movs	r0, #0
1a00070c:	e7ea      	b.n	1a0006e4 <fsmArreb+0x20>
			if (!gpioRead(Boton->boton))
1a00070e:	7820      	ldrb	r0, [r4, #0]
1a000710:	f006 fe27 	bl	1a007362 <gpioRead>
1a000714:	b918      	cbnz	r0, 1a00071e <fsmArreb+0x5a>
				Boton->status = DOWN;
1a000716:	2302      	movs	r3, #2
1a000718:	7063      	strb	r3, [r4, #1]
				retorno = TRUE;
1a00071a:	2001      	movs	r0, #1
1a00071c:	e7e2      	b.n	1a0006e4 <fsmArreb+0x20>
				Boton->status = UP;
1a00071e:	2000      	movs	r0, #0
1a000720:	7060      	strb	r0, [r4, #1]
1a000722:	e7df      	b.n	1a0006e4 <fsmArreb+0x20>
		if (gpioRead(Boton->boton)) //detecta que se soltó, va a estado SOLTANDO
1a000724:	7800      	ldrb	r0, [r0, #0]
1a000726:	f006 fe1c 	bl	1a007362 <gpioRead>
1a00072a:	b908      	cbnz	r0, 1a000730 <fsmArreb+0x6c>
	bool retorno = FALSE;
1a00072c:	2000      	movs	r0, #0
1a00072e:	e7d9      	b.n	1a0006e4 <fsmArreb+0x20>
			delayConfig(&Boton->demSt, TIEMPO_ANTIRREBOTE);
1a000730:	f104 0508 	add.w	r5, r4, #8
1a000734:	2228      	movs	r2, #40	; 0x28
1a000736:	2300      	movs	r3, #0
1a000738:	4628      	mov	r0, r5
1a00073a:	f006 fea7 	bl	1a00748c <delayInit>
			delayRead(&Boton->demSt);	//al leerlo se le da arranque
1a00073e:	4628      	mov	r0, r5
1a000740:	f006 feb4 	bl	1a0074ac <delayRead>
			Boton->status = RISING;
1a000744:	2303      	movs	r3, #3
1a000746:	7063      	strb	r3, [r4, #1]
	bool retorno = FALSE;
1a000748:	2000      	movs	r0, #0
1a00074a:	e7cb      	b.n	1a0006e4 <fsmArreb+0x20>
		if (delayRead(&Boton->demSt)) //pasó el tiempo, verificar que la tecla sigue soltada
1a00074c:	3008      	adds	r0, #8
1a00074e:	f006 fead 	bl	1a0074ac <delayRead>
1a000752:	b908      	cbnz	r0, 1a000758 <fsmArreb+0x94>
	bool retorno = FALSE;
1a000754:	2000      	movs	r0, #0
1a000756:	e7c5      	b.n	1a0006e4 <fsmArreb+0x20>
			if (gpioRead(Boton->boton))
1a000758:	7820      	ldrb	r0, [r4, #0]
1a00075a:	f006 fe02 	bl	1a007362 <gpioRead>
1a00075e:	b918      	cbnz	r0, 1a000768 <fsmArreb+0xa4>
				Boton->status = DOWN;
1a000760:	2302      	movs	r3, #2
1a000762:	7063      	strb	r3, [r4, #1]
	bool retorno = FALSE;
1a000764:	2000      	movs	r0, #0
1a000766:	e7bd      	b.n	1a0006e4 <fsmArreb+0x20>
				Boton->status = UP;
1a000768:	2000      	movs	r0, #0
1a00076a:	7060      	strb	r0, [r4, #1]
1a00076c:	e7ba      	b.n	1a0006e4 <fsmArreb+0x20>
		return (retorno);
1a00076e:	2000      	movs	r0, #0
}
1a000770:	4770      	bx	lr
1a000772:	Address 0x000000001a000772 is out of bounds.


1a000774 <tecla>:
{
1a000774:	b510      	push	{r4, lr}
1a000776:	b082      	sub	sp, #8
	for (tecIndice = 0; tecIndice < CANT_TECLAS; tecIndice++)
1a000778:	2400      	movs	r4, #0
1a00077a:	e007      	b.n	1a00078c <tecla+0x18>
		fsmArrebInicia(&BotSt[tecIndice], teclas[tecIndice]);
1a00077c:	4b15      	ldr	r3, [pc, #84]	; (1a0007d4 <tecla+0x60>)
1a00077e:	5d19      	ldrb	r1, [r3, r4]
1a000780:	4815      	ldr	r0, [pc, #84]	; (1a0007d8 <tecla+0x64>)
1a000782:	eb00 1044 	add.w	r0, r0, r4, lsl #5
1a000786:	f7ff ff99 	bl	1a0006bc <fsmArrebInicia>
	for (tecIndice = 0; tecIndice < CANT_TECLAS; tecIndice++)
1a00078a:	3401      	adds	r4, #1
1a00078c:	2c03      	cmp	r4, #3
1a00078e:	d9f5      	bls.n	1a00077c <tecla+0x8>
		for (tecIndice = 0; tecIndice < CANT_TECLAS; tecIndice++)
1a000790:	2400      	movs	r4, #0
1a000792:	e003      	b.n	1a00079c <tecla+0x28>
			vTaskDelay(5 / portTICK_PERIOD_MS);
1a000794:	2005      	movs	r0, #5
1a000796:	f004 f929 	bl	1a0049ec <vTaskDelay>
		for (tecIndice = 0; tecIndice < CANT_TECLAS; tecIndice++)
1a00079a:	3401      	adds	r4, #1
1a00079c:	2c03      	cmp	r4, #3
1a00079e:	d8f7      	bhi.n	1a000790 <tecla+0x1c>
			if (fsmArreb(&BotSt[tecIndice]))
1a0007a0:	480d      	ldr	r0, [pc, #52]	; (1a0007d8 <tecla+0x64>)
1a0007a2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
1a0007a6:	f7ff ff8d 	bl	1a0006c4 <fsmArreb>
1a0007aa:	2800      	cmp	r0, #0
1a0007ac:	d0f2      	beq.n	1a000794 <tecla+0x20>
				tec_presionada = teclas[tecIndice];
1a0007ae:	4b09      	ldr	r3, [pc, #36]	; (1a0007d4 <tecla+0x60>)
1a0007b0:	5d1b      	ldrb	r3, [r3, r4]
1a0007b2:	a902      	add	r1, sp, #8
1a0007b4:	f801 3d01 	strb.w	r3, [r1, #-1]!
				if ( xQueueSend(qTecla_Apretada, &tec_presionada,
1a0007b8:	2300      	movs	r3, #0
1a0007ba:	2201      	movs	r2, #1
1a0007bc:	4807      	ldr	r0, [pc, #28]	; (1a0007dc <tecla+0x68>)
1a0007be:	6800      	ldr	r0, [r0, #0]
1a0007c0:	f003 fb3a 	bl	1a003e38 <xQueueGenericSend>
1a0007c4:	2801      	cmp	r0, #1
1a0007c6:	d0e5      	beq.n	1a000794 <tecla+0x20>
					uartWriteString(3, "Error cola de teclas\r\n");
1a0007c8:	4905      	ldr	r1, [pc, #20]	; (1a0007e0 <tecla+0x6c>)
1a0007ca:	2003      	movs	r0, #3
1a0007cc:	f006 fbef 	bl	1a006fae <uartWriteString>
1a0007d0:	e7e0      	b.n	1a000794 <tecla+0x20>
1a0007d2:	bf00      	nop
1a0007d4:	1a007bd8 	.word	0x1a007bd8
1a0007d8:	100034b0 	.word	0x100034b0
1a0007dc:	10003540 	.word	0x10003540
1a0007e0:	1a007bc0 	.word	0x1a007bc0

1a0007e4 <Led_parpadea>:
	return 0;
}

//===== Tarea que parpadea un led, solo para mostrar que está con vida
void Led_parpadea(void* taskParmPtr)
{
1a0007e4:	b508      	push	{r3, lr}
	while (TRUE)
	{
		gpioToggle(LED3);
1a0007e6:	202d      	movs	r0, #45	; 0x2d
1a0007e8:	f006 fde5 	bl	1a0073b6 <gpioToggle>
		vTaskDelay(1000 / portTICK_RATE_MS);
1a0007ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a0007f0:	f004 f8fc 	bl	1a0049ec <vTaskDelay>
1a0007f4:	e7f7      	b.n	1a0007e6 <Led_parpadea+0x2>
1a0007f6:	Address 0x000000001a0007f6 is out of bounds.


1a0007f8 <hm10bleTest>:
	}
}

bool_t hm10bleTest(int32_t uart)
{
1a0007f8:	b510      	push	{r4, lr}
1a0007fa:	b082      	sub	sp, #8
	uartWriteString(uart, "AT\r\n");
1a0007fc:	b2c4      	uxtb	r4, r0
1a0007fe:	4908      	ldr	r1, [pc, #32]	; (1a000820 <hm10bleTest+0x28>)
1a000800:	4620      	mov	r0, r4
1a000802:	f006 fbd4 	bl	1a006fae <uartWriteString>
	return waitForReceiveStringOrTimeoutBlocking(uart, "OK\r\n",
1a000806:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00080a:	2300      	movs	r3, #0
1a00080c:	e9cd 2300 	strd	r2, r3, [sp]
1a000810:	2204      	movs	r2, #4
1a000812:	4904      	ldr	r1, [pc, #16]	; (1a000824 <hm10bleTest+0x2c>)
1a000814:	4620      	mov	r0, r4
1a000816:	f006 fba0 	bl	1a006f5a <waitForReceiveStringOrTimeoutBlocking>
			strlen("OK\r\n"), 1000);
}
1a00081a:	b002      	add	sp, #8
1a00081c:	bd10      	pop	{r4, pc}
1a00081e:	bf00      	nop
1a000820:	1a007bdc 	.word	0x1a007bdc
1a000824:	1a007be4 	.word	0x1a007be4

1a000828 <main>:
{
1a000828:	b570      	push	{r4, r5, r6, lr}
1a00082a:	b082      	sub	sp, #8
	boardConfig();
1a00082c:	f006 fddc 	bl	1a0073e8 <boardInit>
	Motor.marcha=FALSE;
1a000830:	4b6d      	ldr	r3, [pc, #436]	; (1a0009e8 <main+0x1c0>)
1a000832:	2600      	movs	r6, #0
1a000834:	701e      	strb	r6, [r3, #0]
	Motor.frecuencia=5;
1a000836:	2505      	movs	r5, #5
1a000838:	705d      	strb	r5, [r3, #1]
	gpioInit(GPIO8, GPIO_OUTPUT); //prepara GPIO8 como salida. Esta salida se togglea con la interrupción del MCPWM
1a00083a:	2101      	movs	r1, #1
1a00083c:	200b      	movs	r0, #11
1a00083e:	f006 fc9b 	bl	1a007178 <gpioInit>
	MCPWM_Init(LPC_MCPWM);						//inicializa el MCPWM
1a000842:	4c6a      	ldr	r4, [pc, #424]	; (1a0009ec <main+0x1c4>)
1a000844:	4620      	mov	r0, r4
1a000846:	f000 f9b9 	bl	1a000bbc <MCPWM_Init>
	MCPWM_Pin_Init();					//configura pines de salida del MCPWM
1a00084a:	f000 f9a1 	bl	1a000b90 <MCPWM_Pin_Init>
	MCPWM_ACMode(LPC_MCPWM, ENABLE);			//configura el MCPWM en modo AC
1a00084e:	2101      	movs	r1, #1
1a000850:	4620      	mov	r0, r4
1a000852:	f000 f9ba 	bl	1a000bca <MCPWM_ACMode>
	MCPWM_InitChannels(LPC_MCPWM, Pwm_Channels);//inicializa los 3 canales del MCPWM
1a000856:	4966      	ldr	r1, [pc, #408]	; (1a0009f0 <main+0x1c8>)
1a000858:	4620      	mov	r0, r4
1a00085a:	f000 fa4f 	bl	1a000cfc <MCPWM_InitChannels>
	MCPWM_IntConfig(LPC_MCPWM, MCPWM_INTFLAG_LIM0, ENABLE); //configura interrupción cuando se completa el período en el canal 0
1a00085e:	2201      	movs	r2, #1
1a000860:	4611      	mov	r1, r2
1a000862:	4620      	mov	r0, r4
1a000864:	f000 fa84 	bl	1a000d70 <MCPWM_IntConfig>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a000868:	4b62      	ldr	r3, [pc, #392]	; (1a0009f4 <main+0x1cc>)
1a00086a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
1a00086e:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a000870:	2240      	movs	r2, #64	; 0x40
1a000872:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
	MCPWM_Start(LPC_MCPWM, 1, 1, 1); //arranca el MCPWM los 3 canales a la vez
1a000876:	2301      	movs	r3, #1
1a000878:	461a      	mov	r2, r3
1a00087a:	4619      	mov	r1, r3
1a00087c:	4620      	mov	r0, r4
1a00087e:	f000 fa2b 	bl	1a000cd8 <MCPWM_Start>
	qCom_de_Consola = xQueueCreate(5, sizeof(Comando_t));
1a000882:	4632      	mov	r2, r6
1a000884:	210c      	movs	r1, #12
1a000886:	4628      	mov	r0, r5
1a000888:	f003 faaf 	bl	1a003dea <xQueueGenericCreate>
1a00088c:	4b5a      	ldr	r3, [pc, #360]	; (1a0009f8 <main+0x1d0>)
1a00088e:	6018      	str	r0, [r3, #0]
	if (qCom_de_Consola == NULL)
1a000890:	2800      	cmp	r0, #0
1a000892:	d050      	beq.n	1a000936 <main+0x10e>
	qCom_a_Consola = xQueueCreate(5, sizeof(Txt2Cons_t));
1a000894:	2200      	movs	r2, #0
1a000896:	2114      	movs	r1, #20
1a000898:	2005      	movs	r0, #5
1a00089a:	f003 faa6 	bl	1a003dea <xQueueGenericCreate>
1a00089e:	4b57      	ldr	r3, [pc, #348]	; (1a0009fc <main+0x1d4>)
1a0008a0:	6018      	str	r0, [r3, #0]
	if (qCom_a_Consola == NULL)
1a0008a2:	2800      	cmp	r0, #0
1a0008a4:	d04c      	beq.n	1a000940 <main+0x118>
	qCom_de_Bluetooth = xQueueCreate(5, sizeof(Comando_t));
1a0008a6:	2200      	movs	r2, #0
1a0008a8:	210c      	movs	r1, #12
1a0008aa:	2005      	movs	r0, #5
1a0008ac:	f003 fa9d 	bl	1a003dea <xQueueGenericCreate>
1a0008b0:	4b53      	ldr	r3, [pc, #332]	; (1a000a00 <main+0x1d8>)
1a0008b2:	6018      	str	r0, [r3, #0]
	if (qCom_de_Bluetooth == NULL)
1a0008b4:	2800      	cmp	r0, #0
1a0008b6:	d048      	beq.n	1a00094a <main+0x122>
	qCom_a_Bluetooth = xQueueCreate(5, sizeof(Txt2Blue_t));
1a0008b8:	2200      	movs	r2, #0
1a0008ba:	2114      	movs	r1, #20
1a0008bc:	2005      	movs	r0, #5
1a0008be:	f003 fa94 	bl	1a003dea <xQueueGenericCreate>
1a0008c2:	4b50      	ldr	r3, [pc, #320]	; (1a000a04 <main+0x1dc>)
1a0008c4:	6018      	str	r0, [r3, #0]
	if (qCom_a_Bluetooth == NULL)
1a0008c6:	2800      	cmp	r0, #0
1a0008c8:	d044      	beq.n	1a000954 <main+0x12c>
	qTecla_Apretada = xQueueCreate(5, sizeof(uint8_t));
1a0008ca:	2200      	movs	r2, #0
1a0008cc:	2101      	movs	r1, #1
1a0008ce:	2005      	movs	r0, #5
1a0008d0:	f003 fa8b 	bl	1a003dea <xQueueGenericCreate>
1a0008d4:	4b4c      	ldr	r3, [pc, #304]	; (1a000a08 <main+0x1e0>)
1a0008d6:	6018      	str	r0, [r3, #0]
	if (qTecla_Apretada == NULL)
1a0008d8:	2800      	cmp	r0, #0
1a0008da:	d040      	beq.n	1a00095e <main+0x136>
	qLog_Write = xQueueCreate(5, sizeof(Txt2Disk_t));
1a0008dc:	2200      	movs	r2, #0
1a0008de:	2115      	movs	r1, #21
1a0008e0:	2005      	movs	r0, #5
1a0008e2:	f003 fa82 	bl	1a003dea <xQueueGenericCreate>
1a0008e6:	4b49      	ldr	r3, [pc, #292]	; (1a000a0c <main+0x1e4>)
1a0008e8:	6018      	str	r0, [r3, #0]
	if (qLog_Write == NULL)
1a0008ea:	2800      	cmp	r0, #0
1a0008ec:	d03c      	beq.n	1a000968 <main+0x140>
	uartConfig(UART_PC, 115200);
1a0008ee:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0008f2:	2003      	movs	r0, #3
1a0008f4:	f006 faa4 	bl	1a006e40 <uartInit>
	uartWriteString(UART_PC, "UART_PC configurada.\r\n");
1a0008f8:	4945      	ldr	r1, [pc, #276]	; (1a000a10 <main+0x1e8>)
1a0008fa:	2003      	movs	r0, #3
1a0008fc:	f006 fb57 	bl	1a006fae <uartWriteString>
	uartConfig(UART_BLUETOOTH, 9600);
1a000900:	f44f 5116 	mov.w	r1, #9600	; 0x2580
1a000904:	2005      	movs	r0, #5
1a000906:	f006 fa9b 	bl	1a006e40 <uartInit>
	uartWriteString(UART_PC,
1a00090a:	4942      	ldr	r1, [pc, #264]	; (1a000a14 <main+0x1ec>)
1a00090c:	2003      	movs	r0, #3
1a00090e:	f006 fb4e 	bl	1a006fae <uartWriteString>
	uartWriteString(UART_PC,
1a000912:	4941      	ldr	r1, [pc, #260]	; (1a000a18 <main+0x1f0>)
1a000914:	2003      	movs	r0, #3
1a000916:	f006 fb4a 	bl	1a006fae <uartWriteString>
		if (hm10bleTest(UART_BLUETOOTH))
1a00091a:	2005      	movs	r0, #5
1a00091c:	f7ff ff6c 	bl	1a0007f8 <hm10bleTest>
1a000920:	bb38      	cbnz	r0, 1a000972 <main+0x14a>
			uartWriteString(UART_PC, "No funciona, reintentando.\r\n");
1a000922:	493e      	ldr	r1, [pc, #248]	; (1a000a1c <main+0x1f4>)
1a000924:	2003      	movs	r0, #3
1a000926:	f006 fb42 	bl	1a006fae <uartWriteString>
		delay(2000);
1a00092a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
1a00092e:	2100      	movs	r1, #0
1a000930:	f006 fd90 	bl	1a007454 <delay>
		if (hm10bleTest(UART_BLUETOOTH))
1a000934:	e7f1      	b.n	1a00091a <main+0xf2>
		uartWriteString(UART_PC,
1a000936:	493a      	ldr	r1, [pc, #232]	; (1a000a20 <main+0x1f8>)
1a000938:	2003      	movs	r0, #3
1a00093a:	f006 fb38 	bl	1a006fae <uartWriteString>
1a00093e:	e7a9      	b.n	1a000894 <main+0x6c>
		uartWriteString(UART_PC,
1a000940:	4938      	ldr	r1, [pc, #224]	; (1a000a24 <main+0x1fc>)
1a000942:	2003      	movs	r0, #3
1a000944:	f006 fb33 	bl	1a006fae <uartWriteString>
1a000948:	e7ad      	b.n	1a0008a6 <main+0x7e>
		uartWriteString(UART_PC,
1a00094a:	4937      	ldr	r1, [pc, #220]	; (1a000a28 <main+0x200>)
1a00094c:	2003      	movs	r0, #3
1a00094e:	f006 fb2e 	bl	1a006fae <uartWriteString>
1a000952:	e7b1      	b.n	1a0008b8 <main+0x90>
		uartWriteString(UART_PC,
1a000954:	4935      	ldr	r1, [pc, #212]	; (1a000a2c <main+0x204>)
1a000956:	2003      	movs	r0, #3
1a000958:	f006 fb29 	bl	1a006fae <uartWriteString>
1a00095c:	e7b5      	b.n	1a0008ca <main+0xa2>
		uartWriteString(UART_PC, "Error en creación de cola de teclas.\r\n");
1a00095e:	4934      	ldr	r1, [pc, #208]	; (1a000a30 <main+0x208>)
1a000960:	2003      	movs	r0, #3
1a000962:	f006 fb24 	bl	1a006fae <uartWriteString>
1a000966:	e7b9      	b.n	1a0008dc <main+0xb4>
		uartWriteString(UART_PC, "Error en creación de cola deL LOG.\r\n");
1a000968:	4932      	ldr	r1, [pc, #200]	; (1a000a34 <main+0x20c>)
1a00096a:	2003      	movs	r0, #3
1a00096c:	f006 fb1f 	bl	1a006fae <uartWriteString>
1a000970:	e7bd      	b.n	1a0008ee <main+0xc6>
			uartWriteString(UART_PC, "Modulo conectado correctamente.\r\n");
1a000972:	4931      	ldr	r1, [pc, #196]	; (1a000a38 <main+0x210>)
1a000974:	2003      	movs	r0, #3
1a000976:	f006 fb1a 	bl	1a006fae <uartWriteString>
	xTaskCreate(Led_parpadea,                  // Funcion de la tarea a ejecutar
1a00097a:	2400      	movs	r4, #0
1a00097c:	9401      	str	r4, [sp, #4]
1a00097e:	2303      	movs	r3, #3
1a000980:	9300      	str	r3, [sp, #0]
1a000982:	4623      	mov	r3, r4
1a000984:	22b4      	movs	r2, #180	; 0xb4
1a000986:	492d      	ldr	r1, [pc, #180]	; (1a000a3c <main+0x214>)
1a000988:	482d      	ldr	r0, [pc, #180]	; (1a000a40 <main+0x218>)
1a00098a:	f003 fe9e 	bl	1a0046ca <xTaskCreate>
	xTaskCreate(Bluetooth,                  // Funcion de la tarea a ejecutar
1a00098e:	9401      	str	r4, [sp, #4]
1a000990:	2502      	movs	r5, #2
1a000992:	9500      	str	r5, [sp, #0]
1a000994:	4623      	mov	r3, r4
1a000996:	22b4      	movs	r2, #180	; 0xb4
1a000998:	492a      	ldr	r1, [pc, #168]	; (1a000a44 <main+0x21c>)
1a00099a:	482b      	ldr	r0, [pc, #172]	; (1a000a48 <main+0x220>)
1a00099c:	f003 fe95 	bl	1a0046ca <xTaskCreate>
	xTaskCreate(tecla,                  // Funcion de la tarea a ejecutar
1a0009a0:	9401      	str	r4, [sp, #4]
1a0009a2:	9500      	str	r5, [sp, #0]
1a0009a4:	4623      	mov	r3, r4
1a0009a6:	22b4      	movs	r2, #180	; 0xb4
1a0009a8:	4928      	ldr	r1, [pc, #160]	; (1a000a4c <main+0x224>)
1a0009aa:	4829      	ldr	r0, [pc, #164]	; (1a000a50 <main+0x228>)
1a0009ac:	f003 fe8d 	bl	1a0046ca <xTaskCreate>
	xTaskCreate(consola,                  // Funcion de la tarea a ejecutar
1a0009b0:	9401      	str	r4, [sp, #4]
1a0009b2:	9500      	str	r5, [sp, #0]
1a0009b4:	4623      	mov	r3, r4
1a0009b6:	22b4      	movs	r2, #180	; 0xb4
1a0009b8:	4926      	ldr	r1, [pc, #152]	; (1a000a54 <main+0x22c>)
1a0009ba:	4827      	ldr	r0, [pc, #156]	; (1a000a58 <main+0x230>)
1a0009bc:	f003 fe85 	bl	1a0046ca <xTaskCreate>
	xTaskCreate(Control,                  // Funcion de la tarea a ejecutar
1a0009c0:	9401      	str	r4, [sp, #4]
1a0009c2:	9500      	str	r5, [sp, #0]
1a0009c4:	4623      	mov	r3, r4
1a0009c6:	22b4      	movs	r2, #180	; 0xb4
1a0009c8:	4924      	ldr	r1, [pc, #144]	; (1a000a5c <main+0x234>)
1a0009ca:	4825      	ldr	r0, [pc, #148]	; (1a000a60 <main+0x238>)
1a0009cc:	f003 fe7d 	bl	1a0046ca <xTaskCreate>
	xTaskCreate(DiskLog,                  // Funcion de la tarea a ejecutar
1a0009d0:	9401      	str	r4, [sp, #4]
1a0009d2:	9500      	str	r5, [sp, #0]
1a0009d4:	4623      	mov	r3, r4
1a0009d6:	22b4      	movs	r2, #180	; 0xb4
1a0009d8:	4922      	ldr	r1, [pc, #136]	; (1a000a64 <main+0x23c>)
1a0009da:	4823      	ldr	r0, [pc, #140]	; (1a000a68 <main+0x240>)
1a0009dc:	f003 fe75 	bl	1a0046ca <xTaskCreate>
	vTaskStartScheduler();
1a0009e0:	f003 fea6 	bl	1a004730 <vTaskStartScheduler>
1a0009e4:	e7fe      	b.n	1a0009e4 <main+0x1bc>
1a0009e6:	bf00      	nop
1a0009e8:	10000004 	.word	0x10000004
1a0009ec:	400a0000 	.word	0x400a0000
1a0009f0:	10000570 	.word	0x10000570
1a0009f4:	e000e100 	.word	0xe000e100
1a0009f8:	10003538 	.word	0x10003538
1a0009fc:	1000353c 	.word	0x1000353c
1a000a00:	100034ac 	.word	0x100034ac
1a000a04:	10003534 	.word	0x10003534
1a000a08:	10003540 	.word	0x10003540
1a000a0c:	10003530 	.word	0x10003530
1a000a10:	1a007d20 	.word	0x1a007d20
1a000a14:	1a007d38 	.word	0x1a007d38
1a000a18:	1a007d6c 	.word	0x1a007d6c
1a000a1c:	1a007e00 	.word	0x1a007e00
1a000a20:	1a007bec 	.word	0x1a007bec
1a000a24:	1a007c24 	.word	0x1a007c24
1a000a28:	1a007c5c 	.word	0x1a007c5c
1a000a2c:	1a007c94 	.word	0x1a007c94
1a000a30:	1a007cd0 	.word	0x1a007cd0
1a000a34:	1a007cf8 	.word	0x1a007cf8
1a000a38:	1a007da0 	.word	0x1a007da0
1a000a3c:	1a007dc4 	.word	0x1a007dc4
1a000a40:	1a0007e5 	.word	0x1a0007e5
1a000a44:	1a007dd4 	.word	0x1a007dd4
1a000a48:	1a000301 	.word	0x1a000301
1a000a4c:	1a007de0 	.word	0x1a007de0
1a000a50:	1a000775 	.word	0x1a000775
1a000a54:	1a007de8 	.word	0x1a007de8
1a000a58:	1a000d8d 	.word	0x1a000d8d
1a000a5c:	1a007df0 	.word	0x1a007df0
1a000a60:	1a000ec9 	.word	0x1a000ec9
1a000a64:	1a007df8 	.word	0x1a007df8
1a000a68:	1a0005f9 	.word	0x1a0005f9

1a000a6c <MCPWM_IRQHandler>:
#define NOPULSE 20500
#define MAXPW 20000
#define MINPW 100

void MCPWM_IRQHandler(void)
{
1a000a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000a6e:	b08b      	sub	sp, #44	; 0x2c
	uint32_t pulse_width;
	Trig_Components Trig;
	uint32_t auxAngle;
	uint32_t auxSin;

	if (MCPWM_GetIntStatus(LPC_MCPWM, MCPWM_INTFLAG_LIM0))
1a000a70:	2101      	movs	r1, #1
1a000a72:	4841      	ldr	r0, [pc, #260]	; (1a000b78 <MCPWM_IRQHandler+0x10c>)
1a000a74:	f000 f983 	bl	1a000d7e <MCPWM_GetIntStatus>
1a000a78:	b908      	cbnz	r0, 1a000a7e <MCPWM_IRQHandler+0x12>

		}

		NVIC_ClearPendingIRQ(MCPWM_IRQn);
	}
}
1a000a7a:	b00b      	add	sp, #44	; 0x2c
1a000a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		MCPWM_IntClear(LPC_MCPWM, MCPWM_INTFLAG_LIM0);
1a000a7e:	2101      	movs	r1, #1
1a000a80:	483d      	ldr	r0, [pc, #244]	; (1a000b78 <MCPWM_IRQHandler+0x10c>)
1a000a82:	f000 f97a 	bl	1a000d7a <MCPWM_IntClear>
		gpioToggle(GPIO8); 			//se togglea un pin que sirve de disparo del osciloscopio
1a000a86:	200b      	movs	r0, #11
1a000a88:	f006 fc95 	bl	1a0073b6 <gpioToggle>
		if ((cnt--) == 0)
1a000a8c:	4a3b      	ldr	r2, [pc, #236]	; (1a000b7c <MCPWM_IRQHandler+0x110>)
1a000a8e:	7813      	ldrb	r3, [r2, #0]
1a000a90:	1e59      	subs	r1, r3, #1
1a000a92:	7011      	strb	r1, [r2, #0]
1a000a94:	2b00      	cmp	r3, #0
1a000a96:	d04f      	beq.n	1a000b38 <MCPWM_IRQHandler+0xcc>
		if (Motor.marcha == TRUE)
1a000a98:	4b39      	ldr	r3, [pc, #228]	; (1a000b80 <MCPWM_IRQHandler+0x114>)
1a000a9a:	781b      	ldrb	r3, [r3, #0]
1a000a9c:	2b00      	cmp	r3, #0
1a000a9e:	d052      	beq.n	1a000b46 <MCPWM_IRQHandler+0xda>
			angle = angle + Motor.frecuencia * KANGLE;	//calcula nuevo ángulo
1a000aa0:	4b37      	ldr	r3, [pc, #220]	; (1a000b80 <MCPWM_IRQHandler+0x114>)
1a000aa2:	7858      	ldrb	r0, [r3, #1]
1a000aa4:	4f37      	ldr	r7, [pc, #220]	; (1a000b84 <MCPWM_IRQHandler+0x118>)
1a000aa6:	683b      	ldr	r3, [r7, #0]
1a000aa8:	4a37      	ldr	r2, [pc, #220]	; (1a000b88 <MCPWM_IRQHandler+0x11c>)
1a000aaa:	fb02 3000 	mla	r0, r2, r0, r3
1a000aae:	6038      	str	r0, [r7, #0]
			Trig = MCM_Trig_Functions((int16_t)(auxAngle));	//se obtiene el seno de la tabla
1a000ab0:	1400      	asrs	r0, r0, #16
1a000ab2:	f7ff fd4b 	bl	1a00054c <MCM_Trig_Functions>
			auxSin = 32768 + Trig.hSin;						//se normaliza
1a000ab6:	1403      	asrs	r3, r0, #16
1a000ab8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
			pulse_width = MINPW + (auxSin * MAXPW) >> 16;	//calcual pulse width
1a000abc:	f644 6420 	movw	r4, #20000	; 0x4e20
1a000ac0:	fb04 f303 	mul.w	r3, r4, r3
1a000ac4:	3364      	adds	r3, #100	; 0x64
1a000ac6:	0c1b      	lsrs	r3, r3, #16
			ChannelConfig.channelPulsewidthValue = pulse_width;	//escritira en los registros
1a000ac8:	9309      	str	r3, [sp, #36]	; 0x24
			ChannelConfig.channelPeriodValue = 20400;
1a000aca:	f644 76b0 	movw	r6, #20400	; 0x4fb0
1a000ace:	9608      	str	r6, [sp, #32]
			MCPWM_WriteToShadow(LPC_MCPWM, 0, &ChannelConfig);
1a000ad0:	4d29      	ldr	r5, [pc, #164]	; (1a000b78 <MCPWM_IRQHandler+0x10c>)
1a000ad2:	aa02      	add	r2, sp, #8
1a000ad4:	2100      	movs	r1, #0
1a000ad6:	4628      	mov	r0, r5
1a000ad8:	f000 f880 	bl	1a000bdc <MCPWM_WriteToShadow>
			auxAngle = (angle+0x55555555) >> 16;			//se desplaza 120 grados y recalcula canal 1
1a000adc:	6838      	ldr	r0, [r7, #0]
1a000ade:	f100 3055 	add.w	r0, r0, #1431655765	; 0x55555555
			Trig = MCM_Trig_Functions((int16_t)(auxAngle));
1a000ae2:	1400      	asrs	r0, r0, #16
1a000ae4:	f7ff fd32 	bl	1a00054c <MCM_Trig_Functions>
			auxSin = 32768 + Trig.hSin;
1a000ae8:	1403      	asrs	r3, r0, #16
1a000aea:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
			pulse_width = MINPW + (auxSin * MAXPW) >> 16;
1a000aee:	fb04 f303 	mul.w	r3, r4, r3
1a000af2:	3364      	adds	r3, #100	; 0x64
1a000af4:	0c1b      	lsrs	r3, r3, #16
			ChannelConfig.channelPulsewidthValue = pulse_width;
1a000af6:	9309      	str	r3, [sp, #36]	; 0x24
			ChannelConfig.channelPeriodValue = 20400;
1a000af8:	9608      	str	r6, [sp, #32]
			MCPWM_WriteToShadow(LPC_MCPWM, 1, &ChannelConfig);
1a000afa:	aa02      	add	r2, sp, #8
1a000afc:	2101      	movs	r1, #1
1a000afe:	4628      	mov	r0, r5
1a000b00:	f000 f86c 	bl	1a000bdc <MCPWM_WriteToShadow>
			auxAngle = (angle+0xaaaaaaaa) >> 16;			//se desplaza 240 grados y recalcula canal 2
1a000b04:	6838      	ldr	r0, [r7, #0]
1a000b06:	f100 30aa 	add.w	r0, r0, #2863311530	; 0xaaaaaaaa
			Trig = MCM_Trig_Functions((int16_t)(auxAngle));
1a000b0a:	1400      	asrs	r0, r0, #16
1a000b0c:	f7ff fd1e 	bl	1a00054c <MCM_Trig_Functions>
			auxSin = 32768 + Trig.hSin;
1a000b10:	1400      	asrs	r0, r0, #16
1a000b12:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
			pulse_width = MINPW + (auxSin * MAXPW) >> 16;
1a000b16:	fb04 f400 	mul.w	r4, r4, r0
1a000b1a:	3464      	adds	r4, #100	; 0x64
1a000b1c:	0c24      	lsrs	r4, r4, #16
			ChannelConfig.channelPulsewidthValue = pulse_width;
1a000b1e:	9409      	str	r4, [sp, #36]	; 0x24
			ChannelConfig.channelPeriodValue = 20400;
1a000b20:	9608      	str	r6, [sp, #32]
			MCPWM_WriteToShadow(LPC_MCPWM, 2, &ChannelConfig);
1a000b22:	aa02      	add	r2, sp, #8
1a000b24:	2102      	movs	r1, #2
1a000b26:	4628      	mov	r0, r5
1a000b28:	f000 f858 	bl	1a000bdc <MCPWM_WriteToShadow>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a000b2c:	4b17      	ldr	r3, [pc, #92]	; (1a000b8c <MCPWM_IRQHandler+0x120>)
1a000b2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
1a000b32:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
1a000b36:	e7a0      	b.n	1a000a7a <MCPWM_IRQHandler+0xe>
			cnt = 100;
1a000b38:	4613      	mov	r3, r2
1a000b3a:	2264      	movs	r2, #100	; 0x64
1a000b3c:	701a      	strb	r2, [r3, #0]
			gpioToggle(LED1); 		//se togglea un led como testigo de que está interrumpiendo
1a000b3e:	202b      	movs	r0, #43	; 0x2b
1a000b40:	f006 fc39 	bl	1a0073b6 <gpioToggle>
1a000b44:	e7a8      	b.n	1a000a98 <MCPWM_IRQHandler+0x2c>
			angle = 0;
1a000b46:	2100      	movs	r1, #0
1a000b48:	4b0e      	ldr	r3, [pc, #56]	; (1a000b84 <MCPWM_IRQHandler+0x118>)
1a000b4a:	6019      	str	r1, [r3, #0]
			ChannelConfig.channelPulsewidthValue = pulse_width;
1a000b4c:	f245 0314 	movw	r3, #20500	; 0x5014
1a000b50:	9309      	str	r3, [sp, #36]	; 0x24
			ChannelConfig.channelPeriodValue = 20400;
1a000b52:	f644 73b0 	movw	r3, #20400	; 0x4fb0
1a000b56:	9308      	str	r3, [sp, #32]
			MCPWM_WriteToShadow(LPC_MCPWM, 0, &ChannelConfig);
1a000b58:	4c07      	ldr	r4, [pc, #28]	; (1a000b78 <MCPWM_IRQHandler+0x10c>)
1a000b5a:	aa02      	add	r2, sp, #8
1a000b5c:	4620      	mov	r0, r4
1a000b5e:	f000 f83d 	bl	1a000bdc <MCPWM_WriteToShadow>
			MCPWM_WriteToShadow(LPC_MCPWM, 1, &ChannelConfig);
1a000b62:	aa02      	add	r2, sp, #8
1a000b64:	2101      	movs	r1, #1
1a000b66:	4620      	mov	r0, r4
1a000b68:	f000 f838 	bl	1a000bdc <MCPWM_WriteToShadow>
			MCPWM_WriteToShadow(LPC_MCPWM, 2, &ChannelConfig);
1a000b6c:	aa02      	add	r2, sp, #8
1a000b6e:	2102      	movs	r1, #2
1a000b70:	4620      	mov	r0, r4
1a000b72:	f000 f833 	bl	1a000bdc <MCPWM_WriteToShadow>
1a000b76:	e7d9      	b.n	1a000b2c <MCPWM_IRQHandler+0xc0>
1a000b78:	400a0000 	.word	0x400a0000
1a000b7c:	10000000 	.word	0x10000000
1a000b80:	10000004 	.word	0x10000004
1a000b84:	100005d0 	.word	0x100005d0
1a000b88:	000d1b71 	.word	0x000d1b71
1a000b8c:	e000e100 	.word	0xe000e100

1a000b90 <MCPWM_Pin_Init>:
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000b90:	4b09      	ldr	r3, [pc, #36]	; (1a000bb8 <MCPWM_Pin_Init+0x28>)
1a000b92:	f240 1291 	movw	r2, #401	; 0x191
1a000b96:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
1a000b9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
1a000b9e:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
1a000ba2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
1a000ba6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
1a000baa:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
1a000bae:	2201      	movs	r2, #1
1a000bb0:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	Chip_SCU_PinMux(5, 7, SCU_MODE_8MA_DRIVESTR | SCU_MODE_INACT | SCU_MODE_ZIF_DIS, FUNC1);
	Chip_SCU_PinMux(5, 4, SCU_MODE_8MA_DRIVESTR | SCU_MODE_INACT | SCU_MODE_ZIF_DIS, FUNC1);
	Chip_SCU_PinMux(5, 6, SCU_MODE_8MA_DRIVESTR | SCU_MODE_INACT | SCU_MODE_ZIF_DIS, FUNC1);
	Chip_SCU_PinMux(5, 0, SCU_MODE_8MA_DRIVESTR | SCU_MODE_INACT | SCU_MODE_ZIF_DIS, FUNC1);
	Chip_SCU_PinMux(6, 10, SCU_MODE_PULLUP, FUNC1);
}
1a000bb4:	4770      	bx	lr
1a000bb6:	bf00      	nop
1a000bb8:	40086000 	.word	0x40086000

1a000bbc <MCPWM_Init>:
void MCPWM_Init(LPC_MCPWM_T *MCPWMx)
{
	/* Turn On MCPWM PCLK */
	//LPC_CGU->BASE_VPB1_CLK = (SRC_PL160M_0<<24) | (1<<11);
	//CGU_EntityConnect(CGU_CLKSRC_PLL1, CGU_BASE_APB1);
	MCPWMx->CAPCON_CLR = MCPWM_CAPCLR_CAP(0) | MCPWM_CAPCLR_CAP(1) | MCPWM_CAPCLR_CAP(2);
1a000bbc:	2307      	movs	r3, #7
1a000bbe:	6143      	str	r3, [r0, #20]

	MCPWMx->INTF_CLR = MCPWM_INT_ILIM(0) | MCPWM_INT_ILIM(1) | MCPWM_INT_ILIM(2) | MCPWM_INT_IMAT(0)
1a000bc0:	f240 7377 	movw	r3, #1911	; 0x777
1a000bc4:	6703      	str	r3, [r0, #112]	; 0x70
			| MCPWM_INT_IMAT(1) | MCPWM_INT_IMAT(2) | MCPWM_INT_ICAP(0) | MCPWM_INT_ICAP(1)
			| MCPWM_INT_ICAP(2);

	MCPWMx->INTEN_CLR = MCPWM_INT_ILIM(0) | MCPWM_INT_ILIM(1) | MCPWM_INT_ILIM(2)
1a000bc6:	6583      	str	r3, [r0, #88]	; 0x58
			| MCPWM_INT_IMAT(0) | MCPWM_INT_IMAT(1) | MCPWM_INT_IMAT(2) | MCPWM_INT_ICAP(0)
			| MCPWM_INT_ICAP(1) | MCPWM_INT_ICAP(2);
}
1a000bc8:	4770      	bx	lr

1a000bca <MCPWM_ACMode>:
 * @return		None
 **********************************************************************/

void MCPWM_ACMode(LPC_MCPWM_T *MCPWMx, uint32_t acMode)
{
	if (acMode)
1a000bca:	b919      	cbnz	r1, 1a000bd4 <MCPWM_ACMode+0xa>
	{
		MCPWMx->CON_SET = MCPWM_CON_ACMODE;
	}
	else
	{
		MCPWMx->CON_CLR = MCPWM_CON_ACMODE;
1a000bcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a000bd0:	6083      	str	r3, [r0, #8]
	}
}
1a000bd2:	4770      	bx	lr
		MCPWMx->CON_SET = MCPWM_CON_ACMODE;
1a000bd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a000bd8:	6043      	str	r3, [r0, #4]
1a000bda:	4770      	bx	lr

1a000bdc <MCPWM_WriteToShadow>:
 * @return		None
 **********************************************************************/
void MCPWM_WriteToShadow(LPC_MCPWM_T *MCPWMx, uint32_t channelNum,
		MCPWM_CHANNEL_CFG_Type *channelSetup)
{
	if (channelNum == MCPWM_CHANNEL_0)
1a000bdc:	b121      	cbz	r1, 1a000be8 <MCPWM_WriteToShadow+0xc>
	{
		MCPWMx->LIM[0] = channelSetup->channelPeriodValue;
		MCPWMx->MAT[0] = channelSetup->channelPulsewidthValue;
	}
	else if (channelNum == MCPWM_CHANNEL_1)
1a000bde:	2901      	cmp	r1, #1
1a000be0:	d007      	beq.n	1a000bf2 <MCPWM_WriteToShadow+0x16>
	{
		MCPWMx->LIM[1] = channelSetup->channelPeriodValue;
		MCPWMx->MAT[1] = channelSetup->channelPulsewidthValue;
	}
	else if (channelNum == MCPWM_CHANNEL_2)
1a000be2:	2902      	cmp	r1, #2
1a000be4:	d00a      	beq.n	1a000bfc <MCPWM_WriteToShadow+0x20>
	{
		MCPWMx->LIM[2] = channelSetup->channelPeriodValue;
		MCPWMx->MAT[2] = channelSetup->channelPulsewidthValue;
	}
}
1a000be6:	4770      	bx	lr
		MCPWMx->LIM[0] = channelSetup->channelPeriodValue;
1a000be8:	6993      	ldr	r3, [r2, #24]
1a000bea:	6243      	str	r3, [r0, #36]	; 0x24
		MCPWMx->MAT[0] = channelSetup->channelPulsewidthValue;
1a000bec:	69d3      	ldr	r3, [r2, #28]
1a000bee:	6303      	str	r3, [r0, #48]	; 0x30
1a000bf0:	4770      	bx	lr
		MCPWMx->LIM[1] = channelSetup->channelPeriodValue;
1a000bf2:	6993      	ldr	r3, [r2, #24]
1a000bf4:	6283      	str	r3, [r0, #40]	; 0x28
		MCPWMx->MAT[1] = channelSetup->channelPulsewidthValue;
1a000bf6:	69d3      	ldr	r3, [r2, #28]
1a000bf8:	6343      	str	r3, [r0, #52]	; 0x34
1a000bfa:	4770      	bx	lr
		MCPWMx->LIM[2] = channelSetup->channelPeriodValue;
1a000bfc:	6993      	ldr	r3, [r2, #24]
1a000bfe:	62c3      	str	r3, [r0, #44]	; 0x2c
		MCPWMx->MAT[2] = channelSetup->channelPulsewidthValue;
1a000c00:	69d3      	ldr	r3, [r2, #28]
1a000c02:	6383      	str	r3, [r0, #56]	; 0x38
}
1a000c04:	e7ef      	b.n	1a000be6 <MCPWM_WriteToShadow+0xa>

1a000c06 <MCPWM_ConfigChannel>:
 * @return		None
 **********************************************************************/
void MCPWM_ConfigChannel(LPC_MCPWM_T *MCPWMx, uint32_t channelNum,
		MCPWM_CHANNEL_CFG_Type * channelSetup)
{
	if (channelNum <= 2)
1a000c06:	2902      	cmp	r1, #2
1a000c08:	d82e      	bhi.n	1a000c68 <MCPWM_ConfigChannel+0x62>
	{
		if (channelNum == MCPWM_CHANNEL_0)
1a000c0a:	bb49      	cbnz	r1, 1a000c60 <MCPWM_ConfigChannel+0x5a>
		{
			MCPWMx->TC[0] = channelSetup->channelTimercounterValue;
1a000c0c:	6953      	ldr	r3, [r2, #20]
1a000c0e:	6183      	str	r3, [r0, #24]
			MCPWMx->LIM[0] = channelSetup->channelPeriodValue;
1a000c10:	6993      	ldr	r3, [r2, #24]
1a000c12:	6243      	str	r3, [r0, #36]	; 0x24
			MCPWMx->MAT[0] = channelSetup->channelPulsewidthValue;
1a000c14:	69d3      	ldr	r3, [r2, #28]
1a000c16:	6303      	str	r3, [r0, #48]	; 0x30
{
1a000c18:	b470      	push	{r4, r5, r6}
		else
		{
			return;
		}

		if (channelSetup->channelType == MCPWM_CHANNEL_CENTER_MODE)
1a000c1a:	6813      	ldr	r3, [r2, #0]
1a000c1c:	2b01      	cmp	r3, #1
1a000c1e:	d032      	beq.n	1a000c86 <MCPWM_ConfigChannel+0x80>
		{
			MCPWMx->CON_SET = MCPWM_CON_CENTER(channelNum);
		}
		else
		{
			MCPWMx->CON_CLR = MCPWM_CON_CENTER(channelNum);
1a000c20:	00cb      	lsls	r3, r1, #3
1a000c22:	1c5c      	adds	r4, r3, #1
1a000c24:	2301      	movs	r3, #1
1a000c26:	40a3      	lsls	r3, r4
1a000c28:	6083      	str	r3, [r0, #8]
		}

		if (channelSetup->channelPolarity == MCPWM_CHANNEL_PASSIVE_HI)
1a000c2a:	6853      	ldr	r3, [r2, #4]
1a000c2c:	2b01      	cmp	r3, #1
1a000c2e:	d030      	beq.n	1a000c92 <MCPWM_ConfigChannel+0x8c>
		{
			MCPWMx->CON_SET = MCPWM_CON_POLAR(channelNum);
		}
		else
		{
			MCPWMx->CON_CLR = MCPWM_CON_POLAR(channelNum);
1a000c30:	00cb      	lsls	r3, r1, #3
1a000c32:	1c9c      	adds	r4, r3, #2
1a000c34:	2301      	movs	r3, #1
1a000c36:	40a3      	lsls	r3, r4
1a000c38:	6083      	str	r3, [r0, #8]
		}

		if (channelSetup->channelDeadtimeEnable == ENABLE)
1a000c3a:	6893      	ldr	r3, [r2, #8]
1a000c3c:	2b01      	cmp	r3, #1
1a000c3e:	d02e      	beq.n	1a000c9e <MCPWM_ConfigChannel+0x98>

			MCPWMx->DT |= MCPWM_DT(channelNum, channelSetup->channelDeadtimeValue);
		}
		else
		{
			MCPWMx->CON_CLR = MCPWM_CON_DTE(channelNum);
1a000c40:	00cb      	lsls	r3, r1, #3
1a000c42:	1cdc      	adds	r4, r3, #3
1a000c44:	2301      	movs	r3, #1
1a000c46:	40a3      	lsls	r3, r4
1a000c48:	6083      	str	r3, [r0, #8]
		}

		if (channelSetup->channelUpdateEnable == ENABLE)
1a000c4a:	6913      	ldr	r3, [r2, #16]
1a000c4c:	2b01      	cmp	r3, #1
1a000c4e:	d03d      	beq.n	1a000ccc <MCPWM_ConfigChannel+0xc6>
		{
			MCPWMx->CON_CLR = MCPWM_CON_DISUP(channelNum);
		}
		else
		{
			MCPWMx->CON_SET = MCPWM_CON_DISUP(channelNum);
1a000c50:	00c9      	lsls	r1, r1, #3
1a000c52:	3104      	adds	r1, #4
1a000c54:	2301      	movs	r3, #1
1a000c56:	fa03 f101 	lsl.w	r1, r3, r1
1a000c5a:	6041      	str	r1, [r0, #4]
		}
	}
}
1a000c5c:	bc70      	pop	{r4, r5, r6}
1a000c5e:	4770      	bx	lr
		else if (channelNum == MCPWM_CHANNEL_1)
1a000c60:	2901      	cmp	r1, #1
1a000c62:	d002      	beq.n	1a000c6a <MCPWM_ConfigChannel+0x64>
		else if (channelNum == MCPWM_CHANNEL_2)
1a000c64:	2902      	cmp	r1, #2
1a000c66:	d007      	beq.n	1a000c78 <MCPWM_ConfigChannel+0x72>
1a000c68:	4770      	bx	lr
			MCPWMx->TC[1] = channelSetup->channelTimercounterValue;
1a000c6a:	6953      	ldr	r3, [r2, #20]
1a000c6c:	61c3      	str	r3, [r0, #28]
			MCPWMx->LIM[1] = channelSetup->channelPeriodValue;
1a000c6e:	6993      	ldr	r3, [r2, #24]
1a000c70:	6283      	str	r3, [r0, #40]	; 0x28
			MCPWMx->MAT[1] = channelSetup->channelPulsewidthValue;
1a000c72:	69d3      	ldr	r3, [r2, #28]
1a000c74:	6343      	str	r3, [r0, #52]	; 0x34
1a000c76:	e7cf      	b.n	1a000c18 <MCPWM_ConfigChannel+0x12>
			MCPWMx->TC[2] = channelSetup->channelTimercounterValue;
1a000c78:	6953      	ldr	r3, [r2, #20]
1a000c7a:	6203      	str	r3, [r0, #32]
			MCPWMx->LIM[2] = channelSetup->channelPeriodValue;
1a000c7c:	6993      	ldr	r3, [r2, #24]
1a000c7e:	62c3      	str	r3, [r0, #44]	; 0x2c
			MCPWMx->MAT[2] = channelSetup->channelPulsewidthValue;
1a000c80:	69d3      	ldr	r3, [r2, #28]
1a000c82:	6383      	str	r3, [r0, #56]	; 0x38
1a000c84:	e7c8      	b.n	1a000c18 <MCPWM_ConfigChannel+0x12>
			MCPWMx->CON_SET = MCPWM_CON_CENTER(channelNum);
1a000c86:	00cb      	lsls	r3, r1, #3
1a000c88:	1c5c      	adds	r4, r3, #1
1a000c8a:	2301      	movs	r3, #1
1a000c8c:	40a3      	lsls	r3, r4
1a000c8e:	6043      	str	r3, [r0, #4]
1a000c90:	e7cb      	b.n	1a000c2a <MCPWM_ConfigChannel+0x24>
			MCPWMx->CON_SET = MCPWM_CON_POLAR(channelNum);
1a000c92:	00cb      	lsls	r3, r1, #3
1a000c94:	1c9c      	adds	r4, r3, #2
1a000c96:	2301      	movs	r3, #1
1a000c98:	40a3      	lsls	r3, r4
1a000c9a:	6043      	str	r3, [r0, #4]
1a000c9c:	e7cd      	b.n	1a000c3a <MCPWM_ConfigChannel+0x34>
			MCPWMx->CON_SET = MCPWM_CON_DTE(channelNum);
1a000c9e:	00cb      	lsls	r3, r1, #3
1a000ca0:	1cdc      	adds	r4, r3, #3
1a000ca2:	2301      	movs	r3, #1
1a000ca4:	40a3      	lsls	r3, r4
1a000ca6:	6043      	str	r3, [r0, #4]
			MCPWMx->DT &= ~(MCPWM_DT(channelNum, 0x3FF));
1a000ca8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
1a000caa:	008c      	lsls	r4, r1, #2
1a000cac:	1865      	adds	r5, r4, r1
1a000cae:	006e      	lsls	r6, r5, #1
1a000cb0:	f240 35ff 	movw	r5, #1023	; 0x3ff
1a000cb4:	40b5      	lsls	r5, r6
1a000cb6:	ea23 0305 	bic.w	r3, r3, r5
1a000cba:	63c3      	str	r3, [r0, #60]	; 0x3c
			MCPWMx->DT |= MCPWM_DT(channelNum, channelSetup->channelDeadtimeValue);
1a000cbc:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
1a000cbe:	68d3      	ldr	r3, [r2, #12]
1a000cc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
1a000cc4:	40b3      	lsls	r3, r6
1a000cc6:	432b      	orrs	r3, r5
1a000cc8:	63c3      	str	r3, [r0, #60]	; 0x3c
1a000cca:	e7be      	b.n	1a000c4a <MCPWM_ConfigChannel+0x44>
			MCPWMx->CON_CLR = MCPWM_CON_DISUP(channelNum);
1a000ccc:	00c9      	lsls	r1, r1, #3
1a000cce:	1d0b      	adds	r3, r1, #4
1a000cd0:	2101      	movs	r1, #1
1a000cd2:	4099      	lsls	r1, r3
1a000cd4:	6081      	str	r1, [r0, #8]
1a000cd6:	e7c1      	b.n	1a000c5c <MCPWM_ConfigChannel+0x56>

1a000cd8 <MCPWM_Start>:
 **********************************************************************/
void MCPWM_Start(LPC_MCPWM_T *MCPWMx, uint32_t channel0, uint32_t channel1, uint32_t channel2)
{
	uint32_t regVal = 0;

	regVal = (channel0 ? MCPWM_CON_RUN(0) : 0) | (channel1 ? MCPWM_CON_RUN(1) : 0)
1a000cd8:	b149      	cbz	r1, 1a000cee <MCPWM_Start+0x16>
1a000cda:	2101      	movs	r1, #1
1a000cdc:	b14a      	cbz	r2, 1a000cf2 <MCPWM_Start+0x1a>
1a000cde:	f44f 7280 	mov.w	r2, #256	; 0x100
1a000ce2:	430a      	orrs	r2, r1
			| (channel2 ? MCPWM_CON_RUN(2) : 0);
1a000ce4:	b93b      	cbnz	r3, 1a000cf6 <MCPWM_Start+0x1e>
1a000ce6:	2300      	movs	r3, #0
	regVal = (channel0 ? MCPWM_CON_RUN(0) : 0) | (channel1 ? MCPWM_CON_RUN(1) : 0)
1a000ce8:	4313      	orrs	r3, r2

	MCPWMx->CON_SET = regVal;
1a000cea:	6043      	str	r3, [r0, #4]
}
1a000cec:	4770      	bx	lr
	regVal = (channel0 ? MCPWM_CON_RUN(0) : 0) | (channel1 ? MCPWM_CON_RUN(1) : 0)
1a000cee:	2100      	movs	r1, #0
1a000cf0:	e7f4      	b.n	1a000cdc <MCPWM_Start+0x4>
1a000cf2:	2200      	movs	r2, #0
1a000cf4:	e7f5      	b.n	1a000ce2 <MCPWM_Start+0xa>
			| (channel2 ? MCPWM_CON_RUN(2) : 0);
1a000cf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
1a000cfa:	e7f5      	b.n	1a000ce8 <MCPWM_Start+0x10>

1a000cfc <MCPWM_InitChannels>:
 * Inicializa los canales a 10Khz, centrado y width 50%
 * ====================================================================================
 */

void MCPWM_InitChannels(LPC_MCPWM_T *MCPWMx, MCPWM_CHANNEL_CFG_Type canal[])
{
1a000cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a000d00:	460c      	mov	r4, r1

	canal[0].channelType = MCPWM_CHANNEL_CENTER_MODE;
1a000d02:	2601      	movs	r6, #1
1a000d04:	600e      	str	r6, [r1, #0]
	canal[0].channelPolarity = MCPWM_CHANNEL_PASSIVE_LO;
1a000d06:	2500      	movs	r5, #0
1a000d08:	604d      	str	r5, [r1, #4]
	canal[0].channelUpdateEnable = ENABLE;
1a000d0a:	610e      	str	r6, [r1, #16]
	canal[0].channelDeadtimeEnable = DISABLE;
1a000d0c:	608d      	str	r5, [r1, #8]
	canal[0].channelTimercounterValue = 0;
1a000d0e:	614d      	str	r5, [r1, #20]
	canal[0].channelPeriodValue = 20400;
1a000d10:	f644 79b0 	movw	r9, #20400	; 0x4fb0
1a000d14:	f8c1 9018 	str.w	r9, [r1, #24]
	canal[0].channelPulsewidthValue = 10200;
1a000d18:	f242 78d8 	movw	r8, #10200	; 0x27d8
1a000d1c:	f8c1 801c 	str.w	r8, [r1, #28]
	MCPWM_ConfigChannel(LPC_MCPWM, 0, &canal[0]);
1a000d20:	4f12      	ldr	r7, [pc, #72]	; (1a000d6c <MCPWM_InitChannels+0x70>)
1a000d22:	460a      	mov	r2, r1
1a000d24:	4629      	mov	r1, r5
1a000d26:	4638      	mov	r0, r7
1a000d28:	f7ff ff6d 	bl	1a000c06 <MCPWM_ConfigChannel>

	canal[1].channelType = MCPWM_CHANNEL_CENTER_MODE;
1a000d2c:	6226      	str	r6, [r4, #32]
	canal[1].channelPolarity = MCPWM_CHANNEL_PASSIVE_LO;
1a000d2e:	6265      	str	r5, [r4, #36]	; 0x24
	canal[1].channelUpdateEnable = ENABLE;
1a000d30:	6326      	str	r6, [r4, #48]	; 0x30
	canal[1].channelDeadtimeEnable = DISABLE;
1a000d32:	62a5      	str	r5, [r4, #40]	; 0x28
	canal[1].channelTimercounterValue = 0;
1a000d34:	6365      	str	r5, [r4, #52]	; 0x34
	canal[1].channelPeriodValue = 20400;
1a000d36:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
	canal[1].channelPulsewidthValue = 10200;
1a000d3a:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
	MCPWM_ConfigChannel(LPC_MCPWM, 1, &canal[1]);
1a000d3e:	f104 0220 	add.w	r2, r4, #32
1a000d42:	4631      	mov	r1, r6
1a000d44:	4638      	mov	r0, r7
1a000d46:	f7ff ff5e 	bl	1a000c06 <MCPWM_ConfigChannel>

	canal[2].channelType = MCPWM_CHANNEL_CENTER_MODE;
1a000d4a:	6426      	str	r6, [r4, #64]	; 0x40
	canal[2].channelPolarity = MCPWM_CHANNEL_PASSIVE_LO;
1a000d4c:	6465      	str	r5, [r4, #68]	; 0x44
	canal[2].channelUpdateEnable = ENABLE;
1a000d4e:	6526      	str	r6, [r4, #80]	; 0x50
	canal[2].channelDeadtimeEnable = DISABLE;
1a000d50:	64a5      	str	r5, [r4, #72]	; 0x48
	canal[2].channelTimercounterValue = 0;
1a000d52:	6565      	str	r5, [r4, #84]	; 0x54
	canal[2].channelPeriodValue = 20400;
1a000d54:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
	canal[2].channelPulsewidthValue = 10200;
1a000d58:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c

	MCPWM_ConfigChannel(LPC_MCPWM, 2, &canal[2]);
1a000d5c:	f104 0240 	add.w	r2, r4, #64	; 0x40
1a000d60:	2102      	movs	r1, #2
1a000d62:	4638      	mov	r0, r7
1a000d64:	f7ff ff4f 	bl	1a000c06 <MCPWM_ConfigChannel>
}
1a000d68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a000d6c:	400a0000 	.word	0x400a0000

1a000d70 <MCPWM_IntConfig>:
 *
 * Note: all these ulIntType values above can be ORed together for using as input parameter.
 **********************************************************************/
void MCPWM_IntConfig(LPC_MCPWM_T *MCPWMx, uint32_t ulIntType, FunctionalState NewState)
{
	if (NewState)
1a000d70:	b90a      	cbnz	r2, 1a000d76 <MCPWM_IntConfig+0x6>
	{
		MCPWMx->INTEN_SET = ulIntType;
	}
	else
	{
		MCPWMx->INTEN_CLR = ulIntType;
1a000d72:	6581      	str	r1, [r0, #88]	; 0x58
	}
}
1a000d74:	4770      	bx	lr
		MCPWMx->INTEN_SET = ulIntType;
1a000d76:	6541      	str	r1, [r0, #84]	; 0x54
1a000d78:	4770      	bx	lr

1a000d7a <MCPWM_IntClear>:
 * @return		None
 * Note: all these ulIntType values above can be ORed together for using as input parameter.
 **********************************************************************/
void MCPWM_IntClear(LPC_MCPWM_T *MCPWMx, uint32_t ulIntType)
{
	MCPWMx->INTF_CLR = ulIntType;
1a000d7a:	6701      	str	r1, [r0, #112]	; 0x70
}
1a000d7c:	4770      	bx	lr

1a000d7e <MCPWM_GetIntStatus>:
 * 					- MCPWM_INTFLAG_ABORT	:Fast abort interrupt
 * @return		None
 **********************************************************************/
FlagStatus MCPWM_GetIntStatus(LPC_MCPWM_T *MCPWMx, uint32_t ulIntType)
{
	return ((MCPWMx->INTF & ulIntType) ? SET : RESET);
1a000d7e:	6e83      	ldr	r3, [r0, #104]	; 0x68
1a000d80:	420b      	tst	r3, r1
}
1a000d82:	bf14      	ite	ne
1a000d84:	2001      	movne	r0, #1
1a000d86:	2000      	moveq	r0, #0
1a000d88:	4770      	bx	lr
1a000d8a:	Address 0x000000001a000d8a is out of bounds.


1a000d8c <consola>:
 * Entonces vuelve a buscar la llegada de otro comando.
 *
 */

void consola(void* taskParmPtr)
{
1a000d8c:	b530      	push	{r4, r5, lr}
1a000d8e:	b08b      	sub	sp, #44	; 0x2c
	static uint8_t info[20];
	uint8_t i = 0;
	uint8_t data;
	uint8_t numstr[4];

	bool completo = FALSE;
1a000d90:	2400      	movs	r4, #0
	uint8_t i = 0;
1a000d92:	4625      	mov	r5, r4
1a000d94:	e031      	b.n	1a000dfa <consola+0x6e>

	while (1)
	{
		while (!completo)
		{
			if (uartReadByte( UART_PC, &data))
1a000d96:	f10d 0107 	add.w	r1, sp, #7
1a000d9a:	2003      	movs	r0, #3
1a000d9c:	f006 f88e 	bl	1a006ebc <uartReadByte>
1a000da0:	b190      	cbz	r0, 1a000dc8 <consola+0x3c>
			{
				comando[i++] = data;
1a000da2:	1c6b      	adds	r3, r5, #1
1a000da4:	b2db      	uxtb	r3, r3
1a000da6:	f89d 2007 	ldrb.w	r2, [sp, #7]
1a000daa:	493f      	ldr	r1, [pc, #252]	; (1a000ea8 <consola+0x11c>)
1a000dac:	554a      	strb	r2, [r1, r5]
				if (i >= (STRLENGTHMAX - 2))
1a000dae:	2b11      	cmp	r3, #17
1a000db0:	d808      	bhi.n	1a000dc4 <consola+0x38>
				comando[i++] = data;
1a000db2:	461d      	mov	r5, r3
					i = 0;
				if (data == '\n')
1a000db4:	2a0a      	cmp	r2, #10
1a000db6:	d120      	bne.n	1a000dfa <consola+0x6e>
				{	//ACA PULSARON ENTER, TENGO EL STRING, SALIR DEL WHILE
					comando[i] = '\0';
1a000db8:	2300      	movs	r3, #0
1a000dba:	4a3b      	ldr	r2, [pc, #236]	; (1a000ea8 <consola+0x11c>)
1a000dbc:	5553      	strb	r3, [r2, r5]
					i = 0;
					completo = TRUE;
1a000dbe:	2401      	movs	r4, #1
					i = 0;
1a000dc0:	461d      	mov	r5, r3
1a000dc2:	e01a      	b.n	1a000dfa <consola+0x6e>
					i = 0;
1a000dc4:	2500      	movs	r5, #0
1a000dc6:	e7f5      	b.n	1a000db4 <consola+0x28>
				}
			}
			else//si encuentra que recibio un dato para enviar a consola lo manda a la UART_PC
			{
				if (qCom_a_Consola != NULL)
1a000dc8:	4b38      	ldr	r3, [pc, #224]	; (1a000eac <consola+0x120>)
1a000dca:	6818      	ldr	r0, [r3, #0]
1a000dcc:	b1a8      	cbz	r0, 1a000dfa <consola+0x6e>
				{
					if (uxQueueMessagesWaiting(qCom_a_Consola) > 0)
1a000dce:	f003 fa03 	bl	1a0041d8 <uxQueueMessagesWaiting>
1a000dd2:	b190      	cbz	r0, 1a000dfa <consola+0x6e>
					{
						xQueueReceive(qCom_a_Consola, &ComandoRecibido.str[0],
1a000dd4:	2200      	movs	r2, #0
1a000dd6:	a902      	add	r1, sp, #8
1a000dd8:	4b34      	ldr	r3, [pc, #208]	; (1a000eac <consola+0x120>)
1a000dda:	6818      	ldr	r0, [r3, #0]
1a000ddc:	f003 f950 	bl	1a004080 <xQueueReceive>
								0);
						uartWriteString( UART_PC, &ComandoRecibido.str[0]);
1a000de0:	a902      	add	r1, sp, #8
1a000de2:	2003      	movs	r0, #3
1a000de4:	f006 f8e3 	bl	1a006fae <uartWriteString>
						uartWriteString( UART_PC, "\n\r");
1a000de8:	4931      	ldr	r1, [pc, #196]	; (1a000eb0 <consola+0x124>)
1a000dea:	2003      	movs	r0, #3
1a000dec:	f006 f8df 	bl	1a006fae <uartWriteString>
						vTaskDelay(2 / portTICK_RATE_MS);
1a000df0:	2002      	movs	r0, #2
1a000df2:	f003 fdfb 	bl	1a0049ec <vTaskDelay>
1a000df6:	e000      	b.n	1a000dfa <consola+0x6e>
					}
				}
			}
		}
		completo = FALSE;
1a000df8:	2400      	movs	r4, #0
		while (!completo)
1a000dfa:	2c00      	cmp	r4, #0
1a000dfc:	d0cb      	beq.n	1a000d96 <consola+0xa>

		//si llega acá es que se recibió un string, los analizamos y luego se envía a la cola

		if (searchforsubstr(&comando[0], "START"))
1a000dfe:	492d      	ldr	r1, [pc, #180]	; (1a000eb4 <consola+0x128>)
1a000e00:	4829      	ldr	r0, [pc, #164]	; (1a000ea8 <consola+0x11c>)
1a000e02:	f7ff fb55 	bl	1a0004b0 <searchforsubstr>
1a000e06:	b1b8      	cbz	r0, 1a000e38 <consola+0xac>
		{
			strcpy(Comando_a_Enviar.str, "START");
1a000e08:	4b2a      	ldr	r3, [pc, #168]	; (1a000eb4 <consola+0x128>)
1a000e0a:	e893 0003 	ldmia.w	r3, {r0, r1}
1a000e0e:	9007      	str	r0, [sp, #28]
1a000e10:	f8ad 1020 	strh.w	r1, [sp, #32]
			Comando_a_Enviar.tipo = START;
1a000e14:	2301      	movs	r3, #1
1a000e16:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
				{
					continue;
				}
			}
		}
		if ( xQueueSend(qCom_de_Consola, (void * ) &Comando_a_Enviar,
1a000e1a:	2300      	movs	r3, #0
1a000e1c:	2201      	movs	r2, #1
1a000e1e:	a907      	add	r1, sp, #28
1a000e20:	4825      	ldr	r0, [pc, #148]	; (1a000eb8 <consola+0x12c>)
1a000e22:	6800      	ldr	r0, [r0, #0]
1a000e24:	f003 f808 	bl	1a003e38 <xQueueGenericSend>
1a000e28:	2801      	cmp	r0, #1
1a000e2a:	d0e5      	beq.n	1a000df8 <consola+0x6c>
				(TickType_t ) 1) != pdPASS)
		{
			uartWriteString( UART_PC,
1a000e2c:	4923      	ldr	r1, [pc, #140]	; (1a000ebc <consola+0x130>)
1a000e2e:	2003      	movs	r0, #3
1a000e30:	f006 f8bd 	bl	1a006fae <uartWriteString>
		completo = FALSE;
1a000e34:	2400      	movs	r4, #0
1a000e36:	e7e0      	b.n	1a000dfa <consola+0x6e>
			if (searchforsubstr(&comando[0], "STOP"))
1a000e38:	4921      	ldr	r1, [pc, #132]	; (1a000ec0 <consola+0x134>)
1a000e3a:	481b      	ldr	r0, [pc, #108]	; (1a000ea8 <consola+0x11c>)
1a000e3c:	f7ff fb38 	bl	1a0004b0 <searchforsubstr>
1a000e40:	b148      	cbz	r0, 1a000e56 <consola+0xca>
				strcpy(Comando_a_Enviar.str, "STOP");
1a000e42:	4b1f      	ldr	r3, [pc, #124]	; (1a000ec0 <consola+0x134>)
1a000e44:	e893 0003 	ldmia.w	r3, {r0, r1}
1a000e48:	9007      	str	r0, [sp, #28]
1a000e4a:	f88d 1020 	strb.w	r1, [sp, #32]
				Comando_a_Enviar.tipo = STOP;
1a000e4e:	2302      	movs	r3, #2
1a000e50:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
1a000e54:	e7e1      	b.n	1a000e1a <consola+0x8e>
				if (searchforsubstr(&comando[0], "FREC="))
1a000e56:	491b      	ldr	r1, [pc, #108]	; (1a000ec4 <consola+0x138>)
1a000e58:	4813      	ldr	r0, [pc, #76]	; (1a000ea8 <consola+0x11c>)
1a000e5a:	f7ff fb29 	bl	1a0004b0 <searchforsubstr>
1a000e5e:	4604      	mov	r4, r0
1a000e60:	2800      	cmp	r0, #0
1a000e62:	d0ca      	beq.n	1a000dfa <consola+0x6e>
					if (comando[5] != '\r')
1a000e64:	4b10      	ldr	r3, [pc, #64]	; (1a000ea8 <consola+0x11c>)
1a000e66:	795b      	ldrb	r3, [r3, #5]
1a000e68:	2b0d      	cmp	r3, #13
1a000e6a:	d0d6      	beq.n	1a000e1a <consola+0x8e>
						numstr[0] = comando[5];
1a000e6c:	f88d 3000 	strb.w	r3, [sp]
						if (comando[6]!='\r')
1a000e70:	4a0d      	ldr	r2, [pc, #52]	; (1a000ea8 <consola+0x11c>)
1a000e72:	7992      	ldrb	r2, [r2, #6]
1a000e74:	2a0d      	cmp	r2, #13
1a000e76:	d013      	beq.n	1a000ea0 <consola+0x114>
							numstr[1] = comando[5];
1a000e78:	f88d 3001 	strb.w	r3, [sp, #1]
							numstr[2] = '\0';
1a000e7c:	2300      	movs	r3, #0
1a000e7e:	f88d 3002 	strb.w	r3, [sp, #2]
						Comando_a_Enviar.frecuencia = my_atoi(numstr);
1a000e82:	4668      	mov	r0, sp
1a000e84:	f7ff fb53 	bl	1a00052e <my_atoi>
1a000e88:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
						strcpy(Comando_a_Enviar.str, "FREC=");
1a000e8c:	4b0d      	ldr	r3, [pc, #52]	; (1a000ec4 <consola+0x138>)
1a000e8e:	e893 0003 	ldmia.w	r3, {r0, r1}
1a000e92:	9007      	str	r0, [sp, #28]
1a000e94:	f8ad 1020 	strh.w	r1, [sp, #32]
						Comando_a_Enviar.tipo = UPDATE_FREC;
1a000e98:	2300      	movs	r3, #0
1a000e9a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
1a000e9e:	e7bc      	b.n	1a000e1a <consola+0x8e>
							numstr[1] = '\0';
1a000ea0:	2300      	movs	r3, #0
1a000ea2:	f88d 3001 	strb.w	r3, [sp, #1]
1a000ea6:	e7ec      	b.n	1a000e82 <consola+0xf6>
1a000ea8:	100005d4 	.word	0x100005d4
1a000eac:	1000353c 	.word	0x1000353c
1a000eb0:	1a007e20 	.word	0x1a007e20
1a000eb4:	1a007918 	.word	0x1a007918
1a000eb8:	10003538 	.word	0x10003538
1a000ebc:	1a007e24 	.word	0x1a007e24
1a000ec0:	1a007920 	.word	0x1a007920
1a000ec4:	1a007928 	.word	0x1a007928

1a000ec8 <Control>:
char* itoa_dec(int value, char* result);
/*=====[Implementaciones de funciones publicas]==============================*/


void Control(void* taskParmPtr)
{
1a000ec8:	b500      	push	{lr}
1a000eca:	b09b      	sub	sp, #108	; 0x6c
1a000ecc:	e03d      	b.n	1a000f4a <Control+0x82>
			{
				xQueueReceive(qTecla_Apretada, &bp, 0);
				switch (bp)
				{
				case TEC1:
					if (Motor.marcha != TRUE)
1a000ece:	4ba4      	ldr	r3, [pc, #656]	; (1a001160 <Control+0x298>)
1a000ed0:	781b      	ldrb	r3, [r3, #0]
1a000ed2:	b9ab      	cbnz	r3, 1a000f00 <Control+0x38>
					{
						Motor.marcha = TRUE;
1a000ed4:	4da2      	ldr	r5, [pc, #648]	; (1a001160 <Control+0x298>)
1a000ed6:	2301      	movs	r3, #1
1a000ed8:	702b      	strb	r3, [r5, #0]
						strcpy(txt2Con.str, "Start. Frec =  ");
1a000eda:	ac14      	add	r4, sp, #80	; 0x50
1a000edc:	4ba1      	ldr	r3, [pc, #644]	; (1a001164 <Control+0x29c>)
1a000ede:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
1a000ee0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
						itoa_dec(Motor.frecuencia, &txt2Con.str[12]);
1a000ee4:	a917      	add	r1, sp, #92	; 0x5c
1a000ee6:	7868      	ldrb	r0, [r5, #1]
1a000ee8:	f7ff faac 	bl	1a000444 <itoa_dec>
1a000eec:	e008      	b.n	1a000f00 <Control+0x38>
					}
					break;
				case TEC2:
					Motor.marcha = FALSE;
1a000eee:	4b9c      	ldr	r3, [pc, #624]	; (1a001160 <Control+0x298>)
1a000ef0:	2200      	movs	r2, #0
1a000ef2:	701a      	strb	r2, [r3, #0]
					strcpy(txt2Con.str, "Stop");
1a000ef4:	4b9c      	ldr	r3, [pc, #624]	; (1a001168 <Control+0x2a0>)
1a000ef6:	e893 0003 	ldmia.w	r3, {r0, r1}
1a000efa:	9014      	str	r0, [sp, #80]	; 0x50
1a000efc:	f88d 1054 	strb.w	r1, [sp, #84]	; 0x54
					strcpy(txt2Con.str, "Run. Frec =  ");
					itoa_dec(Motor.frecuencia, &txt2Con.str[12]);
					break;
				}

				if ( xQueueSend(qCom_a_Consola, &txt2Con,(TickType_t ) 1) != pdPASS)
1a000f00:	2300      	movs	r3, #0
1a000f02:	2201      	movs	r2, #1
1a000f04:	a914      	add	r1, sp, #80	; 0x50
1a000f06:	4899      	ldr	r0, [pc, #612]	; (1a00116c <Control+0x2a4>)
1a000f08:	6800      	ldr	r0, [r0, #0]
1a000f0a:	f002 ff95 	bl	1a003e38 <xQueueGenericSend>
1a000f0e:	2801      	cmp	r0, #1
1a000f10:	d165      	bne.n	1a000fde <Control+0x116>
				{
					uartWriteString( UART_PC, "Error envio cola de mensajes consola\r\n");
				}
				if ( xQueueSend(qCom_a_Bluetooth, (Txt2Blue_t *) &txt2Con,
1a000f12:	2300      	movs	r3, #0
1a000f14:	2201      	movs	r2, #1
1a000f16:	a914      	add	r1, sp, #80	; 0x50
1a000f18:	4895      	ldr	r0, [pc, #596]	; (1a001170 <Control+0x2a8>)
1a000f1a:	6800      	ldr	r0, [r0, #0]
1a000f1c:	f002 ff8c 	bl	1a003e38 <xQueueGenericSend>
1a000f20:	2801      	cmp	r0, #1
1a000f22:	d161      	bne.n	1a000fe8 <Control+0x120>
						(TickType_t ) 1) != pdPASS)
				{
					uartWriteString( UART_PC, "Error envio cola de mensajes Bluetooth\r\n");
				}

				strcpy(txt2Disk.str,txt2Blue.str);
1a000f24:	a90f      	add	r1, sp, #60	; 0x3c
1a000f26:	a809      	add	r0, sp, #36	; 0x24
1a000f28:	f006 fcee 	bl	1a007908 <strcpy>
				txt2Disk.print=FALSE;
1a000f2c:	2300      	movs	r3, #0
1a000f2e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
				if ( xQueueSend(qLog_Write, &txt2Disk,
1a000f32:	2201      	movs	r2, #1
1a000f34:	a909      	add	r1, sp, #36	; 0x24
1a000f36:	488f      	ldr	r0, [pc, #572]	; (1a001174 <Control+0x2ac>)
1a000f38:	6800      	ldr	r0, [r0, #0]
1a000f3a:	f002 ff7d 	bl	1a003e38 <xQueueGenericSend>
1a000f3e:	2801      	cmp	r0, #1
1a000f40:	d157      	bne.n	1a000ff2 <Control+0x12a>
		}

		/*
		 * Aqui verifica si hay algún comando de consola y actúa en consecuencia. Informa a bluetooth y hace el log.
		 */
		if (qCom_de_Consola != NULL)
1a000f42:	4b8d      	ldr	r3, [pc, #564]	; (1a001178 <Control+0x2b0>)
1a000f44:	6818      	ldr	r0, [r3, #0]
1a000f46:	2800      	cmp	r0, #0
1a000f48:	d158      	bne.n	1a000ffc <Control+0x134>
		if (qTecla_Apretada != NULL)
1a000f4a:	4b8c      	ldr	r3, [pc, #560]	; (1a00117c <Control+0x2b4>)
1a000f4c:	6818      	ldr	r0, [r3, #0]
1a000f4e:	2800      	cmp	r0, #0
1a000f50:	d0f7      	beq.n	1a000f42 <Control+0x7a>
			if (uxQueueMessagesWaiting(qTecla_Apretada) > 0)
1a000f52:	f003 f941 	bl	1a0041d8 <uxQueueMessagesWaiting>
1a000f56:	2800      	cmp	r0, #0
1a000f58:	d0f3      	beq.n	1a000f42 <Control+0x7a>
				xQueueReceive(qTecla_Apretada, &bp, 0);
1a000f5a:	2200      	movs	r2, #0
1a000f5c:	f10d 0167 	add.w	r1, sp, #103	; 0x67
1a000f60:	4b86      	ldr	r3, [pc, #536]	; (1a00117c <Control+0x2b4>)
1a000f62:	6818      	ldr	r0, [r3, #0]
1a000f64:	f003 f88c 	bl	1a004080 <xQueueReceive>
				switch (bp)
1a000f68:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
1a000f6c:	3b24      	subs	r3, #36	; 0x24
1a000f6e:	2b03      	cmp	r3, #3
1a000f70:	d8c6      	bhi.n	1a000f00 <Control+0x38>
1a000f72:	a201      	add	r2, pc, #4	; (adr r2, 1a000f78 <Control+0xb0>)
1a000f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a000f78:	1a000ecf 	.word	0x1a000ecf
1a000f7c:	1a000eef 	.word	0x1a000eef
1a000f80:	1a000f89 	.word	0x1a000f89
1a000f84:	1a000fb5 	.word	0x1a000fb5
					if (Motor.frecuencia < 50)
1a000f88:	4b75      	ldr	r3, [pc, #468]	; (1a001160 <Control+0x298>)
1a000f8a:	785b      	ldrb	r3, [r3, #1]
1a000f8c:	2b31      	cmp	r3, #49	; 0x31
1a000f8e:	d80d      	bhi.n	1a000fac <Control+0xe4>
						Motor.frecuencia++;
1a000f90:	3301      	adds	r3, #1
1a000f92:	4a73      	ldr	r2, [pc, #460]	; (1a001160 <Control+0x298>)
1a000f94:	7053      	strb	r3, [r2, #1]
					strcpy(txt2Con.str, "Run. Frec =  ");
1a000f96:	4b7a      	ldr	r3, [pc, #488]	; (1a001180 <Control+0x2b8>)
1a000f98:	ac14      	add	r4, sp, #80	; 0x50
1a000f9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
1a000f9c:	c407      	stmia	r4!, {r0, r1, r2}
1a000f9e:	8023      	strh	r3, [r4, #0]
					itoa_dec(Motor.frecuencia, &txt2Con.str[12]);
1a000fa0:	a917      	add	r1, sp, #92	; 0x5c
1a000fa2:	4b6f      	ldr	r3, [pc, #444]	; (1a001160 <Control+0x298>)
1a000fa4:	7858      	ldrb	r0, [r3, #1]
1a000fa6:	f7ff fa4d 	bl	1a000444 <itoa_dec>
					break;
1a000faa:	e7a9      	b.n	1a000f00 <Control+0x38>
						Motor.frecuencia = 50;
1a000fac:	4b6c      	ldr	r3, [pc, #432]	; (1a001160 <Control+0x298>)
1a000fae:	2232      	movs	r2, #50	; 0x32
1a000fb0:	705a      	strb	r2, [r3, #1]
1a000fb2:	e7f0      	b.n	1a000f96 <Control+0xce>
					if (Motor.frecuencia > 0)
1a000fb4:	4b6a      	ldr	r3, [pc, #424]	; (1a001160 <Control+0x298>)
1a000fb6:	785b      	ldrb	r3, [r3, #1]
1a000fb8:	b16b      	cbz	r3, 1a000fd6 <Control+0x10e>
						Motor.frecuencia--;
1a000fba:	3b01      	subs	r3, #1
1a000fbc:	4a68      	ldr	r2, [pc, #416]	; (1a001160 <Control+0x298>)
1a000fbe:	7053      	strb	r3, [r2, #1]
					strcpy(txt2Con.str, "Run. Frec =  ");
1a000fc0:	4b6f      	ldr	r3, [pc, #444]	; (1a001180 <Control+0x2b8>)
1a000fc2:	ac14      	add	r4, sp, #80	; 0x50
1a000fc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
1a000fc6:	c407      	stmia	r4!, {r0, r1, r2}
1a000fc8:	8023      	strh	r3, [r4, #0]
					itoa_dec(Motor.frecuencia, &txt2Con.str[12]);
1a000fca:	a917      	add	r1, sp, #92	; 0x5c
1a000fcc:	4b64      	ldr	r3, [pc, #400]	; (1a001160 <Control+0x298>)
1a000fce:	7858      	ldrb	r0, [r3, #1]
1a000fd0:	f7ff fa38 	bl	1a000444 <itoa_dec>
					break;
1a000fd4:	e794      	b.n	1a000f00 <Control+0x38>
						Motor.frecuencia = 0;
1a000fd6:	4b62      	ldr	r3, [pc, #392]	; (1a001160 <Control+0x298>)
1a000fd8:	2200      	movs	r2, #0
1a000fda:	705a      	strb	r2, [r3, #1]
1a000fdc:	e7f0      	b.n	1a000fc0 <Control+0xf8>
					uartWriteString( UART_PC, "Error envio cola de mensajes consola\r\n");
1a000fde:	4969      	ldr	r1, [pc, #420]	; (1a001184 <Control+0x2bc>)
1a000fe0:	2003      	movs	r0, #3
1a000fe2:	f005 ffe4 	bl	1a006fae <uartWriteString>
1a000fe6:	e794      	b.n	1a000f12 <Control+0x4a>
					uartWriteString( UART_PC, "Error envio cola de mensajes Bluetooth\r\n");
1a000fe8:	4967      	ldr	r1, [pc, #412]	; (1a001188 <Control+0x2c0>)
1a000fea:	2003      	movs	r0, #3
1a000fec:	f005 ffdf 	bl	1a006fae <uartWriteString>
1a000ff0:	e798      	b.n	1a000f24 <Control+0x5c>
					uartWriteString( UART_PC, "Error envio cola de mensajes Disco\r\n");
1a000ff2:	4966      	ldr	r1, [pc, #408]	; (1a00118c <Control+0x2c4>)
1a000ff4:	2003      	movs	r0, #3
1a000ff6:	f005 ffda 	bl	1a006fae <uartWriteString>
1a000ffa:	e7a2      	b.n	1a000f42 <Control+0x7a>
		{
			if (uxQueueMessagesWaiting(qCom_de_Consola) > 0)
1a000ffc:	f003 f8ec 	bl	1a0041d8 <uxQueueMessagesWaiting>
1a001000:	2800      	cmp	r0, #0
1a001002:	d141      	bne.n	1a001088 <Control+0x1c0>
			}

			/*
			 * Aqui verifica si hay algún comando de Bluetooth y actúa en consecuencia. Informa a Consola y hace el log
			 */
			if (qCom_de_Bluetooth != NULL)
1a001004:	4b62      	ldr	r3, [pc, #392]	; (1a001190 <Control+0x2c8>)
1a001006:	6818      	ldr	r0, [r3, #0]
1a001008:	2800      	cmp	r0, #0
1a00100a:	d09e      	beq.n	1a000f4a <Control+0x82>
			{
				if (uxQueueMessagesWaiting(qCom_de_Bluetooth) > 0)
1a00100c:	f003 f8e4 	bl	1a0041d8 <uxQueueMessagesWaiting>
1a001010:	2800      	cmp	r0, #0
1a001012:	d09a      	beq.n	1a000f4a <Control+0x82>
				{
					xQueueReceive(qCom_de_Bluetooth, &Com_de_Bluetooth, 0);
1a001014:	2200      	movs	r2, #0
1a001016:	4669      	mov	r1, sp
1a001018:	4b5d      	ldr	r3, [pc, #372]	; (1a001190 <Control+0x2c8>)
1a00101a:	6818      	ldr	r0, [r3, #0]
1a00101c:	f003 f830 	bl	1a004080 <xQueueReceive>
					switch (Com_de_Bluetooth.tipo)
1a001020:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a001024:	2b01      	cmp	r3, #1
1a001026:	f000 80fc 	beq.w	1a001222 <Control+0x35a>
1a00102a:	2b00      	cmp	r3, #0
1a00102c:	f000 812b 	beq.w	1a001286 <Control+0x3be>
1a001030:	2b02      	cmp	r3, #2
1a001032:	d18a      	bne.n	1a000f4a <Control+0x82>
						}


						break;
					case STOP:
						Motor.marcha = FALSE;
1a001034:	2300      	movs	r3, #0
1a001036:	4a4a      	ldr	r2, [pc, #296]	; (1a001160 <Control+0x298>)
1a001038:	7013      	strb	r3, [r2, #0]
						strcpy(txt2Con.str, "STOP");
1a00103a:	4a56      	ldr	r2, [pc, #344]	; (1a001194 <Control+0x2cc>)
1a00103c:	e892 0003 	ldmia.w	r2, {r0, r1}
1a001040:	9014      	str	r0, [sp, #80]	; 0x50
1a001042:	f88d 1054 	strb.w	r1, [sp, #84]	; 0x54
						if ( xQueueSend(qCom_a_Consola, &txt2Con,
1a001046:	2201      	movs	r2, #1
1a001048:	a914      	add	r1, sp, #80	; 0x50
1a00104a:	4848      	ldr	r0, [pc, #288]	; (1a00116c <Control+0x2a4>)
1a00104c:	6800      	ldr	r0, [r0, #0]
1a00104e:	f002 fef3 	bl	1a003e38 <xQueueGenericSend>
1a001052:	2801      	cmp	r0, #1
1a001054:	d003      	beq.n	1a00105e <Control+0x196>
								(TickType_t ) 1) != pdPASS)
						{
							uartWriteString( UART_PC, "Error envio cola de mensajes Consola\r\n");
1a001056:	4950      	ldr	r1, [pc, #320]	; (1a001198 <Control+0x2d0>)
1a001058:	2003      	movs	r0, #3
1a00105a:	f005 ffa8 	bl	1a006fae <uartWriteString>
						}

						strcpy(txt2Disk.str,txt2Con.str);
1a00105e:	a914      	add	r1, sp, #80	; 0x50
1a001060:	a809      	add	r0, sp, #36	; 0x24
1a001062:	f006 fc51 	bl	1a007908 <strcpy>
						txt2Disk.print=FALSE;
1a001066:	2300      	movs	r3, #0
1a001068:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
						if ( xQueueSend(qLog_Write, &txt2Disk,
1a00106c:	2201      	movs	r2, #1
1a00106e:	a909      	add	r1, sp, #36	; 0x24
1a001070:	4840      	ldr	r0, [pc, #256]	; (1a001174 <Control+0x2ac>)
1a001072:	6800      	ldr	r0, [r0, #0]
1a001074:	f002 fee0 	bl	1a003e38 <xQueueGenericSend>
1a001078:	2801      	cmp	r0, #1
1a00107a:	f43f af66 	beq.w	1a000f4a <Control+0x82>
								(TickType_t ) 1) != pdPASS)
						{
							uartWriteString( UART_PC, "Error envio cola de mensajes Disco\r\n");
1a00107e:	4943      	ldr	r1, [pc, #268]	; (1a00118c <Control+0x2c4>)
1a001080:	2003      	movs	r0, #3
1a001082:	f005 ff94 	bl	1a006fae <uartWriteString>
1a001086:	e760      	b.n	1a000f4a <Control+0x82>
				xQueueReceive(qCom_de_Consola, &Com_de_Consola, 0);
1a001088:	2200      	movs	r2, #0
1a00108a:	a903      	add	r1, sp, #12
1a00108c:	4b3a      	ldr	r3, [pc, #232]	; (1a001178 <Control+0x2b0>)
1a00108e:	6818      	ldr	r0, [r3, #0]
1a001090:	f002 fff6 	bl	1a004080 <xQueueReceive>
				switch (Com_de_Consola.tipo)
1a001094:	f89d 3017 	ldrb.w	r3, [sp, #23]
1a001098:	2b01      	cmp	r3, #1
1a00109a:	d029      	beq.n	1a0010f0 <Control+0x228>
1a00109c:	2b00      	cmp	r3, #0
1a00109e:	f000 8081 	beq.w	1a0011a4 <Control+0x2dc>
1a0010a2:	2b02      	cmp	r3, #2
1a0010a4:	d1ae      	bne.n	1a001004 <Control+0x13c>
					Motor.marcha = FALSE;
1a0010a6:	2300      	movs	r3, #0
1a0010a8:	4a2d      	ldr	r2, [pc, #180]	; (1a001160 <Control+0x298>)
1a0010aa:	7013      	strb	r3, [r2, #0]
					strcpy(txt2Blue.str, "STOP");
1a0010ac:	4a39      	ldr	r2, [pc, #228]	; (1a001194 <Control+0x2cc>)
1a0010ae:	e892 0003 	ldmia.w	r2, {r0, r1}
1a0010b2:	900f      	str	r0, [sp, #60]	; 0x3c
1a0010b4:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
					if ( xQueueSend(qCom_a_Bluetooth, &txt2Blue,
1a0010b8:	2201      	movs	r2, #1
1a0010ba:	a90f      	add	r1, sp, #60	; 0x3c
1a0010bc:	482c      	ldr	r0, [pc, #176]	; (1a001170 <Control+0x2a8>)
1a0010be:	6800      	ldr	r0, [r0, #0]
1a0010c0:	f002 feba 	bl	1a003e38 <xQueueGenericSend>
1a0010c4:	2801      	cmp	r0, #1
1a0010c6:	d146      	bne.n	1a001156 <Control+0x28e>
					strcpy(txt2Disk.str,txt2Blue.str);
1a0010c8:	a90f      	add	r1, sp, #60	; 0x3c
1a0010ca:	a809      	add	r0, sp, #36	; 0x24
1a0010cc:	f006 fc1c 	bl	1a007908 <strcpy>
					txt2Disk.print=FALSE;
1a0010d0:	2300      	movs	r3, #0
1a0010d2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
					if ( xQueueSend(qLog_Write, &txt2Disk,
1a0010d6:	2201      	movs	r2, #1
1a0010d8:	a909      	add	r1, sp, #36	; 0x24
1a0010da:	4826      	ldr	r0, [pc, #152]	; (1a001174 <Control+0x2ac>)
1a0010dc:	6800      	ldr	r0, [r0, #0]
1a0010de:	f002 feab 	bl	1a003e38 <xQueueGenericSend>
1a0010e2:	2801      	cmp	r0, #1
1a0010e4:	d08e      	beq.n	1a001004 <Control+0x13c>
						uartWriteString( UART_PC, "Error envio cola de mensajes Disco\r\n");
1a0010e6:	4929      	ldr	r1, [pc, #164]	; (1a00118c <Control+0x2c4>)
1a0010e8:	2003      	movs	r0, #3
1a0010ea:	f005 ff60 	bl	1a006fae <uartWriteString>
1a0010ee:	e789      	b.n	1a001004 <Control+0x13c>
					Motor.marcha = TRUE;
1a0010f0:	4e1b      	ldr	r6, [pc, #108]	; (1a001160 <Control+0x298>)
1a0010f2:	2501      	movs	r5, #1
1a0010f4:	7035      	strb	r5, [r6, #0]
					strcpy(txt2Blue.str, "START, FREC=");
1a0010f6:	4b29      	ldr	r3, [pc, #164]	; (1a00119c <Control+0x2d4>)
1a0010f8:	ac0f      	add	r4, sp, #60	; 0x3c
1a0010fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
1a0010fc:	c407      	stmia	r4!, {r0, r1, r2}
1a0010fe:	7023      	strb	r3, [r4, #0]
					itoa_dec(Motor.frecuencia, aux);
1a001100:	a906      	add	r1, sp, #24
1a001102:	7870      	ldrb	r0, [r6, #1]
1a001104:	f7ff f99e 	bl	1a000444 <itoa_dec>
					strcat(txt2Blue.str, aux);
1a001108:	a906      	add	r1, sp, #24
1a00110a:	a80f      	add	r0, sp, #60	; 0x3c
1a00110c:	f006 fbed 	bl	1a0078ea <strcat>
					if ( xQueueSend(qCom_a_Bluetooth, &txt2Blue,
1a001110:	2300      	movs	r3, #0
1a001112:	462a      	mov	r2, r5
1a001114:	a90f      	add	r1, sp, #60	; 0x3c
1a001116:	4816      	ldr	r0, [pc, #88]	; (1a001170 <Control+0x2a8>)
1a001118:	6800      	ldr	r0, [r0, #0]
1a00111a:	f002 fe8d 	bl	1a003e38 <xQueueGenericSend>
1a00111e:	42a8      	cmp	r0, r5
1a001120:	d114      	bne.n	1a00114c <Control+0x284>
					strcpy(txt2Disk.str,txt2Blue.str);
1a001122:	a90f      	add	r1, sp, #60	; 0x3c
1a001124:	a809      	add	r0, sp, #36	; 0x24
1a001126:	f006 fbef 	bl	1a007908 <strcpy>
					txt2Disk.print=FALSE;
1a00112a:	2300      	movs	r3, #0
1a00112c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
					if ( xQueueSend(qLog_Write, &txt2Disk,
1a001130:	2201      	movs	r2, #1
1a001132:	a909      	add	r1, sp, #36	; 0x24
1a001134:	480f      	ldr	r0, [pc, #60]	; (1a001174 <Control+0x2ac>)
1a001136:	6800      	ldr	r0, [r0, #0]
1a001138:	f002 fe7e 	bl	1a003e38 <xQueueGenericSend>
1a00113c:	2801      	cmp	r0, #1
1a00113e:	f43f af61 	beq.w	1a001004 <Control+0x13c>
						uartWriteString( UART_PC, "Error envio cola de mensajes Disco\r\n");
1a001142:	4912      	ldr	r1, [pc, #72]	; (1a00118c <Control+0x2c4>)
1a001144:	2003      	movs	r0, #3
1a001146:	f005 ff32 	bl	1a006fae <uartWriteString>
1a00114a:	e75b      	b.n	1a001004 <Control+0x13c>
						uartWriteString( UART_PC, "Error envio cola de mensajes Bluetooth\r\n");
1a00114c:	490e      	ldr	r1, [pc, #56]	; (1a001188 <Control+0x2c0>)
1a00114e:	2003      	movs	r0, #3
1a001150:	f005 ff2d 	bl	1a006fae <uartWriteString>
1a001154:	e7e5      	b.n	1a001122 <Control+0x25a>
						uartWriteString( UART_PC, "Error envio cola de mensajes Bluetoot\r\n");
1a001156:	4912      	ldr	r1, [pc, #72]	; (1a0011a0 <Control+0x2d8>)
1a001158:	2003      	movs	r0, #3
1a00115a:	f005 ff28 	bl	1a006fae <uartWriteString>
1a00115e:	e7b3      	b.n	1a0010c8 <Control+0x200>
1a001160:	10000004 	.word	0x10000004
1a001164:	1a007e50 	.word	0x1a007e50
1a001168:	1a007e60 	.word	0x1a007e60
1a00116c:	1000353c 	.word	0x1000353c
1a001170:	10003534 	.word	0x10003534
1a001174:	10003530 	.word	0x10003530
1a001178:	10003538 	.word	0x10003538
1a00117c:	10003540 	.word	0x10003540
1a001180:	1a007e68 	.word	0x1a007e68
1a001184:	1a007e78 	.word	0x1a007e78
1a001188:	1a007ea0 	.word	0x1a007ea0
1a00118c:	1a007ecc 	.word	0x1a007ecc
1a001190:	100034ac 	.word	0x100034ac
1a001194:	1a007920 	.word	0x1a007920
1a001198:	1a007f70 	.word	0x1a007f70
1a00119c:	1a007ef4 	.word	0x1a007ef4
1a0011a0:	1a007f04 	.word	0x1a007f04
					Motor.frecuencia = Com_de_Consola.frecuencia;
1a0011a4:	f89d 4016 	ldrb.w	r4, [sp, #22]
1a0011a8:	4b5b      	ldr	r3, [pc, #364]	; (1a001318 <Control+0x450>)
1a0011aa:	705c      	strb	r4, [r3, #1]
					if (Motor.marcha == TRUE)
1a0011ac:	781b      	ldrb	r3, [r3, #0]
1a0011ae:	b36b      	cbz	r3, 1a00120c <Control+0x344>
						strcpy(txt2Blue.str, "RUN, FREC=");
1a0011b0:	4a5a      	ldr	r2, [pc, #360]	; (1a00131c <Control+0x454>)
1a0011b2:	ab0f      	add	r3, sp, #60	; 0x3c
1a0011b4:	ca07      	ldmia	r2, {r0, r1, r2}
1a0011b6:	c303      	stmia	r3!, {r0, r1}
1a0011b8:	f823 2b02 	strh.w	r2, [r3], #2
1a0011bc:	0c12      	lsrs	r2, r2, #16
1a0011be:	701a      	strb	r2, [r3, #0]
					itoa_dec(Motor.frecuencia, aux);
1a0011c0:	a906      	add	r1, sp, #24
1a0011c2:	4620      	mov	r0, r4
1a0011c4:	f7ff f93e 	bl	1a000444 <itoa_dec>
					strcat(txt2Blue.str, aux);
1a0011c8:	a906      	add	r1, sp, #24
1a0011ca:	a80f      	add	r0, sp, #60	; 0x3c
1a0011cc:	f006 fb8d 	bl	1a0078ea <strcat>
					if ( xQueueSend(qCom_a_Bluetooth, &txt2Blue,
1a0011d0:	2300      	movs	r3, #0
1a0011d2:	2201      	movs	r2, #1
1a0011d4:	a90f      	add	r1, sp, #60	; 0x3c
1a0011d6:	4852      	ldr	r0, [pc, #328]	; (1a001320 <Control+0x458>)
1a0011d8:	6800      	ldr	r0, [r0, #0]
1a0011da:	f002 fe2d 	bl	1a003e38 <xQueueGenericSend>
1a0011de:	2801      	cmp	r0, #1
1a0011e0:	d11a      	bne.n	1a001218 <Control+0x350>
					strcpy(txt2Disk.str,txt2Blue.str);
1a0011e2:	a90f      	add	r1, sp, #60	; 0x3c
1a0011e4:	a809      	add	r0, sp, #36	; 0x24
1a0011e6:	f006 fb8f 	bl	1a007908 <strcpy>
					txt2Disk.print=FALSE;
1a0011ea:	2300      	movs	r3, #0
1a0011ec:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
					if ( xQueueSend(qLog_Write, &txt2Disk,
1a0011f0:	2201      	movs	r2, #1
1a0011f2:	a909      	add	r1, sp, #36	; 0x24
1a0011f4:	484b      	ldr	r0, [pc, #300]	; (1a001324 <Control+0x45c>)
1a0011f6:	6800      	ldr	r0, [r0, #0]
1a0011f8:	f002 fe1e 	bl	1a003e38 <xQueueGenericSend>
1a0011fc:	2801      	cmp	r0, #1
1a0011fe:	f43f af01 	beq.w	1a001004 <Control+0x13c>
						uartWriteString( UART_PC, "Error envio cola de mensajes Disco\r\n");
1a001202:	4949      	ldr	r1, [pc, #292]	; (1a001328 <Control+0x460>)
1a001204:	2003      	movs	r0, #3
1a001206:	f005 fed2 	bl	1a006fae <uartWriteString>
1a00120a:	e6fb      	b.n	1a001004 <Control+0x13c>
						strcpy(txt2Blue.str, "STOP, FREC=");
1a00120c:	ab0f      	add	r3, sp, #60	; 0x3c
1a00120e:	4a47      	ldr	r2, [pc, #284]	; (1a00132c <Control+0x464>)
1a001210:	ca07      	ldmia	r2, {r0, r1, r2}
1a001212:	e883 0007 	stmia.w	r3, {r0, r1, r2}
1a001216:	e7d3      	b.n	1a0011c0 <Control+0x2f8>
						uartWriteString( UART_PC, "Error envio cola de mensajes Bluetooth\r\n");
1a001218:	4945      	ldr	r1, [pc, #276]	; (1a001330 <Control+0x468>)
1a00121a:	2003      	movs	r0, #3
1a00121c:	f005 fec7 	bl	1a006fae <uartWriteString>
1a001220:	e7df      	b.n	1a0011e2 <Control+0x31a>
						Motor.marcha = TRUE;
1a001222:	4e3d      	ldr	r6, [pc, #244]	; (1a001318 <Control+0x450>)
1a001224:	2501      	movs	r5, #1
1a001226:	7035      	strb	r5, [r6, #0]
						strcpy(txt2Con.str, "START, FREC=");
1a001228:	4b42      	ldr	r3, [pc, #264]	; (1a001334 <Control+0x46c>)
1a00122a:	ac14      	add	r4, sp, #80	; 0x50
1a00122c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
1a00122e:	c407      	stmia	r4!, {r0, r1, r2}
1a001230:	7023      	strb	r3, [r4, #0]
						itoa_dec(Motor.frecuencia, aux);
1a001232:	a906      	add	r1, sp, #24
1a001234:	7870      	ldrb	r0, [r6, #1]
1a001236:	f7ff f905 	bl	1a000444 <itoa_dec>
						strcat(txt2Con.str, aux);
1a00123a:	a906      	add	r1, sp, #24
1a00123c:	a814      	add	r0, sp, #80	; 0x50
1a00123e:	f006 fb54 	bl	1a0078ea <strcat>
						if ( xQueueSend(qCom_a_Consola, &txt2Con,
1a001242:	2300      	movs	r3, #0
1a001244:	462a      	mov	r2, r5
1a001246:	a914      	add	r1, sp, #80	; 0x50
1a001248:	483b      	ldr	r0, [pc, #236]	; (1a001338 <Control+0x470>)
1a00124a:	6800      	ldr	r0, [r0, #0]
1a00124c:	f002 fdf4 	bl	1a003e38 <xQueueGenericSend>
1a001250:	42a8      	cmp	r0, r5
1a001252:	d003      	beq.n	1a00125c <Control+0x394>
							uartWriteString( UART_PC, "Error envio cola de mensajes a Consola\r\n");
1a001254:	4939      	ldr	r1, [pc, #228]	; (1a00133c <Control+0x474>)
1a001256:	2003      	movs	r0, #3
1a001258:	f005 fea9 	bl	1a006fae <uartWriteString>
						strcpy(txt2Disk.str,txt2Con.str);
1a00125c:	a914      	add	r1, sp, #80	; 0x50
1a00125e:	a809      	add	r0, sp, #36	; 0x24
1a001260:	f006 fb52 	bl	1a007908 <strcpy>
						txt2Disk.print=FALSE;
1a001264:	2300      	movs	r3, #0
1a001266:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
						if ( xQueueSend(qLog_Write, &txt2Disk,
1a00126a:	2201      	movs	r2, #1
1a00126c:	a909      	add	r1, sp, #36	; 0x24
1a00126e:	482d      	ldr	r0, [pc, #180]	; (1a001324 <Control+0x45c>)
1a001270:	6800      	ldr	r0, [r0, #0]
1a001272:	f002 fde1 	bl	1a003e38 <xQueueGenericSend>
1a001276:	2801      	cmp	r0, #1
1a001278:	f43f ae67 	beq.w	1a000f4a <Control+0x82>
							uartWriteString( UART_PC, "Error envio cola de mensajes Disco\r\n");
1a00127c:	492a      	ldr	r1, [pc, #168]	; (1a001328 <Control+0x460>)
1a00127e:	2003      	movs	r0, #3
1a001280:	f005 fe95 	bl	1a006fae <uartWriteString>
1a001284:	e661      	b.n	1a000f4a <Control+0x82>
						}

						break;
					case UPDATE_FREC:
						Motor.frecuencia = Com_de_Bluetooth.frecuencia;
1a001286:	f89d 400a 	ldrb.w	r4, [sp, #10]
1a00128a:	4b23      	ldr	r3, [pc, #140]	; (1a001318 <Control+0x450>)
1a00128c:	705c      	strb	r4, [r3, #1]
						if (Motor.marcha == TRUE)
1a00128e:	781b      	ldrb	r3, [r3, #0]
1a001290:	2b00      	cmp	r3, #0
1a001292:	d03a      	beq.n	1a00130a <Control+0x442>
							strcpy(txt2Con.str, "RUN, FREC=");
1a001294:	4a21      	ldr	r2, [pc, #132]	; (1a00131c <Control+0x454>)
1a001296:	ab14      	add	r3, sp, #80	; 0x50
1a001298:	ca07      	ldmia	r2, {r0, r1, r2}
1a00129a:	c303      	stmia	r3!, {r0, r1}
1a00129c:	f823 2b02 	strh.w	r2, [r3], #2
1a0012a0:	0c12      	lsrs	r2, r2, #16
1a0012a2:	701a      	strb	r2, [r3, #0]
						else
							strcpy(txt2Con.str, "STOP, FREC=");
						itoa_dec(Motor.frecuencia, aux);
1a0012a4:	a906      	add	r1, sp, #24
1a0012a6:	4620      	mov	r0, r4
1a0012a8:	f7ff f8cc 	bl	1a000444 <itoa_dec>
						aux[2]='\r';
1a0012ac:	230d      	movs	r3, #13
1a0012ae:	f88d 301a 	strb.w	r3, [sp, #26]
						aux[3]='\n';
1a0012b2:	230a      	movs	r3, #10
1a0012b4:	f88d 301b 	strb.w	r3, [sp, #27]
						aux[4]='\0';
1a0012b8:	2400      	movs	r4, #0
1a0012ba:	f88d 401c 	strb.w	r4, [sp, #28]
						strcat(txt2Con.str, aux);
1a0012be:	a906      	add	r1, sp, #24
1a0012c0:	a814      	add	r0, sp, #80	; 0x50
1a0012c2:	f006 fb12 	bl	1a0078ea <strcat>
						if ( xQueueSend(qCom_a_Consola, &txt2Con,
1a0012c6:	4623      	mov	r3, r4
1a0012c8:	2201      	movs	r2, #1
1a0012ca:	a914      	add	r1, sp, #80	; 0x50
1a0012cc:	481a      	ldr	r0, [pc, #104]	; (1a001338 <Control+0x470>)
1a0012ce:	6800      	ldr	r0, [r0, #0]
1a0012d0:	f002 fdb2 	bl	1a003e38 <xQueueGenericSend>
1a0012d4:	2801      	cmp	r0, #1
1a0012d6:	d003      	beq.n	1a0012e0 <Control+0x418>
								(TickType_t ) 1) != pdPASS)
						{
							uartWriteString( UART_PC, "Error envio cola de mensajes Consola\r\n");
1a0012d8:	4919      	ldr	r1, [pc, #100]	; (1a001340 <Control+0x478>)
1a0012da:	2003      	movs	r0, #3
1a0012dc:	f005 fe67 	bl	1a006fae <uartWriteString>
						}
						strcpy(txt2Disk.str,txt2Con.str);
1a0012e0:	a914      	add	r1, sp, #80	; 0x50
1a0012e2:	a809      	add	r0, sp, #36	; 0x24
1a0012e4:	f006 fb10 	bl	1a007908 <strcpy>
						txt2Disk.print=FALSE;
1a0012e8:	2300      	movs	r3, #0
1a0012ea:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
						if ( xQueueSend(qLog_Write, &txt2Disk,
1a0012ee:	2201      	movs	r2, #1
1a0012f0:	a909      	add	r1, sp, #36	; 0x24
1a0012f2:	480c      	ldr	r0, [pc, #48]	; (1a001324 <Control+0x45c>)
1a0012f4:	6800      	ldr	r0, [r0, #0]
1a0012f6:	f002 fd9f 	bl	1a003e38 <xQueueGenericSend>
1a0012fa:	2801      	cmp	r0, #1
1a0012fc:	f43f ae25 	beq.w	1a000f4a <Control+0x82>
								(TickType_t ) 1) != pdPASS)
						{
							uartWriteString( UART_PC, "Error envio cola de mensajes Disco\r\n");
1a001300:	4909      	ldr	r1, [pc, #36]	; (1a001328 <Control+0x460>)
1a001302:	2003      	movs	r0, #3
1a001304:	f005 fe53 	bl	1a006fae <uartWriteString>
1a001308:	e61f      	b.n	1a000f4a <Control+0x82>
							strcpy(txt2Con.str, "STOP, FREC=");
1a00130a:	ab14      	add	r3, sp, #80	; 0x50
1a00130c:	4a07      	ldr	r2, [pc, #28]	; (1a00132c <Control+0x464>)
1a00130e:	ca07      	ldmia	r2, {r0, r1, r2}
1a001310:	e883 0007 	stmia.w	r3, {r0, r1, r2}
1a001314:	e7c6      	b.n	1a0012a4 <Control+0x3dc>
1a001316:	bf00      	nop
1a001318:	10000004 	.word	0x10000004
1a00131c:	1a007f2c 	.word	0x1a007f2c
1a001320:	10003534 	.word	0x10003534
1a001324:	10003530 	.word	0x10003530
1a001328:	1a007ecc 	.word	0x1a007ecc
1a00132c:	1a007f38 	.word	0x1a007f38
1a001330:	1a007ea0 	.word	0x1a007ea0
1a001334:	1a007ef4 	.word	0x1a007ef4
1a001338:	1000353c 	.word	0x1000353c
1a00133c:	1a007f44 	.word	0x1a007f44
1a001340:	1a007f70 	.word	0x1a007f70

1a001344 <initialise_monitor_handles>:
}
1a001344:	4770      	bx	lr
1a001346:	Address 0x000000001a001346 is out of bounds.


1a001348 <Reset_Handler>:
void Reset_Handler(void) {
1a001348:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a00134a:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a00134c:	4b19      	ldr	r3, [pc, #100]	; (1a0013b4 <Reset_Handler+0x6c>)
1a00134e:	4a1a      	ldr	r2, [pc, #104]	; (1a0013b8 <Reset_Handler+0x70>)
1a001350:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a001352:	3304      	adds	r3, #4
1a001354:	4a19      	ldr	r2, [pc, #100]	; (1a0013bc <Reset_Handler+0x74>)
1a001356:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001358:	2300      	movs	r3, #0
1a00135a:	e005      	b.n	1a001368 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a00135c:	4a18      	ldr	r2, [pc, #96]	; (1a0013c0 <Reset_Handler+0x78>)
1a00135e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a001362:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001366:	3301      	adds	r3, #1
1a001368:	2b07      	cmp	r3, #7
1a00136a:	d9f7      	bls.n	1a00135c <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a00136c:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a00136e:	4b15      	ldr	r3, [pc, #84]	; (1a0013c4 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a001370:	e007      	b.n	1a001382 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a001372:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a001376:	689a      	ldr	r2, [r3, #8]
1a001378:	6859      	ldr	r1, [r3, #4]
1a00137a:	6818      	ldr	r0, [r3, #0]
1a00137c:	f7fe ff05 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a001380:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a001382:	4a11      	ldr	r2, [pc, #68]	; (1a0013c8 <Reset_Handler+0x80>)
1a001384:	4293      	cmp	r3, r2
1a001386:	d3f4      	bcc.n	1a001372 <Reset_Handler+0x2a>
1a001388:	e006      	b.n	1a001398 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a00138a:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a00138c:	6859      	ldr	r1, [r3, #4]
1a00138e:	f854 0b08 	ldr.w	r0, [r4], #8
1a001392:	f7fe ff09 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a001396:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a001398:	4a0c      	ldr	r2, [pc, #48]	; (1a0013cc <Reset_Handler+0x84>)
1a00139a:	4293      	cmp	r3, r2
1a00139c:	d3f5      	bcc.n	1a00138a <Reset_Handler+0x42>
    SystemInit();
1a00139e:	f005 fca7 	bl	1a006cf0 <SystemInit>
    __libc_init_array();
1a0013a2:	f006 fa6b 	bl	1a00787c <__libc_init_array>
    initialise_monitor_handles();
1a0013a6:	f7ff ffcd 	bl	1a001344 <initialise_monitor_handles>
    main();
1a0013aa:	f7ff fa3d 	bl	1a000828 <main>
        __asm__ volatile("wfi");
1a0013ae:	bf30      	wfi
1a0013b0:	e7fd      	b.n	1a0013ae <Reset_Handler+0x66>
1a0013b2:	bf00      	nop
1a0013b4:	40053100 	.word	0x40053100
1a0013b8:	10df1000 	.word	0x10df1000
1a0013bc:	01dff7ff 	.word	0x01dff7ff
1a0013c0:	e000e280 	.word	0xe000e280
1a0013c4:	1a000114 	.word	0x1a000114
1a0013c8:	1a000150 	.word	0x1a000150
1a0013cc:	1a000178 	.word	0x1a000178

1a0013d0 <_fini>:
void _fini(void) {}
1a0013d0:	4770      	bx	lr

1a0013d2 <_init>:
void _init(void) {}
1a0013d2:	4770      	bx	lr

1a0013d4 <ld_word>:

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
1a0013d4:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
1a0013d6:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
1a0013d8:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
1a0013dc:	4770      	bx	lr

1a0013de <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
1a0013de:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
1a0013e0:	7883      	ldrb	r3, [r0, #2]
1a0013e2:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
1a0013e6:	7843      	ldrb	r3, [r0, #1]
1a0013e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
1a0013ec:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
1a0013ee:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
1a0013f2:	4770      	bx	lr

1a0013f4 <ld_qword>:

#if FF_FS_EXFAT
static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
1a0013f4:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
	QWORD rv;

	rv = ptr[7];
1a0013f8:	79c2      	ldrb	r2, [r0, #7]
	rv = rv << 8 | ptr[6];
1a0013fa:	2500      	movs	r5, #0
1a0013fc:	0214      	lsls	r4, r2, #8
1a0013fe:	7982      	ldrb	r2, [r0, #6]
1a001400:	2300      	movs	r3, #0
1a001402:	ea44 0b02 	orr.w	fp, r4, r2
1a001406:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[5];
1a00140a:	ea4f 230c 	mov.w	r3, ip, lsl #8
1a00140e:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
1a001412:	ea4f 220b 	mov.w	r2, fp, lsl #8
1a001416:	7944      	ldrb	r4, [r0, #5]
1a001418:	2500      	movs	r5, #0
1a00141a:	ea44 0b02 	orr.w	fp, r4, r2
1a00141e:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[4];
1a001422:	ea4f 230c 	mov.w	r3, ip, lsl #8
1a001426:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
1a00142a:	ea4f 220b 	mov.w	r2, fp, lsl #8
1a00142e:	7904      	ldrb	r4, [r0, #4]
1a001430:	2500      	movs	r5, #0
1a001432:	ea44 0b02 	orr.w	fp, r4, r2
1a001436:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[3];
1a00143a:	ea4f 230c 	mov.w	r3, ip, lsl #8
1a00143e:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
1a001442:	ea4f 220b 	mov.w	r2, fp, lsl #8
1a001446:	78c4      	ldrb	r4, [r0, #3]
1a001448:	2500      	movs	r5, #0
1a00144a:	ea44 0b02 	orr.w	fp, r4, r2
1a00144e:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[2];
1a001452:	ea4f 230c 	mov.w	r3, ip, lsl #8
1a001456:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
1a00145a:	ea4f 220b 	mov.w	r2, fp, lsl #8
1a00145e:	7884      	ldrb	r4, [r0, #2]
1a001460:	2500      	movs	r5, #0
1a001462:	ea44 0602 	orr.w	r6, r4, r2
1a001466:	ea45 0703 	orr.w	r7, r5, r3
	rv = rv << 8 | ptr[1];
1a00146a:	ea4f 2c07 	mov.w	ip, r7, lsl #8
1a00146e:	ea4c 6c16 	orr.w	ip, ip, r6, lsr #24
1a001472:	ea4f 2b06 	mov.w	fp, r6, lsl #8
1a001476:	7844      	ldrb	r4, [r0, #1]
1a001478:	2500      	movs	r5, #0
1a00147a:	ea4b 0204 	orr.w	r2, fp, r4
1a00147e:	ea4c 0305 	orr.w	r3, ip, r5
	rv = rv << 8 | ptr[0];
1a001482:	021d      	lsls	r5, r3, #8
1a001484:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
1a001488:	0214      	lsls	r4, r2, #8
1a00148a:	7802      	ldrb	r2, [r0, #0]
1a00148c:	2300      	movs	r3, #0
	return rv;
}
1a00148e:	ea42 0004 	orr.w	r0, r2, r4
1a001492:	ea43 0105 	orr.w	r1, r3, r5
1a001496:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
1a00149a:	4770      	bx	lr

1a00149c <st_word>:
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
1a00149c:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
1a00149e:	0a09      	lsrs	r1, r1, #8
1a0014a0:	7041      	strb	r1, [r0, #1]
}
1a0014a2:	4770      	bx	lr

1a0014a4 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
1a0014a4:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
1a0014a6:	f3c1 2307 	ubfx	r3, r1, #8, #8
1a0014aa:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
1a0014ac:	f3c1 4307 	ubfx	r3, r1, #16, #8
1a0014b0:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
1a0014b2:	0e09      	lsrs	r1, r1, #24
1a0014b4:	70c1      	strb	r1, [r0, #3]
}
1a0014b6:	4770      	bx	lr

1a0014b8 <st_qword>:

#if FF_FS_EXFAT
static void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
1a0014b8:	7002      	strb	r2, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
1a0014ba:	f3c2 2107 	ubfx	r1, r2, #8, #8
1a0014be:	7041      	strb	r1, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
1a0014c0:	f3c2 4107 	ubfx	r1, r2, #16, #8
1a0014c4:	7081      	strb	r1, [r0, #2]
	*ptr++ = (BYTE)val; val >>= 8;
1a0014c6:	0e12      	lsrs	r2, r2, #24
1a0014c8:	70c2      	strb	r2, [r0, #3]
	*ptr++ = (BYTE)val; val >>= 8;
1a0014ca:	7103      	strb	r3, [r0, #4]
	*ptr++ = (BYTE)val; val >>= 8;
1a0014cc:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a0014d0:	7142      	strb	r2, [r0, #5]
	*ptr++ = (BYTE)val; val >>= 8;
1a0014d2:	f3c3 4207 	ubfx	r2, r3, #16, #8
1a0014d6:	7182      	strb	r2, [r0, #6]
	*ptr++ = (BYTE)val;
1a0014d8:	0e1b      	lsrs	r3, r3, #24
1a0014da:	71c3      	strb	r3, [r0, #7]
}
1a0014dc:	4770      	bx	lr

1a0014de <mem_cpy>:
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt != 0) {
1a0014de:	4613      	mov	r3, r2
1a0014e0:	b12a      	cbz	r2, 1a0014ee <mem_cpy+0x10>
		do {
			*d++ = *s++;
1a0014e2:	780a      	ldrb	r2, [r1, #0]
1a0014e4:	7002      	strb	r2, [r0, #0]
1a0014e6:	3001      	adds	r0, #1
1a0014e8:	3101      	adds	r1, #1
		} while (--cnt);
1a0014ea:	3b01      	subs	r3, #1
1a0014ec:	d1f9      	bne.n	1a0014e2 <mem_cpy+0x4>
	}
}
1a0014ee:	4770      	bx	lr

1a0014f0 <mem_set>:
static void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
1a0014f0:	7001      	strb	r1, [r0, #0]
1a0014f2:	3001      	adds	r0, #1
	} while (--cnt);
1a0014f4:	3a01      	subs	r2, #1
1a0014f6:	d1fb      	bne.n	1a0014f0 <mem_set>
}
1a0014f8:	4770      	bx	lr

1a0014fa <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
1a0014fa:	b430      	push	{r4, r5}
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
1a0014fc:	1c45      	adds	r5, r0, #1
1a0014fe:	7803      	ldrb	r3, [r0, #0]
1a001500:	7808      	ldrb	r0, [r1, #0]
1a001502:	1a1b      	subs	r3, r3, r0
	} while (--cnt && r == 0);
1a001504:	3a01      	subs	r2, #1
1a001506:	d004      	beq.n	1a001512 <mem_cmp+0x18>
1a001508:	1c4c      	adds	r4, r1, #1
		r = *d++ - *s++;
1a00150a:	4628      	mov	r0, r5
1a00150c:	4621      	mov	r1, r4
	} while (--cnt && r == 0);
1a00150e:	2b00      	cmp	r3, #0
1a001510:	d0f4      	beq.n	1a0014fc <mem_cmp+0x2>

	return r;
}
1a001512:	4618      	mov	r0, r3
1a001514:	bc30      	pop	{r4, r5}
1a001516:	4770      	bx	lr

1a001518 <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
	while (*str && *str != chr) str++;
1a001518:	e000      	b.n	1a00151c <chk_chr+0x4>
1a00151a:	3001      	adds	r0, #1
1a00151c:	7803      	ldrb	r3, [r0, #0]
1a00151e:	b10b      	cbz	r3, 1a001524 <chk_chr+0xc>
1a001520:	428b      	cmp	r3, r1
1a001522:	d1fa      	bne.n	1a00151a <chk_chr+0x2>
	return *str;
}
1a001524:	4618      	mov	r0, r3
1a001526:	4770      	bx	lr

1a001528 <dbc_1st>:
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
}
1a001528:	2000      	movs	r0, #0
1a00152a:	4770      	bx	lr

1a00152c <tchar2uni>:
static DWORD tchar2uni (	/* Returns character in UTF-16 encoding (>=0x10000 on double encoding unit, 0xFFFFFFFF on decode error) */
	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
)
{
	DWORD uc;
	const TCHAR *p = *str;
1a00152c:	6802      	ldr	r2, [r0, #0]

#elif FF_LFN_UNICODE == 2	/* UTF-8 input */
	BYTE b;
	int nf;

	uc = (BYTE)*p++;	/* Get a unit */
1a00152e:	1c53      	adds	r3, r2, #1
1a001530:	7811      	ldrb	r1, [r2, #0]
1a001532:	460a      	mov	r2, r1
	if (uc & 0x80) {	/* Multiple byte code? */
1a001534:	f011 0f80 	tst.w	r1, #128	; 0x80
1a001538:	d101      	bne.n	1a00153e <tchar2uni+0x12>
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
	}
	uc = wc;

#endif
	*str = p;	/* Next read pointer */
1a00153a:	6003      	str	r3, [r0, #0]
1a00153c:	e046      	b.n	1a0015cc <tchar2uni+0xa0>
		if ((uc & 0xE0) == 0xC0) {	/* 2-byte sequence? */
1a00153e:	f001 02e0 	and.w	r2, r1, #224	; 0xe0
1a001542:	2ac0      	cmp	r2, #192	; 0xc0
1a001544:	d00b      	beq.n	1a00155e <tchar2uni+0x32>
			if ((uc & 0xF0) == 0xE0) {	/* 3-byte sequence? */
1a001546:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
1a00154a:	2ae0      	cmp	r2, #224	; 0xe0
1a00154c:	d036      	beq.n	1a0015bc <tchar2uni+0x90>
				if ((uc & 0xF8) == 0xF0) {	/* 4-byte sequence? */
1a00154e:	f001 02f8 	and.w	r2, r1, #248	; 0xf8
1a001552:	2af0      	cmp	r2, #240	; 0xf0
1a001554:	d138      	bne.n	1a0015c8 <tchar2uni+0x9c>
					uc &= 0x07; nf = 3;
1a001556:	f001 0207 	and.w	r2, r1, #7
1a00155a:	2103      	movs	r1, #3
1a00155c:	e002      	b.n	1a001564 <tchar2uni+0x38>
			uc &= 0x1F; nf = 1;
1a00155e:	f001 021f 	and.w	r2, r1, #31
1a001562:	2101      	movs	r1, #1
{
1a001564:	b430      	push	{r4, r5}
			b = (BYTE)*p++;
1a001566:	1c5d      	adds	r5, r3, #1
1a001568:	781b      	ldrb	r3, [r3, #0]
			if ((b & 0xC0) != 0x80) return 0xFFFFFFFF;	/* Wrong sequence? */
1a00156a:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
1a00156e:	2c80      	cmp	r4, #128	; 0x80
1a001570:	d12e      	bne.n	1a0015d0 <tchar2uni+0xa4>
			uc = uc << 6 | (b & 0x3F);
1a001572:	f003 033f 	and.w	r3, r3, #63	; 0x3f
1a001576:	ea43 1282 	orr.w	r2, r3, r2, lsl #6
			b = (BYTE)*p++;
1a00157a:	462b      	mov	r3, r5
		} while (--nf != 0);
1a00157c:	3901      	subs	r1, #1
1a00157e:	d1f2      	bne.n	1a001566 <tchar2uni+0x3a>
		if (uc < 0x80 || IsSurrogate(uc) || uc >= 0x110000) return 0xFFFFFFFF;	/* Wrong code? */
1a001580:	2a7f      	cmp	r2, #127	; 0x7f
1a001582:	d928      	bls.n	1a0015d6 <tchar2uni+0xaa>
1a001584:	f5a2 4358 	sub.w	r3, r2, #55296	; 0xd800
1a001588:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
1a00158c:	d326      	bcc.n	1a0015dc <tchar2uni+0xb0>
1a00158e:	f5b2 1f88 	cmp.w	r2, #1114112	; 0x110000
1a001592:	d226      	bcs.n	1a0015e2 <tchar2uni+0xb6>
		if (uc >= 0x010000) uc = 0xD800DC00 | ((uc - 0x10000) << 6 & 0x3FF0000) | (uc & 0x3FF);	/* Make a surrogate pair if needed */
1a001594:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
1a001598:	d314      	bcc.n	1a0015c4 <tchar2uni+0x98>
1a00159a:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
1a00159e:	4b12      	ldr	r3, [pc, #72]	; (1a0015e8 <tchar2uni+0xbc>)
1a0015a0:	ea03 1381 	and.w	r3, r3, r1, lsl #6
1a0015a4:	f3c2 0209 	ubfx	r2, r2, #0, #10
1a0015a8:	431a      	orrs	r2, r3
1a0015aa:	f042 4258 	orr.w	r2, r2, #3623878656	; 0xd8000000
1a0015ae:	f442 425c 	orr.w	r2, r2, #56320	; 0xdc00
			b = (BYTE)*p++;
1a0015b2:	462b      	mov	r3, r5
	*str = p;	/* Next read pointer */
1a0015b4:	6003      	str	r3, [r0, #0]
	return uc;
}
1a0015b6:	4610      	mov	r0, r2
1a0015b8:	bc30      	pop	{r4, r5}
1a0015ba:	4770      	bx	lr
				uc &= 0x0F; nf = 2;
1a0015bc:	f001 020f 	and.w	r2, r1, #15
1a0015c0:	2102      	movs	r1, #2
1a0015c2:	e7cf      	b.n	1a001564 <tchar2uni+0x38>
			b = (BYTE)*p++;
1a0015c4:	462b      	mov	r3, r5
1a0015c6:	e7f5      	b.n	1a0015b4 <tchar2uni+0x88>
					return 0xFFFFFFFF;
1a0015c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
}
1a0015cc:	4610      	mov	r0, r2
1a0015ce:	4770      	bx	lr
			if ((b & 0xC0) != 0x80) return 0xFFFFFFFF;	/* Wrong sequence? */
1a0015d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0015d4:	e7ef      	b.n	1a0015b6 <tchar2uni+0x8a>
		if (uc < 0x80 || IsSurrogate(uc) || uc >= 0x110000) return 0xFFFFFFFF;	/* Wrong code? */
1a0015d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0015da:	e7ec      	b.n	1a0015b6 <tchar2uni+0x8a>
1a0015dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0015e0:	e7e9      	b.n	1a0015b6 <tchar2uni+0x8a>
1a0015e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0015e6:	e7e6      	b.n	1a0015b6 <tchar2uni+0x8a>
1a0015e8:	03ff0000 	.word	0x03ff0000

1a0015ec <clst2sect>:
static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
1a0015ec:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
1a0015ee:	69c3      	ldr	r3, [r0, #28]
1a0015f0:	3b02      	subs	r3, #2
1a0015f2:	428b      	cmp	r3, r1
1a0015f4:	d904      	bls.n	1a001600 <clst2sect+0x14>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
1a0015f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a0015f8:	8940      	ldrh	r0, [r0, #10]
1a0015fa:	fb01 3000 	mla	r0, r1, r0, r3
1a0015fe:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
1a001600:	2000      	movs	r0, #0
}
1a001602:	4770      	bx	lr

1a001604 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
1a001604:	b570      	push	{r4, r5, r6, lr}
1a001606:	4606      	mov	r6, r0
1a001608:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
1a00160a:	f101 001a 	add.w	r0, r1, #26
1a00160e:	f7ff fee1 	bl	1a0013d4 <ld_word>
	if (fs->fs_type == FS_FAT32) {
1a001612:	7833      	ldrb	r3, [r6, #0]
1a001614:	2b03      	cmp	r3, #3
1a001616:	d000      	beq.n	1a00161a <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
1a001618:	bd70      	pop	{r4, r5, r6, pc}
1a00161a:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
1a00161c:	f105 0014 	add.w	r0, r5, #20
1a001620:	f7ff fed8 	bl	1a0013d4 <ld_word>
1a001624:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
1a001628:	e7f6      	b.n	1a001618 <ld_clust+0x14>

1a00162a <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
1a00162a:	b570      	push	{r4, r5, r6, lr}
1a00162c:	4606      	mov	r6, r0
1a00162e:	460c      	mov	r4, r1
1a001630:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
1a001632:	b291      	uxth	r1, r2
1a001634:	f104 001a 	add.w	r0, r4, #26
1a001638:	f7ff ff30 	bl	1a00149c <st_word>
	if (fs->fs_type == FS_FAT32) {
1a00163c:	7833      	ldrb	r3, [r6, #0]
1a00163e:	2b03      	cmp	r3, #3
1a001640:	d000      	beq.n	1a001644 <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
1a001642:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
1a001644:	0c29      	lsrs	r1, r5, #16
1a001646:	f104 0014 	add.w	r0, r4, #20
1a00164a:	f7ff ff27 	bl	1a00149c <st_word>
}
1a00164e:	e7f8      	b.n	1a001642 <st_clust+0x18>

1a001650 <pick_lfn>:

static int pick_lfn (	/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
1a001650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001654:	4607      	mov	r7, r0
1a001656:	460e      	mov	r6, r1
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
1a001658:	f101 001a 	add.w	r0, r1, #26
1a00165c:	f7ff feba 	bl	1a0013d4 <ld_word>
1a001660:	bb60      	cbnz	r0, 1a0016bc <pick_lfn+0x6c>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
1a001662:	7835      	ldrb	r5, [r6, #0]
1a001664:	f025 0540 	bic.w	r5, r5, #64	; 0x40
1a001668:	3d01      	subs	r5, #1
1a00166a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
1a00166e:	eb05 0583 	add.w	r5, r5, r3, lsl #2

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1a001672:	f04f 0801 	mov.w	r8, #1
1a001676:	2400      	movs	r4, #0
1a001678:	e004      	b.n	1a001684 <pick_lfn+0x34>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc != 0) {
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
1a00167a:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a00167e:	4298      	cmp	r0, r3
1a001680:	d121      	bne.n	1a0016c6 <pick_lfn+0x76>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1a001682:	3401      	adds	r4, #1
1a001684:	2c0c      	cmp	r4, #12
1a001686:	d80e      	bhi.n	1a0016a6 <pick_lfn+0x56>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1a001688:	4b12      	ldr	r3, [pc, #72]	; (1a0016d4 <pick_lfn+0x84>)
1a00168a:	5d18      	ldrb	r0, [r3, r4]
1a00168c:	4430      	add	r0, r6
1a00168e:	f7ff fea1 	bl	1a0013d4 <ld_word>
		if (wc != 0) {
1a001692:	f1b8 0f00 	cmp.w	r8, #0
1a001696:	d0f0      	beq.n	1a00167a <pick_lfn+0x2a>
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
1a001698:	2dfe      	cmp	r5, #254	; 0xfe
1a00169a:	d812      	bhi.n	1a0016c2 <pick_lfn+0x72>
			lfnbuf[i++] = wc = uc;			/* Store it */
1a00169c:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
1a0016a0:	4680      	mov	r8, r0
1a0016a2:	3501      	adds	r5, #1
1a0016a4:	e7ed      	b.n	1a001682 <pick_lfn+0x32>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
1a0016a6:	7833      	ldrb	r3, [r6, #0]
1a0016a8:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0016ac:	d00d      	beq.n	1a0016ca <pick_lfn+0x7a>
		if (i >= FF_MAX_LFN) return 0;		/* Buffer overflow? */
1a0016ae:	2dfe      	cmp	r5, #254	; 0xfe
1a0016b0:	d80d      	bhi.n	1a0016ce <pick_lfn+0x7e>
		lfnbuf[i] = 0;
1a0016b2:	2300      	movs	r3, #0
1a0016b4:	f827 3015 	strh.w	r3, [r7, r5, lsl #1]
	}

	return 1;		/* The part of LFN is valid */
1a0016b8:	2001      	movs	r0, #1
1a0016ba:	e000      	b.n	1a0016be <pick_lfn+0x6e>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
1a0016bc:	2000      	movs	r0, #0
}
1a0016be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
1a0016c2:	2000      	movs	r0, #0
1a0016c4:	e7fb      	b.n	1a0016be <pick_lfn+0x6e>
			if (uc != 0xFFFF) return 0;		/* Check filler */
1a0016c6:	2000      	movs	r0, #0
1a0016c8:	e7f9      	b.n	1a0016be <pick_lfn+0x6e>
	return 1;		/* The part of LFN is valid */
1a0016ca:	2001      	movs	r0, #1
1a0016cc:	e7f7      	b.n	1a0016be <pick_lfn+0x6e>
		if (i >= FF_MAX_LFN) return 0;		/* Buffer overflow? */
1a0016ce:	2000      	movs	r0, #0
1a0016d0:	e7f5      	b.n	1a0016be <pick_lfn+0x6e>
1a0016d2:	bf00      	nop
1a0016d4:	1a008018 	.word	0x1a008018

1a0016d8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
1a0016d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0016dc:	4680      	mov	r8, r0
1a0016de:	460f      	mov	r7, r1
1a0016e0:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
1a0016e2:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
1a0016e4:	230f      	movs	r3, #15
1a0016e6:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
1a0016e8:	2400      	movs	r4, #0
1a0016ea:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
1a0016ec:	4621      	mov	r1, r4
1a0016ee:	f107 001a 	add.w	r0, r7, #26
1a0016f2:	f7ff fed3 	bl	1a00149c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
1a0016f6:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
1a0016fa:	eb06 0346 	add.w	r3, r6, r6, lsl #1
1a0016fe:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
1a001702:	4625      	mov	r5, r4
1a001704:	e002      	b.n	1a00170c <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
	} while (++s < 13);
1a001706:	3401      	adds	r4, #1
1a001708:	2c0c      	cmp	r4, #12
1a00170a:	d811      	bhi.n	1a001730 <put_lfn+0x58>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
1a00170c:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a001710:	429d      	cmp	r5, r3
1a001712:	d002      	beq.n	1a00171a <put_lfn+0x42>
1a001714:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
1a001718:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
1a00171a:	4b0c      	ldr	r3, [pc, #48]	; (1a00174c <put_lfn+0x74>)
1a00171c:	5d18      	ldrb	r0, [r3, r4]
1a00171e:	4629      	mov	r1, r5
1a001720:	4438      	add	r0, r7
1a001722:	f7ff febb 	bl	1a00149c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
1a001726:	2d00      	cmp	r5, #0
1a001728:	d1ed      	bne.n	1a001706 <put_lfn+0x2e>
1a00172a:	f64f 75ff 	movw	r5, #65535	; 0xffff
1a00172e:	e7ea      	b.n	1a001706 <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
1a001730:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a001734:	429d      	cmp	r5, r3
1a001736:	d002      	beq.n	1a00173e <put_lfn+0x66>
1a001738:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
1a00173c:	b90b      	cbnz	r3, 1a001742 <put_lfn+0x6a>
1a00173e:	f049 0940 	orr.w	r9, r9, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
1a001742:	f887 9000 	strb.w	r9, [r7]
}
1a001746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00174a:	bf00      	nop
1a00174c:	1a008018 	.word	0x1a008018

1a001750 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
1a001750:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001752:	b083      	sub	sp, #12
1a001754:	4607      	mov	r7, r0
1a001756:	4615      	mov	r5, r2
1a001758:	461c      	mov	r4, r3
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
1a00175a:	220b      	movs	r2, #11
1a00175c:	f7ff febf 	bl	1a0014de <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
1a001760:	2c05      	cmp	r4, #5
1a001762:	d811      	bhi.n	1a001788 <gen_numname+0x38>
		sr = seq;
		while (*lfn) {	/* Create a CRC as hash value */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
1a001764:	2607      	movs	r6, #7
1a001766:	e01d      	b.n	1a0017a4 <gen_numname+0x54>
1a001768:	3201      	adds	r2, #1
1a00176a:	2a0f      	cmp	r2, #15
1a00176c:	d80c      	bhi.n	1a001788 <gen_numname+0x38>
				sr = (sr << 1) + (wc & 1);
1a00176e:	f003 0101 	and.w	r1, r3, #1
1a001772:	eb01 0444 	add.w	r4, r1, r4, lsl #1
				wc >>= 1;
1a001776:	085b      	lsrs	r3, r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
1a001778:	f414 3f80 	tst.w	r4, #65536	; 0x10000
1a00177c:	d0f4      	beq.n	1a001768 <gen_numname+0x18>
1a00177e:	f484 3488 	eor.w	r4, r4, #69632	; 0x11000
1a001782:	f084 0421 	eor.w	r4, r4, #33	; 0x21
1a001786:	e7ef      	b.n	1a001768 <gen_numname+0x18>
		while (*lfn) {	/* Create a CRC as hash value */
1a001788:	882b      	ldrh	r3, [r5, #0]
1a00178a:	2b00      	cmp	r3, #0
1a00178c:	d0ea      	beq.n	1a001764 <gen_numname+0x14>
			wc = *lfn++;
1a00178e:	3502      	adds	r5, #2
			for (i = 0; i < 16; i++) {
1a001790:	2200      	movs	r2, #0
1a001792:	e7ea      	b.n	1a00176a <gen_numname+0x1a>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (BYTE)((seq % 16) + '0');
		if (c > '9') c += 7;
		ns[i--] = c;
1a001794:	1e75      	subs	r5, r6, #1
1a001796:	aa02      	add	r2, sp, #8
1a001798:	4432      	add	r2, r6
1a00179a:	f802 3c08 	strb.w	r3, [r2, #-8]
		seq /= 16;
	} while (seq);
1a00179e:	0924      	lsrs	r4, r4, #4
1a0017a0:	d009      	beq.n	1a0017b6 <gen_numname+0x66>
		ns[i--] = c;
1a0017a2:	462e      	mov	r6, r5
		c = (BYTE)((seq % 16) + '0');
1a0017a4:	f004 020f 	and.w	r2, r4, #15
1a0017a8:	f102 0330 	add.w	r3, r2, #48	; 0x30
		if (c > '9') c += 7;
1a0017ac:	2b39      	cmp	r3, #57	; 0x39
1a0017ae:	d9f1      	bls.n	1a001794 <gen_numname+0x44>
1a0017b0:	f102 0337 	add.w	r3, r2, #55	; 0x37
1a0017b4:	e7ee      	b.n	1a001794 <gen_numname+0x44>
	ns[i] = '~';
1a0017b6:	227e      	movs	r2, #126	; 0x7e
1a0017b8:	ab02      	add	r3, sp, #8
1a0017ba:	442b      	add	r3, r5
1a0017bc:	f803 2c08 	strb.w	r2, [r3, #-8]

	/* Append the number to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {
1a0017c0:	e000      	b.n	1a0017c4 <gen_numname+0x74>
1a0017c2:	3401      	adds	r4, #1
1a0017c4:	42ac      	cmp	r4, r5
1a0017c6:	d211      	bcs.n	1a0017ec <gen_numname+0x9c>
1a0017c8:	5d38      	ldrb	r0, [r7, r4]
1a0017ca:	2820      	cmp	r0, #32
1a0017cc:	d00e      	beq.n	1a0017ec <gen_numname+0x9c>
		if (dbc_1st(dst[j])) {
1a0017ce:	f7ff feab 	bl	1a001528 <dbc_1st>
1a0017d2:	2800      	cmp	r0, #0
1a0017d4:	d0f5      	beq.n	1a0017c2 <gen_numname+0x72>
			if (j == i - 1) break;
1a0017d6:	1eb3      	subs	r3, r6, #2
1a0017d8:	42a3      	cmp	r3, r4
1a0017da:	d007      	beq.n	1a0017ec <gen_numname+0x9c>
			j++;
1a0017dc:	3401      	adds	r4, #1
1a0017de:	e7f0      	b.n	1a0017c2 <gen_numname+0x72>
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
1a0017e0:	2220      	movs	r2, #32
1a0017e2:	1c63      	adds	r3, r4, #1
1a0017e4:	553a      	strb	r2, [r7, r4]
	} while (j < 8);
1a0017e6:	2b07      	cmp	r3, #7
1a0017e8:	d808      	bhi.n	1a0017fc <gen_numname+0xac>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
1a0017ea:	461c      	mov	r4, r3
1a0017ec:	2d07      	cmp	r5, #7
1a0017ee:	d8f7      	bhi.n	1a0017e0 <gen_numname+0x90>
1a0017f0:	ab02      	add	r3, sp, #8
1a0017f2:	442b      	add	r3, r5
1a0017f4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
1a0017f8:	3501      	adds	r5, #1
1a0017fa:	e7f2      	b.n	1a0017e2 <gen_numname+0x92>
}
1a0017fc:	b003      	add	sp, #12
1a0017fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a001800 <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
1a001800:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
1a001802:	220b      	movs	r2, #11
	BYTE sum = 0;
1a001804:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
1a001806:	01c3      	lsls	r3, r0, #7
1a001808:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
1a00180c:	7808      	ldrb	r0, [r1, #0]
1a00180e:	fa50 f383 	uxtab	r3, r0, r3
1a001812:	b2d8      	uxtb	r0, r3
1a001814:	3101      	adds	r1, #1
	} while (--n);
1a001816:	3a01      	subs	r2, #1
1a001818:	d1f5      	bne.n	1a001806 <sum_sfn+0x6>
	return sum;
}
1a00181a:	4770      	bx	lr

1a00181c <xdir_sum>:
/*-----------------------------------------------------------------------*/

static WORD xdir_sum (	/* Get checksum of the directoly entry block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
1a00181c:	b430      	push	{r4, r5}
1a00181e:	4605      	mov	r5, r0
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
1a001820:	7841      	ldrb	r1, [r0, #1]
1a001822:	3101      	adds	r1, #1
1a001824:	0149      	lsls	r1, r1, #5
	for (i = sum = 0; i < szblk; i++) {
1a001826:	2000      	movs	r0, #0
1a001828:	4603      	mov	r3, r0
1a00182a:	e001      	b.n	1a001830 <xdir_sum+0x14>
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
			i++;
1a00182c:	3301      	adds	r3, #1
	for (i = sum = 0; i < szblk; i++) {
1a00182e:	3301      	adds	r3, #1
1a001830:	428b      	cmp	r3, r1
1a001832:	d209      	bcs.n	1a001848 <xdir_sum+0x2c>
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
1a001834:	2b02      	cmp	r3, #2
1a001836:	d0f9      	beq.n	1a00182c <xdir_sum+0x10>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
1a001838:	0842      	lsrs	r2, r0, #1
1a00183a:	eb02 32c0 	add.w	r2, r2, r0, lsl #15
1a00183e:	5cec      	ldrb	r4, [r5, r3]
1a001840:	fa14 f282 	uxtah	r2, r4, r2
1a001844:	b290      	uxth	r0, r2
1a001846:	e7f2      	b.n	1a00182e <xdir_sum+0x12>
		}
	}
	return sum;
}
1a001848:	bc30      	pop	{r4, r5}
1a00184a:	4770      	bx	lr

1a00184c <init_alloc_info>:

static void init_alloc_info (
	FATFS* fs,		/* Filesystem object */
	FFOBJID* obj	/* Object allocation information to be initialized */
)
{
1a00184c:	b538      	push	{r3, r4, r5, lr}
1a00184e:	4605      	mov	r5, r0
1a001850:	460c      	mov	r4, r1
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
1a001852:	6900      	ldr	r0, [r0, #16]
1a001854:	3034      	adds	r0, #52	; 0x34
1a001856:	f7ff fdc2 	bl	1a0013de <ld_dword>
1a00185a:	60a0      	str	r0, [r4, #8]
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
1a00185c:	6928      	ldr	r0, [r5, #16]
1a00185e:	3038      	adds	r0, #56	; 0x38
1a001860:	f7ff fdc8 	bl	1a0013f4 <ld_qword>
1a001864:	e9c4 0104 	strd	r0, r1, [r4, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
1a001868:	692b      	ldr	r3, [r5, #16]
1a00186a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
1a00186e:	f003 0302 	and.w	r3, r3, #2
1a001872:	71e3      	strb	r3, [r4, #7]
	obj->n_frag = 0;										/* No last fragment info */
1a001874:	2300      	movs	r3, #0
1a001876:	61e3      	str	r3, [r4, #28]
}
1a001878:	bd38      	pop	{r3, r4, r5, pc}
1a00187a:	Address 0x000000001a00187a is out of bounds.


1a00187c <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
1a00187c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
1a00187e:	6807      	ldr	r7, [r0, #0]
	if (!tp) return vol;	/* Invalid path name? */
1a001880:	2f00      	cmp	r7, #0
1a001882:	d04a      	beq.n	1a00191a <get_ldnumber+0x9e>
	tt = tp = *path;
1a001884:	463a      	mov	r2, r7
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
1a001886:	1c54      	adds	r4, r2, #1
1a001888:	7813      	ldrb	r3, [r2, #0]
1a00188a:	2b1f      	cmp	r3, #31
1a00188c:	d902      	bls.n	1a001894 <get_ldnumber+0x18>
1a00188e:	4622      	mov	r2, r4
1a001890:	2b3a      	cmp	r3, #58	; 0x3a
1a001892:	d1f8      	bne.n	1a001886 <get_ldnumber+0xa>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
1a001894:	2b3a      	cmp	r3, #58	; 0x3a
1a001896:	d003      	beq.n	1a0018a0 <get_ldnumber+0x24>
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
1a001898:	f04f 0e00 	mov.w	lr, #0
}
1a00189c:	4670      	mov	r0, lr
1a00189e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
1a0018a0:	f897 e000 	ldrb.w	lr, [r7]
1a0018a4:	f1ae 0330 	sub.w	r3, lr, #48	; 0x30
1a0018a8:	b2db      	uxtb	r3, r3
1a0018aa:	2b09      	cmp	r3, #9
1a0018ac:	d808      	bhi.n	1a0018c0 <get_ldnumber+0x44>
1a0018ae:	1cbb      	adds	r3, r7, #2
1a0018b0:	42a3      	cmp	r3, r4
1a0018b2:	d002      	beq.n	1a0018ba <get_ldnumber+0x3e>
1a0018b4:	f04f 0e00 	mov.w	lr, #0
1a0018b8:	e004      	b.n	1a0018c4 <get_ldnumber+0x48>
			i = (int)*tp - '0';	/* Get the LD number */
1a0018ba:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
1a0018be:	e027      	b.n	1a001910 <get_ldnumber+0x94>
1a0018c0:	f04f 0e00 	mov.w	lr, #0
				sp = VolumeStr[i]; tp = *path;	/* This string volume ID and path name */
1a0018c4:	4b18      	ldr	r3, [pc, #96]	; (1a001928 <get_ldnumber+0xac>)
1a0018c6:	f853 502e 	ldr.w	r5, [r3, lr, lsl #2]
1a0018ca:	4639      	mov	r1, r7
1a0018cc:	e004      	b.n	1a0018d8 <get_ldnumber+0x5c>
				} while (c && (TCHAR)c == tc);
1a0018ce:	b1bb      	cbz	r3, 1a001900 <get_ldnumber+0x84>
					c = *sp++; tc = *tp++;
1a0018d0:	4631      	mov	r1, r6
1a0018d2:	4665      	mov	r5, ip
				} while (c && (TCHAR)c == tc);
1a0018d4:	429a      	cmp	r2, r3
1a0018d6:	d113      	bne.n	1a001900 <get_ldnumber+0x84>
					c = *sp++; tc = *tp++;
1a0018d8:	f105 0c01 	add.w	ip, r5, #1
1a0018dc:	782b      	ldrb	r3, [r5, #0]
1a0018de:	1c4e      	adds	r6, r1, #1
1a0018e0:	780a      	ldrb	r2, [r1, #0]
					if (IsLower(c)) c -= 0x20;
1a0018e2:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
1a0018e6:	b2c9      	uxtb	r1, r1
1a0018e8:	2919      	cmp	r1, #25
1a0018ea:	d801      	bhi.n	1a0018f0 <get_ldnumber+0x74>
1a0018ec:	3b20      	subs	r3, #32
1a0018ee:	b2db      	uxtb	r3, r3
					if (IsLower(tc)) tc -= 0x20;
1a0018f0:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
1a0018f4:	b2c9      	uxtb	r1, r1
1a0018f6:	2919      	cmp	r1, #25
1a0018f8:	d8e9      	bhi.n	1a0018ce <get_ldnumber+0x52>
1a0018fa:	3a20      	subs	r2, #32
1a0018fc:	b2d2      	uxtb	r2, r2
1a0018fe:	e7e6      	b.n	1a0018ce <get_ldnumber+0x52>
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
1a001900:	b90b      	cbnz	r3, 1a001906 <get_ldnumber+0x8a>
1a001902:	42b4      	cmp	r4, r6
1a001904:	d004      	beq.n	1a001910 <get_ldnumber+0x94>
1a001906:	f10e 0e01 	add.w	lr, lr, #1
1a00190a:	f1be 0f01 	cmp.w	lr, #1
1a00190e:	ddd9      	ble.n	1a0018c4 <get_ldnumber+0x48>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
1a001910:	f1be 0f01 	cmp.w	lr, #1
1a001914:	dc04      	bgt.n	1a001920 <get_ldnumber+0xa4>
			*path = tt;		/* Snip the drive prefix off */
1a001916:	6004      	str	r4, [r0, #0]
1a001918:	e7c0      	b.n	1a00189c <get_ldnumber+0x20>
	if (!tp) return vol;	/* Invalid path name? */
1a00191a:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
1a00191e:	e7bd      	b.n	1a00189c <get_ldnumber+0x20>
	int i, vol = -1;
1a001920:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
1a001924:	e7ba      	b.n	1a00189c <get_ldnumber+0x20>
1a001926:	bf00      	nop
1a001928:	1a008028 	.word	0x1a008028

1a00192c <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
1a00192c:	b538      	push	{r3, r4, r5, lr}
1a00192e:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
1a001930:	b1a8      	cbz	r0, 1a00195e <validate+0x32>
1a001932:	4604      	mov	r4, r0
1a001934:	6803      	ldr	r3, [r0, #0]
1a001936:	b1ab      	cbz	r3, 1a001964 <validate+0x38>
1a001938:	781a      	ldrb	r2, [r3, #0]
1a00193a:	b1aa      	cbz	r2, 1a001968 <validate+0x3c>
1a00193c:	8881      	ldrh	r1, [r0, #4]
1a00193e:	88da      	ldrh	r2, [r3, #6]
1a001940:	4291      	cmp	r1, r2
1a001942:	d003      	beq.n	1a00194c <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
1a001944:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a001946:	2300      	movs	r3, #0
1a001948:	602b      	str	r3, [r5, #0]
	return res;
}
1a00194a:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
1a00194c:	7858      	ldrb	r0, [r3, #1]
1a00194e:	f004 fa43 	bl	1a005dd8 <disk_status>
1a001952:	f010 0f01 	tst.w	r0, #1
1a001956:	d10a      	bne.n	1a00196e <validate+0x42>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a001958:	6823      	ldr	r3, [r4, #0]
			res = FR_OK;
1a00195a:	2000      	movs	r0, #0
1a00195c:	e7f4      	b.n	1a001948 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
1a00195e:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a001960:	2300      	movs	r3, #0
1a001962:	e7f1      	b.n	1a001948 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
1a001964:	2009      	movs	r0, #9
1a001966:	e7ef      	b.n	1a001948 <validate+0x1c>
1a001968:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a00196a:	2300      	movs	r3, #0
1a00196c:	e7ec      	b.n	1a001948 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
1a00196e:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a001970:	2300      	movs	r3, #0
1a001972:	e7e9      	b.n	1a001948 <validate+0x1c>

1a001974 <sync_window>:
{
1a001974:	b538      	push	{r3, r4, r5, lr}
	if (fs->wflag) {	/* Is the disk access window dirty */
1a001976:	78c3      	ldrb	r3, [r0, #3]
1a001978:	b90b      	cbnz	r3, 1a00197e <sync_window+0xa>
	FRESULT res = FR_OK;
1a00197a:	2000      	movs	r0, #0
}
1a00197c:	bd38      	pop	{r3, r4, r5, pc}
1a00197e:	4604      	mov	r4, r0
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
1a001980:	f100 0538 	add.w	r5, r0, #56	; 0x38
1a001984:	2301      	movs	r3, #1
1a001986:	6b42      	ldr	r2, [r0, #52]	; 0x34
1a001988:	4629      	mov	r1, r5
1a00198a:	7840      	ldrb	r0, [r0, #1]
1a00198c:	f004 fa42 	bl	1a005e14 <disk_write>
1a001990:	b9a0      	cbnz	r0, 1a0019bc <sync_window+0x48>
			fs->wflag = 0;	/* Clear window dirty flag */
1a001992:	2300      	movs	r3, #0
1a001994:	70e3      	strb	r3, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
1a001996:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a001998:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1a00199a:	1acb      	subs	r3, r1, r3
1a00199c:	6a22      	ldr	r2, [r4, #32]
1a00199e:	4293      	cmp	r3, r2
1a0019a0:	d20e      	bcs.n	1a0019c0 <sync_window+0x4c>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
1a0019a2:	78a3      	ldrb	r3, [r4, #2]
1a0019a4:	2b02      	cmp	r3, #2
1a0019a6:	d001      	beq.n	1a0019ac <sync_window+0x38>
	FRESULT res = FR_OK;
1a0019a8:	2000      	movs	r0, #0
1a0019aa:	e7e7      	b.n	1a00197c <sync_window+0x8>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
1a0019ac:	2301      	movs	r3, #1
1a0019ae:	440a      	add	r2, r1
1a0019b0:	4629      	mov	r1, r5
1a0019b2:	7860      	ldrb	r0, [r4, #1]
1a0019b4:	f004 fa2e 	bl	1a005e14 <disk_write>
	FRESULT res = FR_OK;
1a0019b8:	2000      	movs	r0, #0
1a0019ba:	e7df      	b.n	1a00197c <sync_window+0x8>
			res = FR_DISK_ERR;
1a0019bc:	2001      	movs	r0, #1
1a0019be:	e7dd      	b.n	1a00197c <sync_window+0x8>
	FRESULT res = FR_OK;
1a0019c0:	2000      	movs	r0, #0
1a0019c2:	e7db      	b.n	1a00197c <sync_window+0x8>

1a0019c4 <move_window>:
{
1a0019c4:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
1a0019c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
1a0019c8:	428b      	cmp	r3, r1
1a0019ca:	d012      	beq.n	1a0019f2 <move_window+0x2e>
1a0019cc:	4604      	mov	r4, r0
1a0019ce:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
1a0019d0:	f7ff ffd0 	bl	1a001974 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
1a0019d4:	4606      	mov	r6, r0
1a0019d6:	b968      	cbnz	r0, 1a0019f4 <move_window+0x30>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
1a0019d8:	2301      	movs	r3, #1
1a0019da:	462a      	mov	r2, r5
1a0019dc:	f104 0138 	add.w	r1, r4, #56	; 0x38
1a0019e0:	7860      	ldrb	r0, [r4, #1]
1a0019e2:	f004 fa07 	bl	1a005df4 <disk_read>
1a0019e6:	b110      	cbz	r0, 1a0019ee <move_window+0x2a>
				res = FR_DISK_ERR;
1a0019e8:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
1a0019ea:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
			fs->winsect = sector;
1a0019ee:	6365      	str	r5, [r4, #52]	; 0x34
1a0019f0:	e000      	b.n	1a0019f4 <move_window+0x30>
	FRESULT res = FR_OK;
1a0019f2:	2600      	movs	r6, #0
}
1a0019f4:	4630      	mov	r0, r6
1a0019f6:	bd70      	pop	{r4, r5, r6, pc}

1a0019f8 <check_fs>:
{
1a0019f8:	b510      	push	{r4, lr}
1a0019fa:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
1a0019fc:	2300      	movs	r3, #0
1a0019fe:	70c3      	strb	r3, [r0, #3]
1a001a00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a001a04:	6343      	str	r3, [r0, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
1a001a06:	f7ff ffdd 	bl	1a0019c4 <move_window>
1a001a0a:	bb30      	cbnz	r0, 1a001a5a <check_fs+0x62>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
1a001a0c:	f204 2036 	addw	r0, r4, #566	; 0x236
1a001a10:	f7ff fce0 	bl	1a0013d4 <ld_word>
1a001a14:	f64a 2355 	movw	r3, #43605	; 0xaa55
1a001a18:	4298      	cmp	r0, r3
1a001a1a:	d120      	bne.n	1a001a5e <check_fs+0x66>
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
1a001a1c:	220b      	movs	r2, #11
1a001a1e:	4914      	ldr	r1, [pc, #80]	; (1a001a70 <check_fs+0x78>)
1a001a20:	f104 0038 	add.w	r0, r4, #56	; 0x38
1a001a24:	f7ff fd69 	bl	1a0014fa <mem_cmp>
1a001a28:	b1d8      	cbz	r0, 1a001a62 <check_fs+0x6a>
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
1a001a2a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
1a001a2e:	2be9      	cmp	r3, #233	; 0xe9
1a001a30:	d003      	beq.n	1a001a3a <check_fs+0x42>
1a001a32:	2beb      	cmp	r3, #235	; 0xeb
1a001a34:	d001      	beq.n	1a001a3a <check_fs+0x42>
1a001a36:	2be8      	cmp	r3, #232	; 0xe8
1a001a38:	d115      	bne.n	1a001a66 <check_fs+0x6e>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
1a001a3a:	2203      	movs	r2, #3
1a001a3c:	490d      	ldr	r1, [pc, #52]	; (1a001a74 <check_fs+0x7c>)
1a001a3e:	f104 006e 	add.w	r0, r4, #110	; 0x6e
1a001a42:	f7ff fd5a 	bl	1a0014fa <mem_cmp>
1a001a46:	b180      	cbz	r0, 1a001a6a <check_fs+0x72>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
1a001a48:	2205      	movs	r2, #5
1a001a4a:	490b      	ldr	r1, [pc, #44]	; (1a001a78 <check_fs+0x80>)
1a001a4c:	f104 008a 	add.w	r0, r4, #138	; 0x8a
1a001a50:	f7ff fd53 	bl	1a0014fa <mem_cmp>
1a001a54:	b120      	cbz	r0, 1a001a60 <check_fs+0x68>
	return 2;	/* Valid BS but not FAT */
1a001a56:	2002      	movs	r0, #2
1a001a58:	e002      	b.n	1a001a60 <check_fs+0x68>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
1a001a5a:	2004      	movs	r0, #4
1a001a5c:	e000      	b.n	1a001a60 <check_fs+0x68>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
1a001a5e:	2003      	movs	r0, #3
}
1a001a60:	bd10      	pop	{r4, pc}
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
1a001a62:	2001      	movs	r0, #1
1a001a64:	e7fc      	b.n	1a001a60 <check_fs+0x68>
	return 2;	/* Valid BS but not FAT */
1a001a66:	2002      	movs	r0, #2
1a001a68:	e7fa      	b.n	1a001a60 <check_fs+0x68>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
1a001a6a:	2000      	movs	r0, #0
1a001a6c:	e7f8      	b.n	1a001a60 <check_fs+0x68>
1a001a6e:	bf00      	nop
1a001a70:	1a008030 	.word	0x1a008030
1a001a74:	1a00803c 	.word	0x1a00803c
1a001a78:	1a008040 	.word	0x1a008040

1a001a7c <find_volume>:
{
1a001a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001a80:	b084      	sub	sp, #16
1a001a82:	460d      	mov	r5, r1
1a001a84:	4617      	mov	r7, r2
	*rfs = 0;
1a001a86:	2300      	movs	r3, #0
1a001a88:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
1a001a8a:	f7ff fef7 	bl	1a00187c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
1a001a8e:	1e06      	subs	r6, r0, #0
1a001a90:	f2c0 8205 	blt.w	1a001e9e <find_volume+0x422>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
1a001a94:	4bbf      	ldr	r3, [pc, #764]	; (1a001d94 <find_volume+0x318>)
1a001a96:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
1a001a9a:	2c00      	cmp	r4, #0
1a001a9c:	f000 8203 	beq.w	1a001ea6 <find_volume+0x42a>
	*rfs = fs;							/* Return pointer to the filesystem object */
1a001aa0:	602c      	str	r4, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
1a001aa2:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
1a001aa6:	7823      	ldrb	r3, [r4, #0]
1a001aa8:	b173      	cbz	r3, 1a001ac8 <find_volume+0x4c>
		stat = disk_status(fs->pdrv);
1a001aaa:	7860      	ldrb	r0, [r4, #1]
1a001aac:	f004 f994 	bl	1a005dd8 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
1a001ab0:	f010 0f01 	tst.w	r0, #1
1a001ab4:	d108      	bne.n	1a001ac8 <find_volume+0x4c>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
1a001ab6:	2f00      	cmp	r7, #0
1a001ab8:	f000 81f7 	beq.w	1a001eaa <find_volume+0x42e>
1a001abc:	f010 0f04 	tst.w	r0, #4
1a001ac0:	f040 81f5 	bne.w	1a001eae <find_volume+0x432>
			return FR_OK;				/* The filesystem object is valid */
1a001ac4:	2000      	movs	r0, #0
1a001ac6:	e1eb      	b.n	1a001ea0 <find_volume+0x424>
	fs->fs_type = 0;					/* Clear the filesystem object */
1a001ac8:	2300      	movs	r3, #0
1a001aca:	7023      	strb	r3, [r4, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
1a001acc:	4bb2      	ldr	r3, [pc, #712]	; (1a001d98 <find_volume+0x31c>)
1a001ace:	f813 0016 	ldrb.w	r0, [r3, r6, lsl #1]
1a001ad2:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
1a001ad4:	f004 f987 	bl	1a005de6 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
1a001ad8:	f010 0f01 	tst.w	r0, #1
1a001adc:	f040 81e9 	bne.w	1a001eb2 <find_volume+0x436>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
1a001ae0:	b11f      	cbz	r7, 1a001aea <find_volume+0x6e>
1a001ae2:	f010 0f04 	tst.w	r0, #4
1a001ae6:	f040 81e6 	bne.w	1a001eb6 <find_volume+0x43a>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
1a001aea:	2100      	movs	r1, #0
1a001aec:	4620      	mov	r0, r4
1a001aee:	f7ff ff83 	bl	1a0019f8 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
1a001af2:	2802      	cmp	r0, #2
1a001af4:	f000 8095 	beq.w	1a001c22 <find_volume+0x1a6>
1a001af8:	2801      	cmp	r0, #1
1a001afa:	d975      	bls.n	1a001be8 <find_volume+0x16c>
	bsect = 0;
1a001afc:	2700      	movs	r7, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
1a001afe:	2804      	cmp	r0, #4
1a001b00:	f000 81db 	beq.w	1a001eba <find_volume+0x43e>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
1a001b04:	2801      	cmp	r0, #1
1a001b06:	f200 81da 	bhi.w	1a001ebe <find_volume+0x442>
	if (fmt == 1) {
1a001b0a:	f000 8120 	beq.w	1a001d4e <find_volume+0x2d2>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
1a001b0e:	f104 0043 	add.w	r0, r4, #67	; 0x43
1a001b12:	f7ff fc5f 	bl	1a0013d4 <ld_word>
1a001b16:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
1a001b1a:	f040 81e6 	bne.w	1a001eea <find_volume+0x46e>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
1a001b1e:	f104 004e 	add.w	r0, r4, #78	; 0x4e
1a001b22:	f7ff fc57 	bl	1a0013d4 <ld_word>
1a001b26:	4606      	mov	r6, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
1a001b28:	b920      	cbnz	r0, 1a001b34 <find_volume+0xb8>
1a001b2a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a001b2e:	f7ff fc56 	bl	1a0013de <ld_dword>
1a001b32:	4606      	mov	r6, r0
		fs->fsize = fasize;
1a001b34:	6226      	str	r6, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
1a001b36:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
1a001b3a:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
1a001b3c:	1e53      	subs	r3, r2, #1
1a001b3e:	b2db      	uxtb	r3, r3
1a001b40:	2b01      	cmp	r3, #1
1a001b42:	f200 81d4 	bhi.w	1a001eee <find_volume+0x472>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
1a001b46:	fb06 f502 	mul.w	r5, r6, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
1a001b4a:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
1a001b4e:	f8a4 800a 	strh.w	r8, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
1a001b52:	f1b8 0f00 	cmp.w	r8, #0
1a001b56:	f000 81cc 	beq.w	1a001ef2 <find_volume+0x476>
1a001b5a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a001b5e:	ea18 0f03 	tst.w	r8, r3
1a001b62:	f040 81c8 	bne.w	1a001ef6 <find_volume+0x47a>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
1a001b66:	f104 0049 	add.w	r0, r4, #73	; 0x49
1a001b6a:	f7ff fc33 	bl	1a0013d4 <ld_word>
1a001b6e:	4682      	mov	sl, r0
1a001b70:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
1a001b72:	f010 0f0f 	tst.w	r0, #15
1a001b76:	f040 81c0 	bne.w	1a001efa <find_volume+0x47e>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
1a001b7a:	f104 004b 	add.w	r0, r4, #75	; 0x4b
1a001b7e:	f7ff fc29 	bl	1a0013d4 <ld_word>
1a001b82:	4681      	mov	r9, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
1a001b84:	b920      	cbnz	r0, 1a001b90 <find_volume+0x114>
1a001b86:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a001b8a:	f7ff fc28 	bl	1a0013de <ld_dword>
1a001b8e:	4681      	mov	r9, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
1a001b90:	f104 0046 	add.w	r0, r4, #70	; 0x46
1a001b94:	f7ff fc1e 	bl	1a0013d4 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
1a001b98:	4601      	mov	r1, r0
1a001b9a:	2800      	cmp	r0, #0
1a001b9c:	f000 81af 	beq.w	1a001efe <find_volume+0x482>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
1a001ba0:	1942      	adds	r2, r0, r5
1a001ba2:	eb02 121a 	add.w	r2, r2, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
1a001ba6:	4591      	cmp	r9, r2
1a001ba8:	f0c0 81ab 	bcc.w	1a001f02 <find_volume+0x486>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
1a001bac:	eba9 0302 	sub.w	r3, r9, r2
1a001bb0:	fbb3 f3f8 	udiv	r3, r3, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
1a001bb4:	2b00      	cmp	r3, #0
1a001bb6:	f000 81a6 	beq.w	1a001f06 <find_volume+0x48a>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
1a001bba:	4878      	ldr	r0, [pc, #480]	; (1a001d9c <find_volume+0x320>)
1a001bbc:	4283      	cmp	r3, r0
1a001bbe:	f240 80e5 	bls.w	1a001d8c <find_volume+0x310>
		fmt = 0;
1a001bc2:	f04f 0900 	mov.w	r9, #0
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
1a001bc6:	f64f 70f5 	movw	r0, #65525	; 0xfff5
1a001bca:	4283      	cmp	r3, r0
1a001bcc:	d801      	bhi.n	1a001bd2 <find_volume+0x156>
1a001bce:	f04f 0902 	mov.w	r9, #2
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
1a001bd2:	f640 70f5 	movw	r0, #4085	; 0xff5
1a001bd6:	4283      	cmp	r3, r0
1a001bd8:	f240 80e4 	bls.w	1a001da4 <find_volume+0x328>
		if (fmt == 0) return FR_NO_FILESYSTEM;
1a001bdc:	f1b9 0f00 	cmp.w	r9, #0
1a001be0:	f040 80e2 	bne.w	1a001da8 <find_volume+0x32c>
1a001be4:	200d      	movs	r0, #13
1a001be6:	e15b      	b.n	1a001ea0 <find_volume+0x424>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
1a001be8:	4b6b      	ldr	r3, [pc, #428]	; (1a001d98 <find_volume+0x31c>)
1a001bea:	eb03 0346 	add.w	r3, r3, r6, lsl #1
1a001bee:	785b      	ldrb	r3, [r3, #1]
1a001bf0:	b9cb      	cbnz	r3, 1a001c26 <find_volume+0x1aa>
	bsect = 0;
1a001bf2:	2700      	movs	r7, #0
1a001bf4:	e783      	b.n	1a001afe <find_volume+0x82>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
1a001bf6:	2000      	movs	r0, #0
1a001bf8:	ab04      	add	r3, sp, #16
1a001bfa:	eb03 0385 	add.w	r3, r3, r5, lsl #2
1a001bfe:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
1a001c02:	3501      	adds	r5, #1
1a001c04:	2d03      	cmp	r5, #3
1a001c06:	d810      	bhi.n	1a001c2a <find_volume+0x1ae>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
1a001c08:	f104 0038 	add.w	r0, r4, #56	; 0x38
1a001c0c:	012b      	lsls	r3, r5, #4
1a001c0e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
1a001c12:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
1a001c14:	7903      	ldrb	r3, [r0, #4]
1a001c16:	2b00      	cmp	r3, #0
1a001c18:	d0ed      	beq.n	1a001bf6 <find_volume+0x17a>
1a001c1a:	3008      	adds	r0, #8
1a001c1c:	f7ff fbdf 	bl	1a0013de <ld_dword>
1a001c20:	e7ea      	b.n	1a001bf8 <find_volume+0x17c>
1a001c22:	2500      	movs	r5, #0
1a001c24:	e7ee      	b.n	1a001c04 <find_volume+0x188>
1a001c26:	2500      	movs	r5, #0
1a001c28:	e7ec      	b.n	1a001c04 <find_volume+0x188>
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
1a001c2a:	4b5b      	ldr	r3, [pc, #364]	; (1a001d98 <find_volume+0x31c>)
1a001c2c:	eb03 0346 	add.w	r3, r3, r6, lsl #1
1a001c30:	785d      	ldrb	r5, [r3, #1]
		if (i != 0) i--;
1a001c32:	b19d      	cbz	r5, 1a001c5c <find_volume+0x1e0>
1a001c34:	3d01      	subs	r5, #1
1a001c36:	e011      	b.n	1a001c5c <find_volume+0x1e0>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
1a001c38:	4639      	mov	r1, r7
1a001c3a:	4620      	mov	r0, r4
1a001c3c:	f7ff fedc 	bl	1a0019f8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
1a001c40:	4b55      	ldr	r3, [pc, #340]	; (1a001d98 <find_volume+0x31c>)
1a001c42:	eb03 0346 	add.w	r3, r3, r6, lsl #1
1a001c46:	785b      	ldrb	r3, [r3, #1]
1a001c48:	2b00      	cmp	r3, #0
1a001c4a:	f47f af58 	bne.w	1a001afe <find_volume+0x82>
1a001c4e:	2801      	cmp	r0, #1
1a001c50:	f67f af55 	bls.w	1a001afe <find_volume+0x82>
1a001c54:	3501      	adds	r5, #1
1a001c56:	2d03      	cmp	r5, #3
1a001c58:	f63f af51 	bhi.w	1a001afe <find_volume+0x82>
			bsect = br[i];
1a001c5c:	ab04      	add	r3, sp, #16
1a001c5e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
1a001c62:	f853 7c10 	ldr.w	r7, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
1a001c66:	2f00      	cmp	r7, #0
1a001c68:	d1e6      	bne.n	1a001c38 <find_volume+0x1bc>
1a001c6a:	2003      	movs	r0, #3
1a001c6c:	e7e8      	b.n	1a001c40 <find_volume+0x1c4>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
1a001c6e:	3301      	adds	r3, #1
1a001c70:	2b3f      	cmp	r3, #63	; 0x3f
1a001c72:	d804      	bhi.n	1a001c7e <find_volume+0x202>
1a001c74:	18e2      	adds	r2, r4, r3
1a001c76:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
1a001c7a:	2a00      	cmp	r2, #0
1a001c7c:	d0f7      	beq.n	1a001c6e <find_volume+0x1f2>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
1a001c7e:	2b3f      	cmp	r3, #63	; 0x3f
1a001c80:	f240 811f 	bls.w	1a001ec2 <find_volume+0x446>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
1a001c84:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
1a001c88:	f7ff fba4 	bl	1a0013d4 <ld_word>
1a001c8c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
1a001c90:	f040 8119 	bne.w	1a001ec6 <find_volume+0x44a>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
1a001c94:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
1a001c98:	2b09      	cmp	r3, #9
1a001c9a:	f040 8116 	bne.w	1a001eca <find_volume+0x44e>
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
1a001c9e:	f104 0080 	add.w	r0, r4, #128	; 0x80
1a001ca2:	f7ff fba7 	bl	1a0013f4 <ld_qword>
1a001ca6:	eb10 0807 	adds.w	r8, r0, r7
1a001caa:	f141 0900 	adc.w	r9, r1, #0
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
1a001cae:	f1b9 0f01 	cmp.w	r9, #1
1a001cb2:	bf08      	it	eq
1a001cb4:	f1b8 0f00 	cmpeq.w	r8, #0
1a001cb8:	f080 8109 	bcs.w	1a001ece <find_volume+0x452>
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
1a001cbc:	f104 008c 	add.w	r0, r4, #140	; 0x8c
1a001cc0:	f7ff fb8d 	bl	1a0013de <ld_dword>
1a001cc4:	6220      	str	r0, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
1a001cc6:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
1a001cca:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
1a001ccc:	2b01      	cmp	r3, #1
1a001cce:	f040 8100 	bne.w	1a001ed2 <find_volume+0x456>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
1a001cd2:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
1a001cd6:	2501      	movs	r5, #1
1a001cd8:	409d      	lsls	r5, r3
1a001cda:	b2ad      	uxth	r5, r5
1a001cdc:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
1a001cde:	2d00      	cmp	r5, #0
1a001ce0:	f000 80f9 	beq.w	1a001ed6 <find_volume+0x45a>
		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
1a001ce4:	f104 0094 	add.w	r0, r4, #148	; 0x94
1a001ce8:	f7ff fb79 	bl	1a0013de <ld_dword>
1a001cec:	4682      	mov	sl, r0
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
1a001cee:	4b2c      	ldr	r3, [pc, #176]	; (1a001da0 <find_volume+0x324>)
1a001cf0:	4298      	cmp	r0, r3
1a001cf2:	f200 80f2 	bhi.w	1a001eda <find_volume+0x45e>
		fs->n_fatent = nclst + 2;
1a001cf6:	1c83      	adds	r3, r0, #2
1a001cf8:	61e3      	str	r3, [r4, #28]
		fs->volbase = bsect;
1a001cfa:	6267      	str	r7, [r4, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
1a001cfc:	f104 0090 	add.w	r0, r4, #144	; 0x90
1a001d00:	f7ff fb6d 	bl	1a0013de <ld_dword>
1a001d04:	19c6      	adds	r6, r0, r7
1a001d06:	6326      	str	r6, [r4, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
1a001d08:	f104 0088 	add.w	r0, r4, #136	; 0x88
1a001d0c:	f7ff fb67 	bl	1a0013de <ld_dword>
1a001d10:	4438      	add	r0, r7
1a001d12:	62a0      	str	r0, [r4, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
1a001d14:	fb0a f205 	mul.w	r2, sl, r5
1a001d18:	2100      	movs	r1, #0
1a001d1a:	1992      	adds	r2, r2, r6
1a001d1c:	f141 0300 	adc.w	r3, r1, #0
1a001d20:	4599      	cmp	r9, r3
1a001d22:	bf08      	it	eq
1a001d24:	4590      	cmpeq	r8, r2
1a001d26:	f0c0 80da 	bcc.w	1a001ede <find_volume+0x462>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
1a001d2a:	f104 0098 	add.w	r0, r4, #152	; 0x98
1a001d2e:	f7ff fb56 	bl	1a0013de <ld_dword>
1a001d32:	4601      	mov	r1, r0
1a001d34:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (move_window(fs, clst2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
1a001d36:	4620      	mov	r0, r4
1a001d38:	f7ff fc58 	bl	1a0015ec <clst2sect>
1a001d3c:	4601      	mov	r1, r0
1a001d3e:	4620      	mov	r0, r4
1a001d40:	f7ff fe40 	bl	1a0019c4 <move_window>
1a001d44:	2800      	cmp	r0, #0
1a001d46:	f040 80cc 	bne.w	1a001ee2 <find_volume+0x466>
		for (i = 0; i < SS(fs); i += SZDIRE) {
1a001d4a:	2500      	movs	r5, #0
1a001d4c:	e002      	b.n	1a001d54 <find_volume+0x2d8>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
1a001d4e:	230b      	movs	r3, #11
1a001d50:	e78e      	b.n	1a001c70 <find_volume+0x1f4>
		for (i = 0; i < SS(fs); i += SZDIRE) {
1a001d52:	3520      	adds	r5, #32
1a001d54:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
1a001d58:	d20d      	bcs.n	1a001d76 <find_volume+0x2fa>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
1a001d5a:	1963      	adds	r3, r4, r5
1a001d5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
1a001d60:	2b81      	cmp	r3, #129	; 0x81
1a001d62:	d1f6      	bne.n	1a001d52 <find_volume+0x2d6>
1a001d64:	f104 0338 	add.w	r3, r4, #56	; 0x38
1a001d68:	f105 0014 	add.w	r0, r5, #20
1a001d6c:	4418      	add	r0, r3
1a001d6e:	f7ff fb36 	bl	1a0013de <ld_dword>
1a001d72:	2802      	cmp	r0, #2
1a001d74:	d1ed      	bne.n	1a001d52 <find_volume+0x2d6>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
1a001d76:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
1a001d7a:	f000 80b4 	beq.w	1a001ee6 <find_volume+0x46a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
1a001d7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a001d82:	61a3      	str	r3, [r4, #24]
1a001d84:	6163      	str	r3, [r4, #20]
		fmt = FS_EXFAT;			/* FAT sub-type */
1a001d86:	f04f 0904 	mov.w	r9, #4
1a001d8a:	e037      	b.n	1a001dfc <find_volume+0x380>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
1a001d8c:	f04f 0903 	mov.w	r9, #3
1a001d90:	e719      	b.n	1a001bc6 <find_volume+0x14a>
1a001d92:	bf00      	nop
1a001d94:	10000848 	.word	0x10000848
1a001d98:	10000018 	.word	0x10000018
1a001d9c:	0ffffff5 	.word	0x0ffffff5
1a001da0:	7ffffffd 	.word	0x7ffffffd
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
1a001da4:	f04f 0901 	mov.w	r9, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
1a001da8:	f103 0802 	add.w	r8, r3, #2
1a001dac:	f8c4 801c 	str.w	r8, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
1a001db0:	6267      	str	r7, [r4, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
1a001db2:	19cb      	adds	r3, r1, r7
1a001db4:	62a3      	str	r3, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
1a001db6:	443a      	add	r2, r7
1a001db8:	6322      	str	r2, [r4, #48]	; 0x30
		if (fmt == FS_FAT32) {
1a001dba:	f1b9 0f03 	cmp.w	r9, #3
1a001dbe:	d02b      	beq.n	1a001e18 <find_volume+0x39c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
1a001dc0:	f1ba 0f00 	cmp.w	sl, #0
1a001dc4:	f000 80a5 	beq.w	1a001f12 <find_volume+0x496>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
1a001dc8:	442b      	add	r3, r5
1a001dca:	62e3      	str	r3, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
1a001dcc:	f1b9 0f02 	cmp.w	r9, #2
1a001dd0:	d033      	beq.n	1a001e3a <find_volume+0x3be>
1a001dd2:	eb08 0248 	add.w	r2, r8, r8, lsl #1
1a001dd6:	f008 0301 	and.w	r3, r8, #1
1a001dda:	eb03 0352 	add.w	r3, r3, r2, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
1a001dde:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
1a001de2:	ebb6 2f53 	cmp.w	r6, r3, lsr #9
1a001de6:	f0c0 8096 	bcc.w	1a001f16 <find_volume+0x49a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
1a001dea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a001dee:	61a3      	str	r3, [r4, #24]
1a001df0:	6163      	str	r3, [r4, #20]
		fs->fsi_flag = 0x80;
1a001df2:	2380      	movs	r3, #128	; 0x80
1a001df4:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
1a001df6:	f1b9 0f03 	cmp.w	r9, #3
1a001dfa:	d021      	beq.n	1a001e40 <find_volume+0x3c4>
	fs->fs_type = fmt;		/* FAT sub-type */
1a001dfc:	f884 9000 	strb.w	r9, [r4]
	fs->id = ++Fsid;		/* Volume mount ID */
1a001e00:	4a46      	ldr	r2, [pc, #280]	; (1a001f1c <find_volume+0x4a0>)
1a001e02:	8813      	ldrh	r3, [r2, #0]
1a001e04:	3301      	adds	r3, #1
1a001e06:	b29b      	uxth	r3, r3
1a001e08:	8013      	strh	r3, [r2, #0]
1a001e0a:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
1a001e0c:	4b44      	ldr	r3, [pc, #272]	; (1a001f20 <find_volume+0x4a4>)
1a001e0e:	60e3      	str	r3, [r4, #12]
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
1a001e10:	4b44      	ldr	r3, [pc, #272]	; (1a001f24 <find_volume+0x4a8>)
1a001e12:	6123      	str	r3, [r4, #16]
	return FR_OK;
1a001e14:	2000      	movs	r0, #0
1a001e16:	e043      	b.n	1a001ea0 <find_volume+0x424>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
1a001e18:	f104 0062 	add.w	r0, r4, #98	; 0x62
1a001e1c:	f7ff fada 	bl	1a0013d4 <ld_word>
1a001e20:	2800      	cmp	r0, #0
1a001e22:	d172      	bne.n	1a001f0a <find_volume+0x48e>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
1a001e24:	f1ba 0f00 	cmp.w	sl, #0
1a001e28:	d171      	bne.n	1a001f0e <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
1a001e2a:	f104 0064 	add.w	r0, r4, #100	; 0x64
1a001e2e:	f7ff fad6 	bl	1a0013de <ld_dword>
1a001e32:	62e0      	str	r0, [r4, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
1a001e34:	ea4f 0388 	mov.w	r3, r8, lsl #2
1a001e38:	e7d1      	b.n	1a001dde <find_volume+0x362>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
1a001e3a:	ea4f 0348 	mov.w	r3, r8, lsl #1
1a001e3e:	e7ce      	b.n	1a001dde <find_volume+0x362>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
1a001e40:	f104 0068 	add.w	r0, r4, #104	; 0x68
1a001e44:	f7ff fac6 	bl	1a0013d4 <ld_word>
1a001e48:	2801      	cmp	r0, #1
1a001e4a:	d1d7      	bne.n	1a001dfc <find_volume+0x380>
			&& move_window(fs, bsect + 1) == FR_OK)
1a001e4c:	1c79      	adds	r1, r7, #1
1a001e4e:	4620      	mov	r0, r4
1a001e50:	f7ff fdb8 	bl	1a0019c4 <move_window>
1a001e54:	2800      	cmp	r0, #0
1a001e56:	d1d1      	bne.n	1a001dfc <find_volume+0x380>
			fs->fsi_flag = 0;
1a001e58:	2300      	movs	r3, #0
1a001e5a:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
1a001e5c:	f204 2036 	addw	r0, r4, #566	; 0x236
1a001e60:	f7ff fab8 	bl	1a0013d4 <ld_word>
1a001e64:	f64a 2355 	movw	r3, #43605	; 0xaa55
1a001e68:	4298      	cmp	r0, r3
1a001e6a:	d1c7      	bne.n	1a001dfc <find_volume+0x380>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
1a001e6c:	f104 0038 	add.w	r0, r4, #56	; 0x38
1a001e70:	f7ff fab5 	bl	1a0013de <ld_dword>
1a001e74:	4b2c      	ldr	r3, [pc, #176]	; (1a001f28 <find_volume+0x4ac>)
1a001e76:	4298      	cmp	r0, r3
1a001e78:	d1c0      	bne.n	1a001dfc <find_volume+0x380>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
1a001e7a:	f504 7007 	add.w	r0, r4, #540	; 0x21c
1a001e7e:	f7ff faae 	bl	1a0013de <ld_dword>
1a001e82:	4b2a      	ldr	r3, [pc, #168]	; (1a001f2c <find_volume+0x4b0>)
1a001e84:	4298      	cmp	r0, r3
1a001e86:	d1b9      	bne.n	1a001dfc <find_volume+0x380>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
1a001e88:	f504 7008 	add.w	r0, r4, #544	; 0x220
1a001e8c:	f7ff faa7 	bl	1a0013de <ld_dword>
1a001e90:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
1a001e92:	f504 7009 	add.w	r0, r4, #548	; 0x224
1a001e96:	f7ff faa2 	bl	1a0013de <ld_dword>
1a001e9a:	6160      	str	r0, [r4, #20]
1a001e9c:	e7ae      	b.n	1a001dfc <find_volume+0x380>
	if (vol < 0) return FR_INVALID_DRIVE;
1a001e9e:	200b      	movs	r0, #11
}
1a001ea0:	b004      	add	sp, #16
1a001ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
1a001ea6:	200c      	movs	r0, #12
1a001ea8:	e7fa      	b.n	1a001ea0 <find_volume+0x424>
			return FR_OK;				/* The filesystem object is valid */
1a001eaa:	2000      	movs	r0, #0
1a001eac:	e7f8      	b.n	1a001ea0 <find_volume+0x424>
				return FR_WRITE_PROTECTED;
1a001eae:	200a      	movs	r0, #10
1a001eb0:	e7f6      	b.n	1a001ea0 <find_volume+0x424>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
1a001eb2:	2003      	movs	r0, #3
1a001eb4:	e7f4      	b.n	1a001ea0 <find_volume+0x424>
		return FR_WRITE_PROTECTED;
1a001eb6:	200a      	movs	r0, #10
1a001eb8:	e7f2      	b.n	1a001ea0 <find_volume+0x424>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
1a001eba:	2001      	movs	r0, #1
1a001ebc:	e7f0      	b.n	1a001ea0 <find_volume+0x424>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
1a001ebe:	200d      	movs	r0, #13
1a001ec0:	e7ee      	b.n	1a001ea0 <find_volume+0x424>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
1a001ec2:	200d      	movs	r0, #13
1a001ec4:	e7ec      	b.n	1a001ea0 <find_volume+0x424>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
1a001ec6:	200d      	movs	r0, #13
1a001ec8:	e7ea      	b.n	1a001ea0 <find_volume+0x424>
			return FR_NO_FILESYSTEM;
1a001eca:	200d      	movs	r0, #13
1a001ecc:	e7e8      	b.n	1a001ea0 <find_volume+0x424>
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
1a001ece:	200d      	movs	r0, #13
1a001ed0:	e7e6      	b.n	1a001ea0 <find_volume+0x424>
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
1a001ed2:	200d      	movs	r0, #13
1a001ed4:	e7e4      	b.n	1a001ea0 <find_volume+0x424>
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
1a001ed6:	200d      	movs	r0, #13
1a001ed8:	e7e2      	b.n	1a001ea0 <find_volume+0x424>
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
1a001eda:	200d      	movs	r0, #13
1a001edc:	e7e0      	b.n	1a001ea0 <find_volume+0x424>
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
1a001ede:	200d      	movs	r0, #13
1a001ee0:	e7de      	b.n	1a001ea0 <find_volume+0x424>
		if (move_window(fs, clst2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
1a001ee2:	2001      	movs	r0, #1
1a001ee4:	e7dc      	b.n	1a001ea0 <find_volume+0x424>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
1a001ee6:	200d      	movs	r0, #13
1a001ee8:	e7da      	b.n	1a001ea0 <find_volume+0x424>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
1a001eea:	200d      	movs	r0, #13
1a001eec:	e7d8      	b.n	1a001ea0 <find_volume+0x424>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
1a001eee:	200d      	movs	r0, #13
1a001ef0:	e7d6      	b.n	1a001ea0 <find_volume+0x424>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
1a001ef2:	200d      	movs	r0, #13
1a001ef4:	e7d4      	b.n	1a001ea0 <find_volume+0x424>
1a001ef6:	200d      	movs	r0, #13
1a001ef8:	e7d2      	b.n	1a001ea0 <find_volume+0x424>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
1a001efa:	200d      	movs	r0, #13
1a001efc:	e7d0      	b.n	1a001ea0 <find_volume+0x424>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
1a001efe:	200d      	movs	r0, #13
1a001f00:	e7ce      	b.n	1a001ea0 <find_volume+0x424>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
1a001f02:	200d      	movs	r0, #13
1a001f04:	e7cc      	b.n	1a001ea0 <find_volume+0x424>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
1a001f06:	200d      	movs	r0, #13
1a001f08:	e7ca      	b.n	1a001ea0 <find_volume+0x424>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
1a001f0a:	200d      	movs	r0, #13
1a001f0c:	e7c8      	b.n	1a001ea0 <find_volume+0x424>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
1a001f0e:	200d      	movs	r0, #13
1a001f10:	e7c6      	b.n	1a001ea0 <find_volume+0x424>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
1a001f12:	200d      	movs	r0, #13
1a001f14:	e7c4      	b.n	1a001ea0 <find_volume+0x424>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
1a001f16:	200d      	movs	r0, #13
1a001f18:	e7c2      	b.n	1a001ea0 <find_volume+0x424>
1a001f1a:	bf00      	nop
1a001f1c:	10000850 	.word	0x10000850
1a001f20:	10000854 	.word	0x10000854
1a001f24:	100005e8 	.word	0x100005e8
1a001f28:	41615252 	.word	0x41615252
1a001f2c:	61417272 	.word	0x61417272

1a001f30 <find_bitmap>:
{
1a001f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001f34:	4605      	mov	r5, r0
1a001f36:	4691      	mov	r9, r2
	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
1a001f38:	1e8f      	subs	r7, r1, #2
	if (clst >= fs->n_fatent - 2) clst = 0;
1a001f3a:	69c3      	ldr	r3, [r0, #28]
1a001f3c:	3b02      	subs	r3, #2
1a001f3e:	42bb      	cmp	r3, r7
1a001f40:	d800      	bhi.n	1a001f44 <find_bitmap+0x14>
1a001f42:	2700      	movs	r7, #0
	scl = val = clst; ctr = 0;
1a001f44:	46b8      	mov	r8, r7
1a001f46:	463c      	mov	r4, r7
1a001f48:	2600      	movs	r6, #0
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
1a001f4a:	6b29      	ldr	r1, [r5, #48]	; 0x30
1a001f4c:	eb01 3114 	add.w	r1, r1, r4, lsr #12
1a001f50:	4628      	mov	r0, r5
1a001f52:	f7ff fd37 	bl	1a0019c4 <move_window>
1a001f56:	bb40      	cbnz	r0, 1a001faa <find_bitmap+0x7a>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
1a001f58:	f3c4 00c8 	ubfx	r0, r4, #3, #9
1a001f5c:	f004 0207 	and.w	r2, r4, #7
1a001f60:	2301      	movs	r3, #1
1a001f62:	4093      	lsls	r3, r2
1a001f64:	b2db      	uxtb	r3, r3
1a001f66:	e009      	b.n	1a001f7c <find_bitmap+0x4c>
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
1a001f68:	46a0      	mov	r8, r4
1a001f6a:	2600      	movs	r6, #0
				if (val == clst) return 0;	/* All cluster scanned? */
1a001f6c:	42a7      	cmp	r7, r4
1a001f6e:	d01f      	beq.n	1a001fb0 <find_bitmap+0x80>
			} while (bm != 0);
1a001f70:	b923      	cbnz	r3, 1a001f7c <find_bitmap+0x4c>
		} while (++i < SS(fs));
1a001f72:	3001      	adds	r0, #1
1a001f74:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
1a001f78:	d2e7      	bcs.n	1a001f4a <find_bitmap+0x1a>
			bm = 1;
1a001f7a:	2301      	movs	r3, #1
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
1a001f7c:	182a      	adds	r2, r5, r0
1a001f7e:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
1a001f82:	401a      	ands	r2, r3
1a001f84:	005b      	lsls	r3, r3, #1
1a001f86:	b2db      	uxtb	r3, r3
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
1a001f88:	3401      	adds	r4, #1
1a001f8a:	69e9      	ldr	r1, [r5, #28]
1a001f8c:	3902      	subs	r1, #2
1a001f8e:	42a1      	cmp	r1, r4
1a001f90:	d803      	bhi.n	1a001f9a <find_bitmap+0x6a>
					val = 0; bm = 0; i = SS(fs);
1a001f92:	2400      	movs	r4, #0
1a001f94:	f44f 7000 	mov.w	r0, #512	; 0x200
1a001f98:	4623      	mov	r3, r4
				if (bv == 0) {	/* Is it a free cluster? */
1a001f9a:	2a00      	cmp	r2, #0
1a001f9c:	d1e4      	bne.n	1a001f68 <find_bitmap+0x38>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
1a001f9e:	3601      	adds	r6, #1
1a001fa0:	454e      	cmp	r6, r9
1a001fa2:	d1e3      	bne.n	1a001f6c <find_bitmap+0x3c>
1a001fa4:	f108 0002 	add.w	r0, r8, #2
1a001fa8:	e003      	b.n	1a001fb2 <find_bitmap+0x82>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
1a001faa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001fae:	e000      	b.n	1a001fb2 <find_bitmap+0x82>
				if (val == clst) return 0;	/* All cluster scanned? */
1a001fb0:	2000      	movs	r0, #0
}
1a001fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a001fb6 <change_bitmap>:
{
1a001fb6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001fba:	4606      	mov	r6, r0
1a001fbc:	4617      	mov	r7, r2
1a001fbe:	4698      	mov	r8, r3
	clst -= 2;	/* The first bit corresponds to cluster #2 */
1a001fc0:	1e8c      	subs	r4, r1, #2
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
1a001fc2:	6b01      	ldr	r1, [r0, #48]	; 0x30
1a001fc4:	eb01 3114 	add.w	r1, r1, r4, lsr #12
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
1a001fc8:	f3c4 05c8 	ubfx	r5, r4, #3, #9
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
1a001fcc:	f004 0407 	and.w	r4, r4, #7
1a001fd0:	2301      	movs	r3, #1
1a001fd2:	fa03 f404 	lsl.w	r4, r3, r4
1a001fd6:	b2e4      	uxtb	r4, r4
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
1a001fd8:	f101 0901 	add.w	r9, r1, #1
1a001fdc:	4630      	mov	r0, r6
1a001fde:	f7ff fcf1 	bl	1a0019c4 <move_window>
1a001fe2:	4601      	mov	r1, r0
1a001fe4:	b110      	cbz	r0, 1a001fec <change_bitmap+0x36>
1a001fe6:	2101      	movs	r1, #1
1a001fe8:	e01e      	b.n	1a002028 <change_bitmap+0x72>
			bm = 1;
1a001fea:	2401      	movs	r4, #1
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
1a001fec:	1973      	adds	r3, r6, r5
1a001fee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
1a001ff2:	4223      	tst	r3, r4
1a001ff4:	bf14      	ite	ne
1a001ff6:	2201      	movne	r2, #1
1a001ff8:	2200      	moveq	r2, #0
1a001ffa:	4542      	cmp	r2, r8
1a001ffc:	d013      	beq.n	1a002026 <change_bitmap+0x70>
				fs->win[i] ^= bm;	/* Flip the bit */
1a001ffe:	1972      	adds	r2, r6, r5
1a002000:	4063      	eors	r3, r4
1a002002:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
				fs->wflag = 1;
1a002006:	2301      	movs	r3, #1
1a002008:	70f3      	strb	r3, [r6, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
1a00200a:	3f01      	subs	r7, #1
1a00200c:	d00c      	beq.n	1a002028 <change_bitmap+0x72>
			} while (bm <<= 1);		/* Next bit */
1a00200e:	409c      	lsls	r4, r3
1a002010:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
1a002014:	d1ea      	bne.n	1a001fec <change_bitmap+0x36>
		} while (++i < SS(fs));		/* Next byte */
1a002016:	441d      	add	r5, r3
			bm = 1;
1a002018:	461c      	mov	r4, r3
		} while (++i < SS(fs));		/* Next byte */
1a00201a:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
1a00201e:	d3e4      	bcc.n	1a001fea <change_bitmap+0x34>
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
1a002020:	4649      	mov	r1, r9
		i = 0;
1a002022:	2500      	movs	r5, #0
1a002024:	e7d8      	b.n	1a001fd8 <change_bitmap+0x22>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
1a002026:	2102      	movs	r1, #2
}
1a002028:	4608      	mov	r0, r1
1a00202a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a00202e <put_fat>:
{
1a00202e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
1a002032:	2901      	cmp	r1, #1
1a002034:	f240 8082 	bls.w	1a00213c <put_fat+0x10e>
1a002038:	4605      	mov	r5, r0
1a00203a:	460c      	mov	r4, r1
1a00203c:	4617      	mov	r7, r2
1a00203e:	69c3      	ldr	r3, [r0, #28]
1a002040:	428b      	cmp	r3, r1
1a002042:	d97d      	bls.n	1a002140 <put_fat+0x112>
		switch (fs->fs_type) {
1a002044:	7803      	ldrb	r3, [r0, #0]
1a002046:	3b01      	subs	r3, #1
1a002048:	2b03      	cmp	r3, #3
1a00204a:	d87d      	bhi.n	1a002148 <put_fat+0x11a>
1a00204c:	e8df f003 	tbb	[pc, r3]
1a002050:	53534002 	.word	0x53534002
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
1a002054:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1a002058:	6a81      	ldr	r1, [r0, #40]	; 0x28
1a00205a:	eb01 2158 	add.w	r1, r1, r8, lsr #9
1a00205e:	f7ff fcb1 	bl	1a0019c4 <move_window>
			if (res != FR_OK) break;
1a002062:	4606      	mov	r6, r0
1a002064:	2800      	cmp	r0, #0
1a002066:	d16c      	bne.n	1a002142 <put_fat+0x114>
			p = fs->win + bc++ % SS(fs);
1a002068:	f105 0a38 	add.w	sl, r5, #56	; 0x38
1a00206c:	f108 0901 	add.w	r9, r8, #1
1a002070:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
1a002074:	f014 0401 	ands.w	r4, r4, #1
1a002078:	d01f      	beq.n	1a0020ba <put_fat+0x8c>
1a00207a:	f91a 3008 	ldrsb.w	r3, [sl, r8]
1a00207e:	f003 030f 	and.w	r3, r3, #15
1a002082:	013a      	lsls	r2, r7, #4
1a002084:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
1a002088:	4313      	orrs	r3, r2
1a00208a:	b2db      	uxtb	r3, r3
1a00208c:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
1a002090:	2301      	movs	r3, #1
1a002092:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1a002094:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a002096:	eb01 2159 	add.w	r1, r1, r9, lsr #9
1a00209a:	4628      	mov	r0, r5
1a00209c:	f7ff fc92 	bl	1a0019c4 <move_window>
			if (res != FR_OK) break;
1a0020a0:	4606      	mov	r6, r0
1a0020a2:	2800      	cmp	r0, #0
1a0020a4:	d14d      	bne.n	1a002142 <put_fat+0x114>
			p = fs->win + bc % SS(fs);
1a0020a6:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
1a0020aa:	b144      	cbz	r4, 1a0020be <put_fat+0x90>
1a0020ac:	f3c7 1707 	ubfx	r7, r7, #4, #8
1a0020b0:	f80a 7009 	strb.w	r7, [sl, r9]
			fs->wflag = 1;
1a0020b4:	2301      	movs	r3, #1
1a0020b6:	70eb      	strb	r3, [r5, #3]
			break;
1a0020b8:	e043      	b.n	1a002142 <put_fat+0x114>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
1a0020ba:	b2fb      	uxtb	r3, r7
1a0020bc:	e7e6      	b.n	1a00208c <put_fat+0x5e>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
1a0020be:	f91a 3009 	ldrsb.w	r3, [sl, r9]
1a0020c2:	f023 030f 	bic.w	r3, r3, #15
1a0020c6:	f3c7 2703 	ubfx	r7, r7, #8, #4
1a0020ca:	431f      	orrs	r7, r3
1a0020cc:	b2ff      	uxtb	r7, r7
1a0020ce:	e7ef      	b.n	1a0020b0 <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
1a0020d0:	6a81      	ldr	r1, [r0, #40]	; 0x28
1a0020d2:	eb01 2114 	add.w	r1, r1, r4, lsr #8
1a0020d6:	f7ff fc75 	bl	1a0019c4 <move_window>
			if (res != FR_OK) break;
1a0020da:	4606      	mov	r6, r0
1a0020dc:	bb88      	cbnz	r0, 1a002142 <put_fat+0x114>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
1a0020de:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a0020e2:	0064      	lsls	r4, r4, #1
1a0020e4:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
1a0020e8:	b2b9      	uxth	r1, r7
1a0020ea:	4420      	add	r0, r4
1a0020ec:	f7ff f9d6 	bl	1a00149c <st_word>
			fs->wflag = 1;
1a0020f0:	2301      	movs	r3, #1
1a0020f2:	70eb      	strb	r3, [r5, #3]
			break;
1a0020f4:	e025      	b.n	1a002142 <put_fat+0x114>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
1a0020f6:	6a81      	ldr	r1, [r0, #40]	; 0x28
1a0020f8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
1a0020fc:	f7ff fc62 	bl	1a0019c4 <move_window>
			if (res != FR_OK) break;
1a002100:	4606      	mov	r6, r0
1a002102:	b9f0      	cbnz	r0, 1a002142 <put_fat+0x114>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1a002104:	782b      	ldrb	r3, [r5, #0]
1a002106:	2b04      	cmp	r3, #4
1a002108:	d00c      	beq.n	1a002124 <put_fat+0xf6>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
1a00210a:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
1a00210e:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a002112:	00a3      	lsls	r3, r4, #2
1a002114:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
1a002118:	4418      	add	r0, r3
1a00211a:	f7ff f960 	bl	1a0013de <ld_dword>
1a00211e:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
1a002122:	4307      	orrs	r7, r0
			st_dword(fs->win + clst * 4 % SS(fs), val);
1a002124:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a002128:	00a4      	lsls	r4, r4, #2
1a00212a:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
1a00212e:	4639      	mov	r1, r7
1a002130:	4420      	add	r0, r4
1a002132:	f7ff f9b7 	bl	1a0014a4 <st_dword>
			fs->wflag = 1;
1a002136:	2301      	movs	r3, #1
1a002138:	70eb      	strb	r3, [r5, #3]
			break;
1a00213a:	e002      	b.n	1a002142 <put_fat+0x114>
	FRESULT res = FR_INT_ERR;
1a00213c:	2602      	movs	r6, #2
1a00213e:	e000      	b.n	1a002142 <put_fat+0x114>
1a002140:	2602      	movs	r6, #2
}
1a002142:	4630      	mov	r0, r6
1a002144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	FRESULT res = FR_INT_ERR;
1a002148:	2602      	movs	r6, #2
1a00214a:	e7fa      	b.n	1a002142 <put_fat+0x114>

1a00214c <fill_last_frag>:
{
1a00214c:	b570      	push	{r4, r5, r6, lr}
1a00214e:	4604      	mov	r4, r0
1a002150:	460d      	mov	r5, r1
1a002152:	4616      	mov	r6, r2
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
1a002154:	e007      	b.n	1a002166 <fill_last_frag+0x1a>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
1a002156:	4632      	mov	r2, r6
1a002158:	f7ff ff69 	bl	1a00202e <put_fat>
		if (res != FR_OK) return res;
1a00215c:	4603      	mov	r3, r0
1a00215e:	b958      	cbnz	r0, 1a002178 <fill_last_frag+0x2c>
		obj->n_frag--;
1a002160:	69e3      	ldr	r3, [r4, #28]
1a002162:	3b01      	subs	r3, #1
1a002164:	61e3      	str	r3, [r4, #28]
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
1a002166:	69e3      	ldr	r3, [r4, #28]
1a002168:	b133      	cbz	r3, 1a002178 <fill_last_frag+0x2c>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
1a00216a:	6820      	ldr	r0, [r4, #0]
1a00216c:	1aea      	subs	r2, r5, r3
1a00216e:	1c51      	adds	r1, r2, #1
1a002170:	2b01      	cmp	r3, #1
1a002172:	d9f0      	bls.n	1a002156 <fill_last_frag+0xa>
1a002174:	3202      	adds	r2, #2
1a002176:	e7ef      	b.n	1a002158 <fill_last_frag+0xc>
}
1a002178:	4618      	mov	r0, r3
1a00217a:	bd70      	pop	{r4, r5, r6, pc}

1a00217c <fill_first_frag>:
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
1a00217c:	79c3      	ldrb	r3, [r0, #7]
1a00217e:	2b03      	cmp	r3, #3
1a002180:	d002      	beq.n	1a002188 <fill_first_frag+0xc>
	return FR_OK;
1a002182:	2300      	movs	r3, #0
}
1a002184:	4618      	mov	r0, r3
1a002186:	4770      	bx	lr
{
1a002188:	b570      	push	{r4, r5, r6, lr}
1a00218a:	4606      	mov	r6, r0
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
1a00218c:	6881      	ldr	r1, [r0, #8]
1a00218e:	6984      	ldr	r4, [r0, #24]
1a002190:	b14c      	cbz	r4, 1a0021a6 <fill_first_frag+0x2a>
			res = put_fat(obj->fs, cl, cl + 1);
1a002192:	1c4d      	adds	r5, r1, #1
1a002194:	462a      	mov	r2, r5
1a002196:	6830      	ldr	r0, [r6, #0]
1a002198:	f7ff ff49 	bl	1a00202e <put_fat>
			if (res != FR_OK) return res;
1a00219c:	4603      	mov	r3, r0
1a00219e:	b920      	cbnz	r0, 1a0021aa <fill_first_frag+0x2e>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
1a0021a0:	3c01      	subs	r4, #1
1a0021a2:	4629      	mov	r1, r5
1a0021a4:	e7f4      	b.n	1a002190 <fill_first_frag+0x14>
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
1a0021a6:	2300      	movs	r3, #0
1a0021a8:	71f3      	strb	r3, [r6, #7]
}
1a0021aa:	4618      	mov	r0, r3
1a0021ac:	bd70      	pop	{r4, r5, r6, pc}

1a0021ae <get_fat>:
{
1a0021ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
1a0021b0:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
1a0021b2:	2901      	cmp	r1, #1
1a0021b4:	f240 8095 	bls.w	1a0022e2 <get_fat+0x134>
1a0021b8:	69eb      	ldr	r3, [r5, #28]
1a0021ba:	428b      	cmp	r3, r1
1a0021bc:	f240 8093 	bls.w	1a0022e6 <get_fat+0x138>
1a0021c0:	460c      	mov	r4, r1
		switch (fs->fs_type) {
1a0021c2:	782b      	ldrb	r3, [r5, #0]
1a0021c4:	3b01      	subs	r3, #1
1a0021c6:	2b03      	cmp	r3, #3
1a0021c8:	f200 808f 	bhi.w	1a0022ea <get_fat+0x13c>
1a0021cc:	e8df f003 	tbb	[pc, r3]
1a0021d0:	4e3b2a02 	.word	0x4e3b2a02
			bc = (UINT)clst; bc += bc / 2;
1a0021d4:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1a0021d8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a0021da:	eb01 2156 	add.w	r1, r1, r6, lsr #9
1a0021de:	4628      	mov	r0, r5
1a0021e0:	f7ff fbf0 	bl	1a0019c4 <move_window>
1a0021e4:	2800      	cmp	r0, #0
1a0021e6:	f040 8082 	bne.w	1a0022ee <get_fat+0x140>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
1a0021ea:	1c77      	adds	r7, r6, #1
1a0021ec:	f3c6 0608 	ubfx	r6, r6, #0, #9
1a0021f0:	442e      	add	r6, r5
1a0021f2:	f896 6038 	ldrb.w	r6, [r6, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1a0021f6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a0021f8:	eb01 2157 	add.w	r1, r1, r7, lsr #9
1a0021fc:	4628      	mov	r0, r5
1a0021fe:	f7ff fbe1 	bl	1a0019c4 <move_window>
1a002202:	2800      	cmp	r0, #0
1a002204:	d176      	bne.n	1a0022f4 <get_fat+0x146>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
1a002206:	f3c7 0008 	ubfx	r0, r7, #0, #9
1a00220a:	4428      	add	r0, r5
1a00220c:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
1a002210:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
1a002214:	f014 0f01 	tst.w	r4, #1
1a002218:	d001      	beq.n	1a00221e <get_fat+0x70>
1a00221a:	0900      	lsrs	r0, r0, #4
1a00221c:	e062      	b.n	1a0022e4 <get_fat+0x136>
1a00221e:	f3c0 000b 	ubfx	r0, r0, #0, #12
1a002222:	e05f      	b.n	1a0022e4 <get_fat+0x136>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
1a002224:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a002226:	eb01 2114 	add.w	r1, r1, r4, lsr #8
1a00222a:	4628      	mov	r0, r5
1a00222c:	f7ff fbca 	bl	1a0019c4 <move_window>
1a002230:	2800      	cmp	r0, #0
1a002232:	d162      	bne.n	1a0022fa <get_fat+0x14c>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
1a002234:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a002238:	0064      	lsls	r4, r4, #1
1a00223a:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
1a00223e:	4420      	add	r0, r4
1a002240:	f7ff f8c8 	bl	1a0013d4 <ld_word>
			break;
1a002244:	e04e      	b.n	1a0022e4 <get_fat+0x136>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1a002246:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a002248:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
1a00224c:	4628      	mov	r0, r5
1a00224e:	f7ff fbb9 	bl	1a0019c4 <move_window>
1a002252:	2800      	cmp	r0, #0
1a002254:	d154      	bne.n	1a002300 <get_fat+0x152>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
1a002256:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a00225a:	00a4      	lsls	r4, r4, #2
1a00225c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
1a002260:	4420      	add	r0, r4
1a002262:	f7ff f8bc 	bl	1a0013de <ld_dword>
1a002266:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
1a00226a:	e03b      	b.n	1a0022e4 <get_fat+0x136>
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
1a00226c:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
1a002270:	ea52 0103 	orrs.w	r1, r2, r3
1a002274:	d001      	beq.n	1a00227a <get_fat+0xcc>
1a002276:	6881      	ldr	r1, [r0, #8]
1a002278:	b911      	cbnz	r1, 1a002280 <get_fat+0xd2>
1a00227a:	79c1      	ldrb	r1, [r0, #7]
1a00227c:	2900      	cmp	r1, #0
1a00227e:	d142      	bne.n	1a002306 <get_fat+0x158>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
1a002280:	6881      	ldr	r1, [r0, #8]
1a002282:	1a61      	subs	r1, r4, r1
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
1a002284:	f112 36ff 	adds.w	r6, r2, #4294967295	; 0xffffffff
1a002288:	f143 37ff 	adc.w	r7, r3, #4294967295	; 0xffffffff
1a00228c:	0a72      	lsrs	r2, r6, #9
1a00228e:	ea42 52c7 	orr.w	r2, r2, r7, lsl #23
1a002292:	896b      	ldrh	r3, [r5, #10]
1a002294:	fbb2 f2f3 	udiv	r2, r2, r3
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
1a002298:	79c3      	ldrb	r3, [r0, #7]
1a00229a:	2b02      	cmp	r3, #2
1a00229c:	d017      	beq.n	1a0022ce <get_fat+0x120>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
1a00229e:	2b03      	cmp	r3, #3
1a0022a0:	d01a      	beq.n	1a0022d8 <get_fat+0x12a>
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
1a0022a2:	2b02      	cmp	r3, #2
1a0022a4:	d034      	beq.n	1a002310 <get_fat+0x162>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
1a0022a6:	69c3      	ldr	r3, [r0, #28]
1a0022a8:	bba3      	cbnz	r3, 1a002314 <get_fat+0x166>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1a0022aa:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a0022ac:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
1a0022b0:	4628      	mov	r0, r5
1a0022b2:	f7ff fb87 	bl	1a0019c4 <move_window>
1a0022b6:	bb80      	cbnz	r0, 1a00231a <get_fat+0x16c>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
1a0022b8:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a0022bc:	00a3      	lsls	r3, r4, #2
1a0022be:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
1a0022c2:	4418      	add	r0, r3
1a0022c4:	f7ff f88b 	bl	1a0013de <ld_dword>
1a0022c8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
1a0022cc:	e00a      	b.n	1a0022e4 <get_fat+0x136>
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
1a0022ce:	4291      	cmp	r1, r2
1a0022d0:	d8e5      	bhi.n	1a00229e <get_fat+0xf0>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
1a0022d2:	d01a      	beq.n	1a00230a <get_fat+0x15c>
1a0022d4:	1c60      	adds	r0, r4, #1
1a0022d6:	e005      	b.n	1a0022e4 <get_fat+0x136>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
1a0022d8:	6982      	ldr	r2, [r0, #24]
1a0022da:	428a      	cmp	r2, r1
1a0022dc:	d9e1      	bls.n	1a0022a2 <get_fat+0xf4>
					val = clst + 1; 	/* Generate the value */
1a0022de:	1c60      	adds	r0, r4, #1
					break;
1a0022e0:	e000      	b.n	1a0022e4 <get_fat+0x136>
		val = 1;	/* Internal error */
1a0022e2:	2001      	movs	r0, #1
}
1a0022e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
1a0022e6:	2001      	movs	r0, #1
1a0022e8:	e7fc      	b.n	1a0022e4 <get_fat+0x136>
			val = 1;	/* Internal error */
1a0022ea:	2001      	movs	r0, #1
1a0022ec:	e7fa      	b.n	1a0022e4 <get_fat+0x136>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
1a0022ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0022f2:	e7f7      	b.n	1a0022e4 <get_fat+0x136>
1a0022f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0022f8:	e7f4      	b.n	1a0022e4 <get_fat+0x136>
1a0022fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0022fe:	e7f1      	b.n	1a0022e4 <get_fat+0x136>
1a002300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002304:	e7ee      	b.n	1a0022e4 <get_fat+0x136>
			val = 1;	/* Internal error */
1a002306:	2001      	movs	r0, #1
1a002308:	e7ec      	b.n	1a0022e4 <get_fat+0x136>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
1a00230a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
1a00230e:	e7e9      	b.n	1a0022e4 <get_fat+0x136>
			val = 1;	/* Internal error */
1a002310:	2001      	movs	r0, #1
1a002312:	e7e7      	b.n	1a0022e4 <get_fat+0x136>
						val = 0x7FFFFFFF;	/* Generate EOC */
1a002314:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
1a002318:	e7e4      	b.n	1a0022e4 <get_fat+0x136>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
1a00231a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return val;
1a00231e:	e7e1      	b.n	1a0022e4 <get_fat+0x136>

1a002320 <dir_sdi>:
{
1a002320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002324:	4606      	mov	r6, r0
1a002326:	460d      	mov	r5, r1
	FATFS *fs = dp->obj.fs;
1a002328:	6807      	ldr	r7, [r0, #0]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
1a00232a:	783b      	ldrb	r3, [r7, #0]
1a00232c:	2b04      	cmp	r3, #4
1a00232e:	d023      	beq.n	1a002378 <dir_sdi+0x58>
1a002330:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
1a002334:	42ab      	cmp	r3, r5
1a002336:	d93e      	bls.n	1a0023b6 <dir_sdi+0x96>
1a002338:	f015 0f1f 	tst.w	r5, #31
1a00233c:	d13e      	bne.n	1a0023bc <dir_sdi+0x9c>
	dp->dptr = ofs;				/* Set current offset */
1a00233e:	6335      	str	r5, [r6, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
1a002340:	68b4      	ldr	r4, [r6, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
1a002342:	b92c      	cbnz	r4, 1a002350 <dir_sdi+0x30>
1a002344:	783b      	ldrb	r3, [r7, #0]
1a002346:	2b02      	cmp	r3, #2
1a002348:	d902      	bls.n	1a002350 <dir_sdi+0x30>
		clst = fs->dirbase;
1a00234a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
1a00234c:	2300      	movs	r3, #0
1a00234e:	71f3      	strb	r3, [r6, #7]
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
1a002350:	b9ac      	cbnz	r4, 1a00237e <dir_sdi+0x5e>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
1a002352:	893b      	ldrh	r3, [r7, #8]
1a002354:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
1a002358:	d932      	bls.n	1a0023c0 <dir_sdi+0xa0>
		dp->sect = fs->dirbase;
1a00235a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a00235c:	63b3      	str	r3, [r6, #56]	; 0x38
	dp->clust = clst;					/* Current cluster# */
1a00235e:	6374      	str	r4, [r6, #52]	; 0x34
	if (dp->sect == 0) return FR_INT_ERR;
1a002360:	6bb3      	ldr	r3, [r6, #56]	; 0x38
1a002362:	b3ab      	cbz	r3, 1a0023d0 <dir_sdi+0xb0>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
1a002364:	eb03 2355 	add.w	r3, r3, r5, lsr #9
1a002368:	63b3      	str	r3, [r6, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
1a00236a:	3738      	adds	r7, #56	; 0x38
1a00236c:	f3c5 0508 	ubfx	r5, r5, #0, #9
1a002370:	443d      	add	r5, r7
1a002372:	63f5      	str	r5, [r6, #60]	; 0x3c
	return FR_OK;
1a002374:	2000      	movs	r0, #0
1a002376:	e01f      	b.n	1a0023b8 <dir_sdi+0x98>
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
1a002378:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
1a00237c:	e7da      	b.n	1a002334 <dir_sdi+0x14>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
1a00237e:	f8b7 800a 	ldrh.w	r8, [r7, #10]
1a002382:	ea4f 2848 	mov.w	r8, r8, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
1a002386:	4545      	cmp	r5, r8
1a002388:	d30f      	bcc.n	1a0023aa <dir_sdi+0x8a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
1a00238a:	4621      	mov	r1, r4
1a00238c:	4630      	mov	r0, r6
1a00238e:	f7ff ff0e 	bl	1a0021ae <get_fat>
1a002392:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a002394:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a002398:	d014      	beq.n	1a0023c4 <dir_sdi+0xa4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
1a00239a:	2801      	cmp	r0, #1
1a00239c:	d914      	bls.n	1a0023c8 <dir_sdi+0xa8>
1a00239e:	69fb      	ldr	r3, [r7, #28]
1a0023a0:	4283      	cmp	r3, r0
1a0023a2:	d913      	bls.n	1a0023cc <dir_sdi+0xac>
			ofs -= csz;
1a0023a4:	eba5 0508 	sub.w	r5, r5, r8
1a0023a8:	e7ed      	b.n	1a002386 <dir_sdi+0x66>
		dp->sect = clst2sect(fs, clst);
1a0023aa:	4621      	mov	r1, r4
1a0023ac:	4638      	mov	r0, r7
1a0023ae:	f7ff f91d 	bl	1a0015ec <clst2sect>
1a0023b2:	63b0      	str	r0, [r6, #56]	; 0x38
1a0023b4:	e7d3      	b.n	1a00235e <dir_sdi+0x3e>
		return FR_INT_ERR;
1a0023b6:	2002      	movs	r0, #2
}
1a0023b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INT_ERR;
1a0023bc:	2002      	movs	r0, #2
1a0023be:	e7fb      	b.n	1a0023b8 <dir_sdi+0x98>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
1a0023c0:	2002      	movs	r0, #2
1a0023c2:	e7f9      	b.n	1a0023b8 <dir_sdi+0x98>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a0023c4:	2001      	movs	r0, #1
1a0023c6:	e7f7      	b.n	1a0023b8 <dir_sdi+0x98>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
1a0023c8:	2002      	movs	r0, #2
1a0023ca:	e7f5      	b.n	1a0023b8 <dir_sdi+0x98>
1a0023cc:	2002      	movs	r0, #2
1a0023ce:	e7f3      	b.n	1a0023b8 <dir_sdi+0x98>
	if (dp->sect == 0) return FR_INT_ERR;
1a0023d0:	2002      	movs	r0, #2
1a0023d2:	e7f1      	b.n	1a0023b8 <dir_sdi+0x98>

1a0023d4 <create_chain>:
{
1a0023d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0023d8:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
1a0023da:	6807      	ldr	r7, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
1a0023dc:	4689      	mov	r9, r1
1a0023de:	b931      	cbnz	r1, 1a0023ee <create_chain+0x1a>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
1a0023e0:	697e      	ldr	r6, [r7, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
1a0023e2:	b1a6      	cbz	r6, 1a00240e <create_chain+0x3a>
1a0023e4:	69fb      	ldr	r3, [r7, #28]
1a0023e6:	42b3      	cmp	r3, r6
1a0023e8:	d812      	bhi.n	1a002410 <create_chain+0x3c>
1a0023ea:	2601      	movs	r6, #1
1a0023ec:	e010      	b.n	1a002410 <create_chain+0x3c>
		cs = get_fat(obj, clst);			/* Check the cluster status */
1a0023ee:	f7ff fede 	bl	1a0021ae <get_fat>
1a0023f2:	4605      	mov	r5, r0
		if (cs < 2) return 1;				/* Test for insanity */
1a0023f4:	2801      	cmp	r0, #1
1a0023f6:	f240 80c6 	bls.w	1a002586 <create_chain+0x1b2>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
1a0023fa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0023fe:	f000 80c3 	beq.w	1a002588 <create_chain+0x1b4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
1a002402:	69fb      	ldr	r3, [r7, #28]
1a002404:	4283      	cmp	r3, r0
1a002406:	f200 80bf 	bhi.w	1a002588 <create_chain+0x1b4>
		scl = clst;							/* Cluster to start to find */
1a00240a:	464e      	mov	r6, r9
1a00240c:	e000      	b.n	1a002410 <create_chain+0x3c>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
1a00240e:	2601      	movs	r6, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
1a002410:	69bd      	ldr	r5, [r7, #24]
1a002412:	2d00      	cmp	r5, #0
1a002414:	f000 80b8 	beq.w	1a002588 <create_chain+0x1b4>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1a002418:	783b      	ldrb	r3, [r7, #0]
1a00241a:	2b04      	cmp	r3, #4
1a00241c:	d003      	beq.n	1a002426 <create_chain+0x52>
		if (scl == clst) {						/* Stretching an existing chain? */
1a00241e:	454e      	cmp	r6, r9
1a002420:	d055      	beq.n	1a0024ce <create_chain+0xfa>
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
1a002422:	4634      	mov	r4, r6
1a002424:	e095      	b.n	1a002552 <create_chain+0x17e>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1a002426:	2201      	movs	r2, #1
1a002428:	4631      	mov	r1, r6
1a00242a:	4638      	mov	r0, r7
1a00242c:	f7ff fd80 	bl	1a001f30 <find_bitmap>
1a002430:	4605      	mov	r5, r0
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
1a002432:	1e43      	subs	r3, r0, #1
1a002434:	f113 0f03 	cmn.w	r3, #3
1a002438:	f200 80a6 	bhi.w	1a002588 <create_chain+0x1b4>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
1a00243c:	2301      	movs	r3, #1
1a00243e:	461a      	mov	r2, r3
1a002440:	4601      	mov	r1, r0
1a002442:	4638      	mov	r0, r7
1a002444:	f7ff fdb7 	bl	1a001fb6 <change_bitmap>
1a002448:	4603      	mov	r3, r0
		if (res == FR_INT_ERR) return 1;
1a00244a:	2802      	cmp	r0, #2
1a00244c:	f000 809f 	beq.w	1a00258e <create_chain+0x1ba>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
1a002450:	2801      	cmp	r0, #1
1a002452:	f000 809e 	beq.w	1a002592 <create_chain+0x1be>
		if (clst == 0) {							/* Is it a new chain? */
1a002456:	f1b9 0f00 	cmp.w	r9, #0
1a00245a:	d11e      	bne.n	1a00249a <create_chain+0xc6>
			obj->stat = 2;							/* Set status 'contiguous' */
1a00245c:	2202      	movs	r2, #2
1a00245e:	f888 2007 	strb.w	r2, [r8, #7]
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
1a002462:	f898 2007 	ldrb.w	r2, [r8, #7]
1a002466:	2a02      	cmp	r2, #2
1a002468:	f000 8082 	beq.w	1a002570 <create_chain+0x19c>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
1a00246c:	f109 0201 	add.w	r2, r9, #1
1a002470:	42aa      	cmp	r2, r5
1a002472:	d022      	beq.n	1a0024ba <create_chain+0xe6>
				if (obj->n_frag == 0) obj->n_frag = 1;
1a002474:	f8d8 301c 	ldr.w	r3, [r8, #28]
1a002478:	b913      	cbnz	r3, 1a002480 <create_chain+0xac>
1a00247a:	2301      	movs	r3, #1
1a00247c:	f8c8 301c 	str.w	r3, [r8, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
1a002480:	462a      	mov	r2, r5
1a002482:	4649      	mov	r1, r9
1a002484:	4640      	mov	r0, r8
1a002486:	f7ff fe61 	bl	1a00214c <fill_last_frag>
				if (res == FR_OK) obj->n_frag = 1;
1a00248a:	4603      	mov	r3, r0
1a00248c:	2800      	cmp	r0, #0
1a00248e:	d171      	bne.n	1a002574 <create_chain+0x1a0>
1a002490:	2201      	movs	r2, #1
1a002492:	f8c8 201c 	str.w	r2, [r8, #28]
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1a002496:	462c      	mov	r4, r5
1a002498:	e03e      	b.n	1a002518 <create_chain+0x144>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
1a00249a:	f898 2007 	ldrb.w	r2, [r8, #7]
1a00249e:	2a02      	cmp	r2, #2
1a0024a0:	d1df      	bne.n	1a002462 <create_chain+0x8e>
1a0024a2:	1c72      	adds	r2, r6, #1
1a0024a4:	42aa      	cmp	r2, r5
1a0024a6:	d0dc      	beq.n	1a002462 <create_chain+0x8e>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
1a0024a8:	f8d8 2008 	ldr.w	r2, [r8, #8]
1a0024ac:	1ab2      	subs	r2, r6, r2
1a0024ae:	f8c8 2018 	str.w	r2, [r8, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
1a0024b2:	2203      	movs	r2, #3
1a0024b4:	f888 2007 	strb.w	r2, [r8, #7]
1a0024b8:	e7d3      	b.n	1a002462 <create_chain+0x8e>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
1a0024ba:	f8d8 201c 	ldr.w	r2, [r8, #28]
1a0024be:	b122      	cbz	r2, 1a0024ca <create_chain+0xf6>
1a0024c0:	3201      	adds	r2, #1
1a0024c2:	f8c8 201c 	str.w	r2, [r8, #28]
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1a0024c6:	462c      	mov	r4, r5
1a0024c8:	e026      	b.n	1a002518 <create_chain+0x144>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
1a0024ca:	2202      	movs	r2, #2
1a0024cc:	e7f9      	b.n	1a0024c2 <create_chain+0xee>
			ncl = scl + 1;						/* Test if next cluster is free */
1a0024ce:	1c74      	adds	r4, r6, #1
			if (ncl >= fs->n_fatent) ncl = 2;
1a0024d0:	69fb      	ldr	r3, [r7, #28]
1a0024d2:	42a3      	cmp	r3, r4
1a0024d4:	d800      	bhi.n	1a0024d8 <create_chain+0x104>
1a0024d6:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
1a0024d8:	4621      	mov	r1, r4
1a0024da:	4640      	mov	r0, r8
1a0024dc:	f7ff fe67 	bl	1a0021ae <get_fat>
1a0024e0:	4605      	mov	r5, r0
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
1a0024e2:	2801      	cmp	r0, #1
1a0024e4:	d050      	beq.n	1a002588 <create_chain+0x1b4>
1a0024e6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0024ea:	d04d      	beq.n	1a002588 <create_chain+0x1b4>
			if (cs != 0) {						/* Not free? */
1a0024ec:	b138      	cbz	r0, 1a0024fe <create_chain+0x12a>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
1a0024ee:	697b      	ldr	r3, [r7, #20]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
1a0024f0:	2b01      	cmp	r3, #1
1a0024f2:	d996      	bls.n	1a002422 <create_chain+0x4e>
1a0024f4:	69fa      	ldr	r2, [r7, #28]
1a0024f6:	429a      	cmp	r2, r3
1a0024f8:	d993      	bls.n	1a002422 <create_chain+0x4e>
1a0024fa:	461e      	mov	r6, r3
1a0024fc:	e791      	b.n	1a002422 <create_chain+0x4e>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
1a0024fe:	2c00      	cmp	r4, #0
1a002500:	d08f      	beq.n	1a002422 <create_chain+0x4e>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
1a002502:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a002506:	4621      	mov	r1, r4
1a002508:	4638      	mov	r0, r7
1a00250a:	f7ff fd90 	bl	1a00202e <put_fat>
		if (res == FR_OK && clst != 0) {
1a00250e:	4603      	mov	r3, r0
1a002510:	b910      	cbnz	r0, 1a002518 <create_chain+0x144>
1a002512:	f1b9 0f00 	cmp.w	r9, #0
1a002516:	d124      	bne.n	1a002562 <create_chain+0x18e>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
1a002518:	bb73      	cbnz	r3, 1a002578 <create_chain+0x1a4>
		fs->last_clst = ncl;
1a00251a:	617c      	str	r4, [r7, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
1a00251c:	69ba      	ldr	r2, [r7, #24]
1a00251e:	69fb      	ldr	r3, [r7, #28]
1a002520:	3b02      	subs	r3, #2
1a002522:	429a      	cmp	r2, r3
1a002524:	d801      	bhi.n	1a00252a <create_chain+0x156>
1a002526:	3a01      	subs	r2, #1
1a002528:	61ba      	str	r2, [r7, #24]
		fs->fsi_flag |= 1;
1a00252a:	793b      	ldrb	r3, [r7, #4]
1a00252c:	f043 0301 	orr.w	r3, r3, #1
1a002530:	713b      	strb	r3, [r7, #4]
1a002532:	4625      	mov	r5, r4
1a002534:	e028      	b.n	1a002588 <create_chain+0x1b4>
				cs = get_fat(obj, ncl);			/* Get the cluster status */
1a002536:	4621      	mov	r1, r4
1a002538:	4640      	mov	r0, r8
1a00253a:	f7ff fe38 	bl	1a0021ae <get_fat>
				if (cs == 0) break;				/* Found a free cluster? */
1a00253e:	4605      	mov	r5, r0
1a002540:	2800      	cmp	r0, #0
1a002542:	d0de      	beq.n	1a002502 <create_chain+0x12e>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
1a002544:	2801      	cmp	r0, #1
1a002546:	d01f      	beq.n	1a002588 <create_chain+0x1b4>
1a002548:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00254c:	d01c      	beq.n	1a002588 <create_chain+0x1b4>
				if (ncl == scl) return 0;		/* No free cluster found? */
1a00254e:	42b4      	cmp	r4, r6
1a002550:	d024      	beq.n	1a00259c <create_chain+0x1c8>
				ncl++;							/* Next cluster */
1a002552:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
1a002554:	69fb      	ldr	r3, [r7, #28]
1a002556:	42a3      	cmp	r3, r4
1a002558:	d8ed      	bhi.n	1a002536 <create_chain+0x162>
					if (ncl > scl) return 0;	/* No free cluster found? */
1a00255a:	2e01      	cmp	r6, #1
1a00255c:	d91c      	bls.n	1a002598 <create_chain+0x1c4>
					ncl = 2;
1a00255e:	2402      	movs	r4, #2
1a002560:	e7e9      	b.n	1a002536 <create_chain+0x162>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
1a002562:	4622      	mov	r2, r4
1a002564:	4649      	mov	r1, r9
1a002566:	4638      	mov	r0, r7
1a002568:	f7ff fd61 	bl	1a00202e <put_fat>
1a00256c:	4603      	mov	r3, r0
1a00256e:	e7d3      	b.n	1a002518 <create_chain+0x144>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1a002570:	462c      	mov	r4, r5
1a002572:	e7d1      	b.n	1a002518 <create_chain+0x144>
1a002574:	462c      	mov	r4, r5
1a002576:	e7cf      	b.n	1a002518 <create_chain+0x144>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
1a002578:	2b01      	cmp	r3, #1
1a00257a:	d001      	beq.n	1a002580 <create_chain+0x1ac>
1a00257c:	2501      	movs	r5, #1
1a00257e:	e003      	b.n	1a002588 <create_chain+0x1b4>
1a002580:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a002584:	e000      	b.n	1a002588 <create_chain+0x1b4>
		if (cs < 2) return 1;				/* Test for insanity */
1a002586:	2501      	movs	r5, #1
}
1a002588:	4628      	mov	r0, r5
1a00258a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (res == FR_INT_ERR) return 1;
1a00258e:	2501      	movs	r5, #1
1a002590:	e7fa      	b.n	1a002588 <create_chain+0x1b4>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
1a002592:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a002596:	e7f7      	b.n	1a002588 <create_chain+0x1b4>
					if (ncl > scl) return 0;	/* No free cluster found? */
1a002598:	2500      	movs	r5, #0
1a00259a:	e7f5      	b.n	1a002588 <create_chain+0x1b4>
				if (ncl == scl) return 0;		/* No free cluster found? */
1a00259c:	2500      	movs	r5, #0
1a00259e:	e7f3      	b.n	1a002588 <create_chain+0x1b4>

1a0025a0 <remove_chain>:
{
1a0025a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
1a0025a4:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
1a0025a6:	2901      	cmp	r1, #1
1a0025a8:	f240 8087 	bls.w	1a0026ba <remove_chain+0x11a>
1a0025ac:	4607      	mov	r7, r0
1a0025ae:	460e      	mov	r6, r1
1a0025b0:	4691      	mov	r9, r2
1a0025b2:	69e3      	ldr	r3, [r4, #28]
1a0025b4:	428b      	cmp	r3, r1
1a0025b6:	f240 8082 	bls.w	1a0026be <remove_chain+0x11e>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
1a0025ba:	b172      	cbz	r2, 1a0025da <remove_chain+0x3a>
1a0025bc:	7823      	ldrb	r3, [r4, #0]
1a0025be:	2b04      	cmp	r3, #4
1a0025c0:	d102      	bne.n	1a0025c8 <remove_chain+0x28>
1a0025c2:	79c3      	ldrb	r3, [r0, #7]
1a0025c4:	2b02      	cmp	r3, #2
1a0025c6:	d008      	beq.n	1a0025da <remove_chain+0x3a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
1a0025c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0025cc:	4649      	mov	r1, r9
1a0025ce:	4620      	mov	r0, r4
1a0025d0:	f7ff fd2d 	bl	1a00202e <put_fat>
		if (res != FR_OK) return res;
1a0025d4:	4603      	mov	r3, r0
1a0025d6:	2800      	cmp	r0, #0
1a0025d8:	d172      	bne.n	1a0026c0 <remove_chain+0x120>
{
1a0025da:	46b0      	mov	r8, r6
1a0025dc:	e012      	b.n	1a002604 <remove_chain+0x64>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
1a0025de:	2200      	movs	r2, #0
1a0025e0:	4631      	mov	r1, r6
1a0025e2:	4620      	mov	r0, r4
1a0025e4:	f7ff fd23 	bl	1a00202e <put_fat>
			if (res != FR_OK) return res;
1a0025e8:	4603      	mov	r3, r0
1a0025ea:	b1c8      	cbz	r0, 1a002620 <remove_chain+0x80>
1a0025ec:	e068      	b.n	1a0026c0 <remove_chain+0x120>
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
1a0025ee:	1c73      	adds	r3, r6, #1
1a0025f0:	42ab      	cmp	r3, r5
1a0025f2:	d003      	beq.n	1a0025fc <remove_chain+0x5c>
			if (fs->fs_type == FS_EXFAT) {
1a0025f4:	7823      	ldrb	r3, [r4, #0]
1a0025f6:	2b04      	cmp	r3, #4
1a0025f8:	d01e      	beq.n	1a002638 <remove_chain+0x98>
			scl = ecl = nxt;
1a0025fa:	46a8      	mov	r8, r5
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
1a0025fc:	69e3      	ldr	r3, [r4, #28]
		clst = nxt;					/* Next cluster */
1a0025fe:	462e      	mov	r6, r5
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
1a002600:	42ab      	cmp	r3, r5
1a002602:	d925      	bls.n	1a002650 <remove_chain+0xb0>
		nxt = get_fat(obj, clst);			/* Get cluster status */
1a002604:	4631      	mov	r1, r6
1a002606:	4638      	mov	r0, r7
1a002608:	f7ff fdd1 	bl	1a0021ae <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
1a00260c:	4605      	mov	r5, r0
1a00260e:	b1f8      	cbz	r0, 1a002650 <remove_chain+0xb0>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
1a002610:	2801      	cmp	r0, #1
1a002612:	d058      	beq.n	1a0026c6 <remove_chain+0x126>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
1a002614:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a002618:	d057      	beq.n	1a0026ca <remove_chain+0x12a>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1a00261a:	7823      	ldrb	r3, [r4, #0]
1a00261c:	2b04      	cmp	r3, #4
1a00261e:	d1de      	bne.n	1a0025de <remove_chain+0x3e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
1a002620:	69a2      	ldr	r2, [r4, #24]
1a002622:	69e3      	ldr	r3, [r4, #28]
1a002624:	3b02      	subs	r3, #2
1a002626:	429a      	cmp	r2, r3
1a002628:	d2e1      	bcs.n	1a0025ee <remove_chain+0x4e>
			fs->free_clst++;
1a00262a:	3201      	adds	r2, #1
1a00262c:	61a2      	str	r2, [r4, #24]
			fs->fsi_flag |= 1;
1a00262e:	7923      	ldrb	r3, [r4, #4]
1a002630:	f043 0301 	orr.w	r3, r3, #1
1a002634:	7123      	strb	r3, [r4, #4]
1a002636:	e7da      	b.n	1a0025ee <remove_chain+0x4e>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
1a002638:	eba6 0208 	sub.w	r2, r6, r8
1a00263c:	2300      	movs	r3, #0
1a00263e:	3201      	adds	r2, #1
1a002640:	4641      	mov	r1, r8
1a002642:	4620      	mov	r0, r4
1a002644:	f7ff fcb7 	bl	1a001fb6 <change_bitmap>
				if (res != FR_OK) return res;
1a002648:	4603      	mov	r3, r0
1a00264a:	bbc8      	cbnz	r0, 1a0026c0 <remove_chain+0x120>
			scl = ecl = nxt;
1a00264c:	46a8      	mov	r8, r5
1a00264e:	e7d5      	b.n	1a0025fc <remove_chain+0x5c>
	if (fs->fs_type == FS_EXFAT) {
1a002650:	7823      	ldrb	r3, [r4, #0]
1a002652:	2b04      	cmp	r3, #4
1a002654:	d001      	beq.n	1a00265a <remove_chain+0xba>
	return FR_OK;
1a002656:	2300      	movs	r3, #0
1a002658:	e032      	b.n	1a0026c0 <remove_chain+0x120>
		if (pclst == 0) {	/* Has the entire chain been removed? */
1a00265a:	f1b9 0f00 	cmp.w	r9, #0
1a00265e:	d012      	beq.n	1a002686 <remove_chain+0xe6>
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
1a002660:	79fb      	ldrb	r3, [r7, #7]
1a002662:	b9db      	cbnz	r3, 1a00269c <remove_chain+0xfc>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
1a002664:	68bc      	ldr	r4, [r7, #8]
				while (clst != pclst) {
1a002666:	454c      	cmp	r4, r9
1a002668:	d010      	beq.n	1a00268c <remove_chain+0xec>
					nxt = get_fat(obj, clst);
1a00266a:	4621      	mov	r1, r4
1a00266c:	4638      	mov	r0, r7
1a00266e:	f7ff fd9e 	bl	1a0021ae <get_fat>
					if (nxt < 2) return FR_INT_ERR;
1a002672:	2801      	cmp	r0, #1
1a002674:	d92b      	bls.n	1a0026ce <remove_chain+0x12e>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
1a002676:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00267a:	d02a      	beq.n	1a0026d2 <remove_chain+0x132>
					if (nxt != clst + 1) break;	/* Not contiguous? */
1a00267c:	1c63      	adds	r3, r4, #1
1a00267e:	4283      	cmp	r3, r0
1a002680:	d104      	bne.n	1a00268c <remove_chain+0xec>
					clst++;
1a002682:	461c      	mov	r4, r3
1a002684:	e7ef      	b.n	1a002666 <remove_chain+0xc6>
			obj->stat = 0;		/* Change the chain status 'initial' */
1a002686:	2300      	movs	r3, #0
1a002688:	71fb      	strb	r3, [r7, #7]
1a00268a:	e019      	b.n	1a0026c0 <remove_chain+0x120>
				if (clst == pclst) {	/* Has the chain got contiguous again? */
1a00268c:	454c      	cmp	r4, r9
1a00268e:	d001      	beq.n	1a002694 <remove_chain+0xf4>
	return FR_OK;
1a002690:	2300      	movs	r3, #0
1a002692:	e015      	b.n	1a0026c0 <remove_chain+0x120>
					obj->stat = 2;		/* Change the chain status 'contiguous' */
1a002694:	2302      	movs	r3, #2
1a002696:	71fb      	strb	r3, [r7, #7]
	return FR_OK;
1a002698:	2300      	movs	r3, #0
1a00269a:	e011      	b.n	1a0026c0 <remove_chain+0x120>
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
1a00269c:	2b03      	cmp	r3, #3
1a00269e:	d001      	beq.n	1a0026a4 <remove_chain+0x104>
	return FR_OK;
1a0026a0:	2300      	movs	r3, #0
1a0026a2:	e00d      	b.n	1a0026c0 <remove_chain+0x120>
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
1a0026a4:	68bb      	ldr	r3, [r7, #8]
1a0026a6:	454b      	cmp	r3, r9
1a0026a8:	d815      	bhi.n	1a0026d6 <remove_chain+0x136>
1a0026aa:	69ba      	ldr	r2, [r7, #24]
1a0026ac:	4413      	add	r3, r2
1a0026ae:	454b      	cmp	r3, r9
1a0026b0:	d313      	bcc.n	1a0026da <remove_chain+0x13a>
					obj->stat = 2;	/* Change the chain status 'contiguous' */
1a0026b2:	2302      	movs	r3, #2
1a0026b4:	71fb      	strb	r3, [r7, #7]
	return FR_OK;
1a0026b6:	2300      	movs	r3, #0
1a0026b8:	e002      	b.n	1a0026c0 <remove_chain+0x120>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
1a0026ba:	2302      	movs	r3, #2
1a0026bc:	e000      	b.n	1a0026c0 <remove_chain+0x120>
1a0026be:	2302      	movs	r3, #2
}
1a0026c0:	4618      	mov	r0, r3
1a0026c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
1a0026c6:	2302      	movs	r3, #2
1a0026c8:	e7fa      	b.n	1a0026c0 <remove_chain+0x120>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
1a0026ca:	2301      	movs	r3, #1
1a0026cc:	e7f8      	b.n	1a0026c0 <remove_chain+0x120>
					if (nxt < 2) return FR_INT_ERR;
1a0026ce:	2302      	movs	r3, #2
1a0026d0:	e7f6      	b.n	1a0026c0 <remove_chain+0x120>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
1a0026d2:	2301      	movs	r3, #1
1a0026d4:	e7f4      	b.n	1a0026c0 <remove_chain+0x120>
	return FR_OK;
1a0026d6:	2300      	movs	r3, #0
1a0026d8:	e7f2      	b.n	1a0026c0 <remove_chain+0x120>
1a0026da:	2300      	movs	r3, #0
1a0026dc:	e7f0      	b.n	1a0026c0 <remove_chain+0x120>

1a0026de <dir_clear>:
{
1a0026de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0026e0:	4605      	mov	r5, r0
1a0026e2:	460c      	mov	r4, r1
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
1a0026e4:	f7ff f946 	bl	1a001974 <sync_window>
1a0026e8:	b108      	cbz	r0, 1a0026ee <dir_clear+0x10>
1a0026ea:	2001      	movs	r0, #1
}
1a0026ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sect = clst2sect(fs, clst);		/* Top of the cluster */
1a0026ee:	4621      	mov	r1, r4
1a0026f0:	4628      	mov	r0, r5
1a0026f2:	f7fe ff7b 	bl	1a0015ec <clst2sect>
1a0026f6:	4607      	mov	r7, r0
	fs->winsect = sect;				/* Set window to top of the cluster */
1a0026f8:	6368      	str	r0, [r5, #52]	; 0x34
	mem_set(fs->win, 0, SS(fs));	/* Clear window buffer */
1a0026fa:	f105 0638 	add.w	r6, r5, #56	; 0x38
1a0026fe:	f44f 7200 	mov.w	r2, #512	; 0x200
1a002702:	2100      	movs	r1, #0
1a002704:	4630      	mov	r0, r6
1a002706:	f7fe fef3 	bl	1a0014f0 <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
1a00270a:	2400      	movs	r4, #0
1a00270c:	e000      	b.n	1a002710 <dir_clear+0x32>
1a00270e:	3401      	adds	r4, #1
1a002710:	896b      	ldrh	r3, [r5, #10]
1a002712:	42a3      	cmp	r3, r4
1a002714:	d907      	bls.n	1a002726 <dir_clear+0x48>
1a002716:	2301      	movs	r3, #1
1a002718:	19e2      	adds	r2, r4, r7
1a00271a:	4631      	mov	r1, r6
1a00271c:	7868      	ldrb	r0, [r5, #1]
1a00271e:	f003 fb79 	bl	1a005e14 <disk_write>
1a002722:	2800      	cmp	r0, #0
1a002724:	d0f3      	beq.n	1a00270e <dir_clear+0x30>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
1a002726:	8968      	ldrh	r0, [r5, #10]
1a002728:	1b00      	subs	r0, r0, r4
1a00272a:	bf18      	it	ne
1a00272c:	2001      	movne	r0, #1
1a00272e:	e7dd      	b.n	1a0026ec <dir_clear+0xe>

1a002730 <dir_next>:
{
1a002730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
1a002734:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
1a002736:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
1a002738:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a00273a:	2b00      	cmp	r3, #0
1a00273c:	d056      	beq.n	1a0027ec <dir_next+0xbc>
1a00273e:	3520      	adds	r5, #32
1a002740:	7832      	ldrb	r2, [r6, #0]
1a002742:	2a04      	cmp	r2, #4
1a002744:	d018      	beq.n	1a002778 <dir_next+0x48>
1a002746:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
1a00274a:	42aa      	cmp	r2, r5
1a00274c:	d950      	bls.n	1a0027f0 <dir_next+0xc0>
1a00274e:	4688      	mov	r8, r1
1a002750:	4604      	mov	r4, r0
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
1a002752:	f3c5 0708 	ubfx	r7, r5, #0, #9
1a002756:	b93f      	cbnz	r7, 1a002768 <dir_next+0x38>
		dp->sect++;				/* Next sector */
1a002758:	3301      	adds	r3, #1
1a00275a:	6383      	str	r3, [r0, #56]	; 0x38
		if (dp->clust == 0) {	/* Static table */
1a00275c:	6b41      	ldr	r1, [r0, #52]	; 0x34
1a00275e:	b991      	cbnz	r1, 1a002786 <dir_next+0x56>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
1a002760:	8933      	ldrh	r3, [r6, #8]
1a002762:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
1a002766:	d90a      	bls.n	1a00277e <dir_next+0x4e>
	dp->dptr = ofs;						/* Current entry */
1a002768:	6325      	str	r5, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
1a00276a:	f106 0338 	add.w	r3, r6, #56	; 0x38
1a00276e:	443b      	add	r3, r7
1a002770:	63e3      	str	r3, [r4, #60]	; 0x3c
	return FR_OK;
1a002772:	2000      	movs	r0, #0
}
1a002774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
1a002778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00277c:	e7e5      	b.n	1a00274a <dir_next+0x1a>
				dp->sect = 0; return FR_NO_FILE;
1a00277e:	2300      	movs	r3, #0
1a002780:	6383      	str	r3, [r0, #56]	; 0x38
1a002782:	2004      	movs	r0, #4
1a002784:	e7f6      	b.n	1a002774 <dir_next+0x44>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
1a002786:	8973      	ldrh	r3, [r6, #10]
1a002788:	3b01      	subs	r3, #1
1a00278a:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
1a00278e:	d1eb      	bne.n	1a002768 <dir_next+0x38>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
1a002790:	f7ff fd0d 	bl	1a0021ae <get_fat>
1a002794:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
1a002796:	2801      	cmp	r0, #1
1a002798:	d92c      	bls.n	1a0027f4 <dir_next+0xc4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a00279a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00279e:	d02b      	beq.n	1a0027f8 <dir_next+0xc8>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
1a0027a0:	69f3      	ldr	r3, [r6, #28]
1a0027a2:	4283      	cmp	r3, r0
1a0027a4:	d816      	bhi.n	1a0027d4 <dir_next+0xa4>
					if (!stretch) {								/* If no stretch, report EOT */
1a0027a6:	f1b8 0f00 	cmp.w	r8, #0
1a0027aa:	d01b      	beq.n	1a0027e4 <dir_next+0xb4>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
1a0027ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a0027ae:	4620      	mov	r0, r4
1a0027b0:	f7ff fe10 	bl	1a0023d4 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
1a0027b4:	4681      	mov	r9, r0
1a0027b6:	b308      	cbz	r0, 1a0027fc <dir_next+0xcc>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
1a0027b8:	2801      	cmp	r0, #1
1a0027ba:	d021      	beq.n	1a002800 <dir_next+0xd0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a0027bc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0027c0:	d020      	beq.n	1a002804 <dir_next+0xd4>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
1a0027c2:	4601      	mov	r1, r0
1a0027c4:	4630      	mov	r0, r6
1a0027c6:	f7ff ff8a 	bl	1a0026de <dir_clear>
1a0027ca:	b9e8      	cbnz	r0, 1a002808 <dir_next+0xd8>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
1a0027cc:	79e3      	ldrb	r3, [r4, #7]
1a0027ce:	f043 0304 	orr.w	r3, r3, #4
1a0027d2:	71e3      	strb	r3, [r4, #7]
				dp->clust = clst;		/* Initialize data for new cluster */
1a0027d4:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
				dp->sect = clst2sect(fs, clst);
1a0027d8:	4649      	mov	r1, r9
1a0027da:	4630      	mov	r0, r6
1a0027dc:	f7fe ff06 	bl	1a0015ec <clst2sect>
1a0027e0:	63a0      	str	r0, [r4, #56]	; 0x38
1a0027e2:	e7c1      	b.n	1a002768 <dir_next+0x38>
						dp->sect = 0; return FR_NO_FILE;
1a0027e4:	2300      	movs	r3, #0
1a0027e6:	63a3      	str	r3, [r4, #56]	; 0x38
1a0027e8:	2004      	movs	r0, #4
1a0027ea:	e7c3      	b.n	1a002774 <dir_next+0x44>
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
1a0027ec:	2004      	movs	r0, #4
1a0027ee:	e7c1      	b.n	1a002774 <dir_next+0x44>
1a0027f0:	2004      	movs	r0, #4
1a0027f2:	e7bf      	b.n	1a002774 <dir_next+0x44>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
1a0027f4:	2002      	movs	r0, #2
1a0027f6:	e7bd      	b.n	1a002774 <dir_next+0x44>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a0027f8:	2001      	movs	r0, #1
1a0027fa:	e7bb      	b.n	1a002774 <dir_next+0x44>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
1a0027fc:	2007      	movs	r0, #7
1a0027fe:	e7b9      	b.n	1a002774 <dir_next+0x44>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
1a002800:	2002      	movs	r0, #2
1a002802:	e7b7      	b.n	1a002774 <dir_next+0x44>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a002804:	2001      	movs	r0, #1
1a002806:	e7b5      	b.n	1a002774 <dir_next+0x44>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
1a002808:	2001      	movs	r0, #1
1a00280a:	e7b3      	b.n	1a002774 <dir_next+0x44>

1a00280c <load_xdir>:
{
1a00280c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002810:	4604      	mov	r4, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
1a002812:	6800      	ldr	r0, [r0, #0]
1a002814:	6906      	ldr	r6, [r0, #16]
	res = move_window(dp->obj.fs, dp->sect);
1a002816:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a002818:	f7ff f8d4 	bl	1a0019c4 <move_window>
	if (res != FR_OK) return res;
1a00281c:	4605      	mov	r5, r0
1a00281e:	b920      	cbnz	r0, 1a00282a <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;	/* Invalid order */
1a002820:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1a002822:	780b      	ldrb	r3, [r1, #0]
1a002824:	2b85      	cmp	r3, #133	; 0x85
1a002826:	d003      	beq.n	1a002830 <load_xdir+0x24>
1a002828:	2502      	movs	r5, #2
}
1a00282a:	4628      	mov	r0, r5
1a00282c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mem_cpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
1a002830:	2220      	movs	r2, #32
1a002832:	4630      	mov	r0, r6
1a002834:	f7fe fe53 	bl	1a0014de <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
1a002838:	7877      	ldrb	r7, [r6, #1]
1a00283a:	3701      	adds	r7, #1
1a00283c:	017f      	lsls	r7, r7, #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
1a00283e:	f1a7 0360 	sub.w	r3, r7, #96	; 0x60
1a002842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a002846:	d855      	bhi.n	1a0028f4 <load_xdir+0xe8>
	res = dir_next(dp, 0);
1a002848:	2100      	movs	r1, #0
1a00284a:	4620      	mov	r0, r4
1a00284c:	f7ff ff70 	bl	1a002730 <dir_next>
1a002850:	4605      	mov	r5, r0
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
1a002852:	2804      	cmp	r0, #4
1a002854:	d050      	beq.n	1a0028f8 <load_xdir+0xec>
	if (res != FR_OK) return res;
1a002856:	2800      	cmp	r0, #0
1a002858:	d1e7      	bne.n	1a00282a <load_xdir+0x1e>
	res = move_window(dp->obj.fs, dp->sect);
1a00285a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a00285c:	6820      	ldr	r0, [r4, #0]
1a00285e:	f7ff f8b1 	bl	1a0019c4 <move_window>
	if (res != FR_OK) return res;
1a002862:	4605      	mov	r5, r0
1a002864:	2800      	cmp	r0, #0
1a002866:	d1e0      	bne.n	1a00282a <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;	/* Invalid order */
1a002868:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1a00286a:	780b      	ldrb	r3, [r1, #0]
1a00286c:	2bc0      	cmp	r3, #192	; 0xc0
1a00286e:	d001      	beq.n	1a002874 <load_xdir+0x68>
1a002870:	2502      	movs	r5, #2
1a002872:	e7da      	b.n	1a00282a <load_xdir+0x1e>
	mem_cpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
1a002874:	2220      	movs	r2, #32
1a002876:	18b0      	adds	r0, r6, r2
1a002878:	f7fe fe31 	bl	1a0014de <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
1a00287c:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
1a002880:	332c      	adds	r3, #44	; 0x2c
1a002882:	4a21      	ldr	r2, [pc, #132]	; (1a002908 <load_xdir+0xfc>)
1a002884:	fba2 2303 	umull	r2, r3, r2, r3
1a002888:	08db      	lsrs	r3, r3, #3
1a00288a:	ebb7 1f43 	cmp.w	r7, r3, lsl #5
1a00288e:	d335      	bcc.n	1a0028fc <load_xdir+0xf0>
	i = 2 * SZDIRE;	/* C1 offset to load */
1a002890:	f04f 0840 	mov.w	r8, #64	; 0x40
1a002894:	e003      	b.n	1a00289e <load_xdir+0x92>
	} while ((i += SZDIRE) < sz_ent);
1a002896:	f108 0820 	add.w	r8, r8, #32
1a00289a:	4547      	cmp	r7, r8
1a00289c:	d91c      	bls.n	1a0028d8 <load_xdir+0xcc>
		res = dir_next(dp, 0);
1a00289e:	2100      	movs	r1, #0
1a0028a0:	4620      	mov	r0, r4
1a0028a2:	f7ff ff45 	bl	1a002730 <dir_next>
1a0028a6:	4605      	mov	r5, r0
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
1a0028a8:	2804      	cmp	r0, #4
1a0028aa:	d029      	beq.n	1a002900 <load_xdir+0xf4>
		if (res != FR_OK) return res;
1a0028ac:	2800      	cmp	r0, #0
1a0028ae:	d1bc      	bne.n	1a00282a <load_xdir+0x1e>
		res = move_window(dp->obj.fs, dp->sect);
1a0028b0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a0028b2:	6820      	ldr	r0, [r4, #0]
1a0028b4:	f7ff f886 	bl	1a0019c4 <move_window>
		if (res != FR_OK) return res;
1a0028b8:	4605      	mov	r5, r0
1a0028ba:	2800      	cmp	r0, #0
1a0028bc:	d1b5      	bne.n	1a00282a <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;	/* Invalid order */
1a0028be:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1a0028c0:	780b      	ldrb	r3, [r1, #0]
1a0028c2:	2bc1      	cmp	r3, #193	; 0xc1
1a0028c4:	d11e      	bne.n	1a002904 <load_xdir+0xf8>
		if (i < MAXDIRB(FF_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
1a0028c6:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
1a0028ca:	d2e4      	bcs.n	1a002896 <load_xdir+0x8a>
1a0028cc:	2220      	movs	r2, #32
1a0028ce:	eb06 0008 	add.w	r0, r6, r8
1a0028d2:	f7fe fe04 	bl	1a0014de <mem_cpy>
1a0028d6:	e7de      	b.n	1a002896 <load_xdir+0x8a>
	if (i <= MAXDIRB(FF_MAX_LFN)) {
1a0028d8:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
1a0028dc:	d8a5      	bhi.n	1a00282a <load_xdir+0x1e>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
1a0028de:	4630      	mov	r0, r6
1a0028e0:	f7fe ff9c 	bl	1a00181c <xdir_sum>
1a0028e4:	4604      	mov	r4, r0
1a0028e6:	1cb0      	adds	r0, r6, #2
1a0028e8:	f7fe fd74 	bl	1a0013d4 <ld_word>
1a0028ec:	4284      	cmp	r4, r0
1a0028ee:	d09c      	beq.n	1a00282a <load_xdir+0x1e>
1a0028f0:	2502      	movs	r5, #2
1a0028f2:	e79a      	b.n	1a00282a <load_xdir+0x1e>
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
1a0028f4:	2502      	movs	r5, #2
1a0028f6:	e798      	b.n	1a00282a <load_xdir+0x1e>
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
1a0028f8:	2502      	movs	r5, #2
1a0028fa:	e796      	b.n	1a00282a <load_xdir+0x1e>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
1a0028fc:	2502      	movs	r5, #2
1a0028fe:	e794      	b.n	1a00282a <load_xdir+0x1e>
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
1a002900:	2502      	movs	r5, #2
1a002902:	e792      	b.n	1a00282a <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;	/* Invalid order */
1a002904:	2502      	movs	r5, #2
1a002906:	e790      	b.n	1a00282a <load_xdir+0x1e>
1a002908:	88888889 	.word	0x88888889

1a00290c <load_obj_xdir>:
{
1a00290c:	b510      	push	{r4, lr}
1a00290e:	4604      	mov	r4, r0
	dp->obj.fs = obj->fs;
1a002910:	680b      	ldr	r3, [r1, #0]
1a002912:	6003      	str	r3, [r0, #0]
	dp->obj.sclust = obj->c_scl;
1a002914:	6a0b      	ldr	r3, [r1, #32]
1a002916:	6083      	str	r3, [r0, #8]
	dp->obj.stat = (BYTE)obj->c_size;
1a002918:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
1a00291c:	71c3      	strb	r3, [r0, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
1a00291e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
1a002920:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002924:	2200      	movs	r2, #0
1a002926:	6103      	str	r3, [r0, #16]
1a002928:	6142      	str	r2, [r0, #20]
	dp->obj.n_frag = 0;
1a00292a:	61c2      	str	r2, [r0, #28]
	dp->blk_ofs = obj->c_ofs;
1a00292c:	6a89      	ldr	r1, [r1, #40]	; 0x28
1a00292e:	64c1      	str	r1, [r0, #76]	; 0x4c
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
1a002930:	f7ff fcf6 	bl	1a002320 <dir_sdi>
	if (res == FR_OK) {
1a002934:	4603      	mov	r3, r0
1a002936:	b108      	cbz	r0, 1a00293c <load_obj_xdir+0x30>
}
1a002938:	4618      	mov	r0, r3
1a00293a:	bd10      	pop	{r4, pc}
		res = load_xdir(dp);		/* Load the object's entry block */
1a00293c:	4620      	mov	r0, r4
1a00293e:	f7ff ff65 	bl	1a00280c <load_xdir>
1a002942:	4603      	mov	r3, r0
1a002944:	e7f8      	b.n	1a002938 <load_obj_xdir+0x2c>

1a002946 <dir_read>:
{
1a002946:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00294a:	4604      	mov	r4, r0
1a00294c:	4688      	mov	r8, r1
	FATFS *fs = dp->obj.fs;
1a00294e:	6806      	ldr	r6, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
1a002950:	f04f 09ff 	mov.w	r9, #255	; 0xff
1a002954:	464f      	mov	r7, r9
	FRESULT res = FR_NO_FILE;
1a002956:	2504      	movs	r5, #4
	while (dp->sect) {
1a002958:	e008      	b.n	1a00296c <dir_read+0x26>
				if (c == 0x85) {		/* Start of the file entry block? */
1a00295a:	2b85      	cmp	r3, #133	; 0x85
1a00295c:	d028      	beq.n	1a0029b0 <dir_read+0x6a>
		res = dir_next(dp, 0);		/* Next entry */
1a00295e:	2100      	movs	r1, #0
1a002960:	4620      	mov	r0, r4
1a002962:	f7ff fee5 	bl	1a002730 <dir_next>
		if (res != FR_OK) break;
1a002966:	4605      	mov	r5, r0
1a002968:	2800      	cmp	r0, #0
1a00296a:	d15b      	bne.n	1a002a24 <dir_read+0xde>
	while (dp->sect) {
1a00296c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a00296e:	2900      	cmp	r1, #0
1a002970:	d058      	beq.n	1a002a24 <dir_read+0xde>
		res = move_window(fs, dp->sect);
1a002972:	4630      	mov	r0, r6
1a002974:	f7ff f826 	bl	1a0019c4 <move_window>
		if (res != FR_OK) break;
1a002978:	4605      	mov	r5, r0
1a00297a:	2800      	cmp	r0, #0
1a00297c:	d152      	bne.n	1a002a24 <dir_read+0xde>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
1a00297e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1a002980:	780b      	ldrb	r3, [r1, #0]
		if (c == 0) {
1a002982:	2b00      	cmp	r3, #0
1a002984:	d04d      	beq.n	1a002a22 <dir_read+0xdc>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1a002986:	7832      	ldrb	r2, [r6, #0]
1a002988:	2a04      	cmp	r2, #4
1a00298a:	d0e6      	beq.n	1a00295a <dir_read+0x14>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
1a00298c:	7aca      	ldrb	r2, [r1, #11]
1a00298e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
1a002992:	71a2      	strb	r2, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
1a002994:	2be5      	cmp	r3, #229	; 0xe5
1a002996:	d03e      	beq.n	1a002a16 <dir_read+0xd0>
1a002998:	2b2e      	cmp	r3, #46	; 0x2e
1a00299a:	d03e      	beq.n	1a002a1a <dir_read+0xd4>
1a00299c:	f022 0020 	bic.w	r0, r2, #32
1a0029a0:	2808      	cmp	r0, #8
1a0029a2:	bf14      	ite	ne
1a0029a4:	2000      	movne	r0, #0
1a0029a6:	2001      	moveq	r0, #1
1a0029a8:	4540      	cmp	r0, r8
1a0029aa:	d00e      	beq.n	1a0029ca <dir_read+0x84>
				ord = 0xFF;
1a0029ac:	27ff      	movs	r7, #255	; 0xff
1a0029ae:	e7d6      	b.n	1a00295e <dir_read+0x18>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
1a0029b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a0029b2:	64e3      	str	r3, [r4, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
1a0029b4:	4620      	mov	r0, r4
1a0029b6:	f7ff ff29 	bl	1a00280c <load_xdir>
					if (res == FR_OK) {
1a0029ba:	4605      	mov	r5, r0
1a0029bc:	bb90      	cbnz	r0, 1a002a24 <dir_read+0xde>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
1a0029be:	6933      	ldr	r3, [r6, #16]
1a0029c0:	791b      	ldrb	r3, [r3, #4]
1a0029c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
1a0029c6:	71a3      	strb	r3, [r4, #6]
1a0029c8:	e02c      	b.n	1a002a24 <dir_read+0xde>
				if (a == AM_LFN) {			/* An LFN entry is found */
1a0029ca:	2a0f      	cmp	r2, #15
1a0029cc:	d119      	bne.n	1a002a02 <dir_read+0xbc>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
1a0029ce:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0029d2:	d006      	beq.n	1a0029e2 <dir_read+0x9c>
						sum = dp->dir[LDIR_Chksum];
1a0029d4:	f891 900d 	ldrb.w	r9, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
1a0029d8:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
1a0029dc:	6b22      	ldr	r2, [r4, #48]	; 0x30
1a0029de:	64e2      	str	r2, [r4, #76]	; 0x4c
						c &= (BYTE)~LLEF; ord = c;
1a0029e0:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
1a0029e2:	42bb      	cmp	r3, r7
1a0029e4:	d001      	beq.n	1a0029ea <dir_read+0xa4>
1a0029e6:	27ff      	movs	r7, #255	; 0xff
1a0029e8:	e7b9      	b.n	1a00295e <dir_read+0x18>
1a0029ea:	7b4b      	ldrb	r3, [r1, #13]
1a0029ec:	454b      	cmp	r3, r9
1a0029ee:	d001      	beq.n	1a0029f4 <dir_read+0xae>
1a0029f0:	27ff      	movs	r7, #255	; 0xff
1a0029f2:	e7b4      	b.n	1a00295e <dir_read+0x18>
1a0029f4:	68f0      	ldr	r0, [r6, #12]
1a0029f6:	f7fe fe2b 	bl	1a001650 <pick_lfn>
1a0029fa:	b180      	cbz	r0, 1a002a1e <dir_read+0xd8>
1a0029fc:	3f01      	subs	r7, #1
1a0029fe:	b2ff      	uxtb	r7, r7
1a002a00:	e7ad      	b.n	1a00295e <dir_read+0x18>
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
1a002a02:	b927      	cbnz	r7, 1a002a0e <dir_read+0xc8>
1a002a04:	4608      	mov	r0, r1
1a002a06:	f7fe fefb 	bl	1a001800 <sum_sfn>
1a002a0a:	4548      	cmp	r0, r9
1a002a0c:	d00a      	beq.n	1a002a24 <dir_read+0xde>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
1a002a0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a002a12:	64e3      	str	r3, [r4, #76]	; 0x4c
1a002a14:	e006      	b.n	1a002a24 <dir_read+0xde>
				ord = 0xFF;
1a002a16:	27ff      	movs	r7, #255	; 0xff
1a002a18:	e7a1      	b.n	1a00295e <dir_read+0x18>
1a002a1a:	27ff      	movs	r7, #255	; 0xff
1a002a1c:	e79f      	b.n	1a00295e <dir_read+0x18>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
1a002a1e:	27ff      	movs	r7, #255	; 0xff
1a002a20:	e79d      	b.n	1a00295e <dir_read+0x18>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
1a002a22:	2504      	movs	r5, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
1a002a24:	b10d      	cbz	r5, 1a002a2a <dir_read+0xe4>
1a002a26:	2300      	movs	r3, #0
1a002a28:	63a3      	str	r3, [r4, #56]	; 0x38
}
1a002a2a:	4628      	mov	r0, r5
1a002a2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a002a30 <dir_alloc>:
{
1a002a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002a32:	4604      	mov	r4, r0
1a002a34:	460f      	mov	r7, r1
	FATFS *fs = dp->obj.fs;
1a002a36:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
1a002a38:	2100      	movs	r1, #0
1a002a3a:	f7ff fc71 	bl	1a002320 <dir_sdi>
	if (res == FR_OK) {
1a002a3e:	4602      	mov	r2, r0
1a002a40:	bb30      	cbnz	r0, 1a002a90 <dir_alloc+0x60>
		n = 0;
1a002a42:	2500      	movs	r5, #0
1a002a44:	e00e      	b.n	1a002a64 <dir_alloc+0x34>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
1a002a46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a002a48:	f993 3000 	ldrsb.w	r3, [r3]
1a002a4c:	43db      	mvns	r3, r3
1a002a4e:	0fdb      	lsrs	r3, r3, #31
1a002a50:	b1e3      	cbz	r3, 1a002a8c <dir_alloc+0x5c>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
1a002a52:	3501      	adds	r5, #1
1a002a54:	42bd      	cmp	r5, r7
1a002a56:	d01b      	beq.n	1a002a90 <dir_alloc+0x60>
			res = dir_next(dp, 1);
1a002a58:	2101      	movs	r1, #1
1a002a5a:	4620      	mov	r0, r4
1a002a5c:	f7ff fe68 	bl	1a002730 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
1a002a60:	4602      	mov	r2, r0
1a002a62:	b9a8      	cbnz	r0, 1a002a90 <dir_alloc+0x60>
			res = move_window(fs, dp->sect);
1a002a64:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a002a66:	4630      	mov	r0, r6
1a002a68:	f7fe ffac 	bl	1a0019c4 <move_window>
			if (res != FR_OK) break;
1a002a6c:	4602      	mov	r2, r0
1a002a6e:	b978      	cbnz	r0, 1a002a90 <dir_alloc+0x60>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
1a002a70:	7833      	ldrb	r3, [r6, #0]
1a002a72:	2b04      	cmp	r3, #4
1a002a74:	d0e7      	beq.n	1a002a46 <dir_alloc+0x16>
1a002a76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a002a78:	781b      	ldrb	r3, [r3, #0]
1a002a7a:	2be5      	cmp	r3, #229	; 0xe5
1a002a7c:	d002      	beq.n	1a002a84 <dir_alloc+0x54>
1a002a7e:	b91b      	cbnz	r3, 1a002a88 <dir_alloc+0x58>
1a002a80:	2301      	movs	r3, #1
1a002a82:	e7e5      	b.n	1a002a50 <dir_alloc+0x20>
1a002a84:	2301      	movs	r3, #1
1a002a86:	e7e3      	b.n	1a002a50 <dir_alloc+0x20>
1a002a88:	2300      	movs	r3, #0
1a002a8a:	e7e1      	b.n	1a002a50 <dir_alloc+0x20>
				n = 0;					/* Not a blank entry. Restart to search */
1a002a8c:	2500      	movs	r5, #0
1a002a8e:	e7e3      	b.n	1a002a58 <dir_alloc+0x28>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
1a002a90:	2a04      	cmp	r2, #4
1a002a92:	d001      	beq.n	1a002a98 <dir_alloc+0x68>
}
1a002a94:	4610      	mov	r0, r2
1a002a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
1a002a98:	2207      	movs	r2, #7
1a002a9a:	e7fb      	b.n	1a002a94 <dir_alloc+0x64>

1a002a9c <store_xdir>:
{
1a002a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002a9e:	4604      	mov	r4, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
1a002aa0:	6803      	ldr	r3, [r0, #0]
1a002aa2:	691e      	ldr	r6, [r3, #16]
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
1a002aa4:	4630      	mov	r0, r6
1a002aa6:	f7fe feb9 	bl	1a00181c <xdir_sum>
1a002aaa:	4601      	mov	r1, r0
1a002aac:	1cb0      	adds	r0, r6, #2
1a002aae:	f7fe fcf5 	bl	1a00149c <st_word>
	nent = dirb[XDIR_NumSec] + 1;
1a002ab2:	7877      	ldrb	r7, [r6, #1]
1a002ab4:	3701      	adds	r7, #1
	res = dir_sdi(dp, dp->blk_ofs);
1a002ab6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
1a002ab8:	4620      	mov	r0, r4
1a002aba:	f7ff fc31 	bl	1a002320 <dir_sdi>
1a002abe:	4605      	mov	r5, r0
	while (res == FR_OK) {
1a002ac0:	b9b5      	cbnz	r5, 1a002af0 <store_xdir+0x54>
		res = move_window(dp->obj.fs, dp->sect);
1a002ac2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a002ac4:	6820      	ldr	r0, [r4, #0]
1a002ac6:	f7fe ff7d 	bl	1a0019c4 <move_window>
		if (res != FR_OK) break;
1a002aca:	4605      	mov	r5, r0
1a002acc:	b980      	cbnz	r0, 1a002af0 <store_xdir+0x54>
		mem_cpy(dp->dir, dirb, SZDIRE);
1a002ace:	2220      	movs	r2, #32
1a002ad0:	4631      	mov	r1, r6
1a002ad2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a002ad4:	f7fe fd03 	bl	1a0014de <mem_cpy>
		dp->obj.fs->wflag = 1;
1a002ad8:	6823      	ldr	r3, [r4, #0]
1a002ada:	2201      	movs	r2, #1
1a002adc:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
1a002ade:	3f01      	subs	r7, #1
1a002ae0:	d006      	beq.n	1a002af0 <store_xdir+0x54>
		dirb += SZDIRE;
1a002ae2:	3620      	adds	r6, #32
		res = dir_next(dp, 0);
1a002ae4:	2100      	movs	r1, #0
1a002ae6:	4620      	mov	r0, r4
1a002ae8:	f7ff fe22 	bl	1a002730 <dir_next>
1a002aec:	4605      	mov	r5, r0
1a002aee:	e7e7      	b.n	1a002ac0 <store_xdir+0x24>
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
1a002af0:	2d02      	cmp	r5, #2
1a002af2:	bf28      	it	cs
1a002af4:	2502      	movcs	r5, #2
}
1a002af6:	b2e8      	uxtb	r0, r5
1a002af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002afa:	Address 0x000000001a002afa is out of bounds.


1a002afc <create_name>:
{
1a002afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002b00:	b085      	sub	sp, #20
1a002b02:	4680      	mov	r8, r0
1a002b04:	460f      	mov	r7, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
1a002b06:	680b      	ldr	r3, [r1, #0]
1a002b08:	9303      	str	r3, [sp, #12]
1a002b0a:	6803      	ldr	r3, [r0, #0]
1a002b0c:	68dd      	ldr	r5, [r3, #12]
1a002b0e:	2400      	movs	r4, #0
1a002b10:	e00e      	b.n	1a002b30 <create_name+0x34>
		wc = (WCHAR)uc;
1a002b12:	b286      	uxth	r6, r0
		if (wc < ' ' || wc == '/' || wc == '\\') break;	/* Break if end of the path or a separator is found */
1a002b14:	2e1f      	cmp	r6, #31
1a002b16:	d924      	bls.n	1a002b62 <create_name+0x66>
1a002b18:	2e2f      	cmp	r6, #47	; 0x2f
1a002b1a:	d022      	beq.n	1a002b62 <create_name+0x66>
1a002b1c:	2e5c      	cmp	r6, #92	; 0x5c
1a002b1e:	d020      	beq.n	1a002b62 <create_name+0x66>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
1a002b20:	2e7f      	cmp	r6, #127	; 0x7f
1a002b22:	d914      	bls.n	1a002b4e <create_name+0x52>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
1a002b24:	2cfe      	cmp	r4, #254	; 0xfe
1a002b26:	f200 8101 	bhi.w	1a002d2c <create_name+0x230>
		lfn[di++] = wc;					/* Store the Unicode character */
1a002b2a:	f825 6014 	strh.w	r6, [r5, r4, lsl #1]
1a002b2e:	3401      	adds	r4, #1
		uc = tchar2uni(&p);			/* Get a character */
1a002b30:	a803      	add	r0, sp, #12
1a002b32:	f7fe fcfb 	bl	1a00152c <tchar2uni>
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
1a002b36:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a002b3a:	f000 80f5 	beq.w	1a002d28 <create_name+0x22c>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
1a002b3e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
1a002b42:	d3e6      	bcc.n	1a002b12 <create_name+0x16>
1a002b44:	0c03      	lsrs	r3, r0, #16
1a002b46:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
1a002b4a:	3401      	adds	r4, #1
1a002b4c:	e7e1      	b.n	1a002b12 <create_name+0x16>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
1a002b4e:	4631      	mov	r1, r6
1a002b50:	4878      	ldr	r0, [pc, #480]	; (1a002d34 <create_name+0x238>)
1a002b52:	f7fe fce1 	bl	1a001518 <chk_chr>
1a002b56:	2800      	cmp	r0, #0
1a002b58:	d0e4      	beq.n	1a002b24 <create_name+0x28>
1a002b5a:	2006      	movs	r0, #6
1a002b5c:	e08f      	b.n	1a002c7e <create_name+0x182>
	while (*p == '/' || *p == '\\') p++;	/* Skip duplicated separators if exist */
1a002b5e:	3301      	adds	r3, #1
1a002b60:	9303      	str	r3, [sp, #12]
1a002b62:	9b03      	ldr	r3, [sp, #12]
1a002b64:	781a      	ldrb	r2, [r3, #0]
1a002b66:	2a2f      	cmp	r2, #47	; 0x2f
1a002b68:	d0f9      	beq.n	1a002b5e <create_name+0x62>
1a002b6a:	2a5c      	cmp	r2, #92	; 0x5c
1a002b6c:	d0f7      	beq.n	1a002b5e <create_name+0x62>
	*path = p;							/* Return pointer to the next segment */
1a002b6e:	603b      	str	r3, [r7, #0]
	cf = (wc < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
1a002b70:	2e1f      	cmp	r6, #31
1a002b72:	d801      	bhi.n	1a002b78 <create_name+0x7c>
1a002b74:	2704      	movs	r7, #4
1a002b76:	e002      	b.n	1a002b7e <create_name+0x82>
1a002b78:	2700      	movs	r7, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
1a002b7a:	e000      	b.n	1a002b7e <create_name+0x82>
		di--;
1a002b7c:	3c01      	subs	r4, #1
	while (di) {						/* Snip off trailing spaces and dots if exist */
1a002b7e:	b144      	cbz	r4, 1a002b92 <create_name+0x96>
		wc = lfn[di - 1];
1a002b80:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
1a002b84:	3b01      	subs	r3, #1
1a002b86:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (wc != ' ' && wc != '.') break;
1a002b8a:	2b20      	cmp	r3, #32
1a002b8c:	d0f6      	beq.n	1a002b7c <create_name+0x80>
1a002b8e:	2b2e      	cmp	r3, #46	; 0x2e
1a002b90:	d0f4      	beq.n	1a002b7c <create_name+0x80>
	lfn[di] = 0;							/* LFN is created into the working buffer */
1a002b92:	2300      	movs	r3, #0
1a002b94:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
1a002b98:	2c00      	cmp	r4, #0
1a002b9a:	f000 80c9 	beq.w	1a002d30 <create_name+0x234>
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
1a002b9e:	461e      	mov	r6, r3
1a002ba0:	e000      	b.n	1a002ba4 <create_name+0xa8>
1a002ba2:	3601      	adds	r6, #1
1a002ba4:	f835 3016 	ldrh.w	r3, [r5, r6, lsl #1]
1a002ba8:	2b20      	cmp	r3, #32
1a002baa:	d0fa      	beq.n	1a002ba2 <create_name+0xa6>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
1a002bac:	b90e      	cbnz	r6, 1a002bb2 <create_name+0xb6>
1a002bae:	2b2e      	cmp	r3, #46	; 0x2e
1a002bb0:	d101      	bne.n	1a002bb6 <create_name+0xba>
1a002bb2:	f047 0703 	orr.w	r7, r7, #3
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
1a002bb6:	b144      	cbz	r4, 1a002bca <create_name+0xce>
1a002bb8:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
1a002bbc:	3b01      	subs	r3, #1
1a002bbe:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
1a002bc2:	2b2e      	cmp	r3, #46	; 0x2e
1a002bc4:	d001      	beq.n	1a002bca <create_name+0xce>
1a002bc6:	3c01      	subs	r4, #1
1a002bc8:	e7f5      	b.n	1a002bb6 <create_name+0xba>
	mem_set(dp->fn, ' ', 11);
1a002bca:	220b      	movs	r2, #11
1a002bcc:	2120      	movs	r1, #32
1a002bce:	f108 0040 	add.w	r0, r8, #64	; 0x40
1a002bd2:	f7fe fc8d 	bl	1a0014f0 <mem_set>
	i = b = 0; ni = 8;
1a002bd6:	f04f 0b08 	mov.w	fp, #8
1a002bda:	2300      	movs	r3, #0
1a002bdc:	9301      	str	r3, [sp, #4]
1a002bde:	469a      	mov	sl, r3
		wc = lfn[si++];					/* Get an LFN character */
1a002be0:	f106 0901 	add.w	r9, r6, #1
1a002be4:	f835 6016 	ldrh.w	r6, [r5, r6, lsl #1]
		if (wc == 0) break;				/* Break on end of the LFN */
1a002be8:	b346      	cbz	r6, 1a002c3c <create_name+0x140>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
1a002bea:	2e20      	cmp	r6, #32
1a002bec:	d019      	beq.n	1a002c22 <create_name+0x126>
1a002bee:	2e2e      	cmp	r6, #46	; 0x2e
1a002bf0:	d015      	beq.n	1a002c1e <create_name+0x122>
		if (i >= ni || si == di) {		/* End of field? */
1a002bf2:	9b01      	ldr	r3, [sp, #4]
1a002bf4:	455b      	cmp	r3, fp
1a002bf6:	d218      	bcs.n	1a002c2a <create_name+0x12e>
1a002bf8:	454c      	cmp	r4, r9
1a002bfa:	d016      	beq.n	1a002c2a <create_name+0x12e>
		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
1a002bfc:	2e7f      	cmp	r6, #127	; 0x7f
1a002bfe:	d84e      	bhi.n	1a002c9e <create_name+0x1a2>
		if (wc >= 0x100) {				/* Is this a DBC? */
1a002c00:	2eff      	cmp	r6, #255	; 0xff
1a002c02:	d962      	bls.n	1a002cca <create_name+0x1ce>
			if (i >= ni - 1) {			/* Field overflow? */
1a002c04:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
1a002c08:	9a01      	ldr	r2, [sp, #4]
1a002c0a:	4293      	cmp	r3, r2
1a002c0c:	d957      	bls.n	1a002cbe <create_name+0x1c2>
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
1a002c0e:	9901      	ldr	r1, [sp, #4]
1a002c10:	1c4b      	adds	r3, r1, #1
1a002c12:	f3c6 2207 	ubfx	r2, r6, #8, #8
1a002c16:	4441      	add	r1, r8
1a002c18:	f881 2040 	strb.w	r2, [r1, #64]	; 0x40
1a002c1c:	e05a      	b.n	1a002cd4 <create_name+0x1d8>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
1a002c1e:	454c      	cmp	r4, r9
1a002c20:	d0e7      	beq.n	1a002bf2 <create_name+0xf6>
			cf |= NS_LOSS | NS_LFN;
1a002c22:	f047 0703 	orr.w	r7, r7, #3
		wc = lfn[si++];					/* Get an LFN character */
1a002c26:	464e      	mov	r6, r9
			continue;
1a002c28:	e7da      	b.n	1a002be0 <create_name+0xe4>
			if (ni == 11) {				/* Name extension overflow? */
1a002c2a:	f1bb 0f0b 	cmp.w	fp, #11
1a002c2e:	d029      	beq.n	1a002c84 <create_name+0x188>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
1a002c30:	454c      	cmp	r4, r9
1a002c32:	d001      	beq.n	1a002c38 <create_name+0x13c>
1a002c34:	f047 0703 	orr.w	r7, r7, #3
			if (si > di) break;						/* No name extension? */
1a002c38:	454c      	cmp	r4, r9
1a002c3a:	d226      	bcs.n	1a002c8a <create_name+0x18e>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
1a002c3c:	f898 3040 	ldrb.w	r3, [r8, #64]	; 0x40
1a002c40:	2be5      	cmp	r3, #229	; 0xe5
1a002c42:	d068      	beq.n	1a002d16 <create_name+0x21a>
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
1a002c44:	f1bb 0f08 	cmp.w	fp, #8
1a002c48:	d069      	beq.n	1a002d1e <create_name+0x222>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
1a002c4a:	f00a 030c 	and.w	r3, sl, #12
1a002c4e:	2b0c      	cmp	r3, #12
1a002c50:	d003      	beq.n	1a002c5a <create_name+0x15e>
1a002c52:	f00a 0303 	and.w	r3, sl, #3
1a002c56:	2b03      	cmp	r3, #3
1a002c58:	d101      	bne.n	1a002c5e <create_name+0x162>
1a002c5a:	f047 0702 	orr.w	r7, r7, #2
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
1a002c5e:	f017 0f02 	tst.w	r7, #2
1a002c62:	d109      	bne.n	1a002c78 <create_name+0x17c>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
1a002c64:	f01a 0f01 	tst.w	sl, #1
1a002c68:	d001      	beq.n	1a002c6e <create_name+0x172>
1a002c6a:	f047 0710 	orr.w	r7, r7, #16
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
1a002c6e:	f01a 0f04 	tst.w	sl, #4
1a002c72:	d001      	beq.n	1a002c78 <create_name+0x17c>
1a002c74:	f047 0708 	orr.w	r7, r7, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
1a002c78:	f888 704b 	strb.w	r7, [r8, #75]	; 0x4b
	return FR_OK;
1a002c7c:	2000      	movs	r0, #0
}
1a002c7e:	b005      	add	sp, #20
1a002c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN;
1a002c84:	f047 0703 	orr.w	r7, r7, #3
				break;
1a002c88:	e7d8      	b.n	1a002c3c <create_name+0x140>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
1a002c8a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
1a002c8e:	fa5f fa8a 	uxtb.w	sl, sl
1a002c92:	4626      	mov	r6, r4
1a002c94:	f04f 0b0b 	mov.w	fp, #11
1a002c98:	2308      	movs	r3, #8
1a002c9a:	9301      	str	r3, [sp, #4]
			continue;
1a002c9c:	e7a0      	b.n	1a002be0 <create_name+0xe4>
			cf |= NS_LFN;	/* LFN entry needs to be created */
1a002c9e:	f047 0702 	orr.w	r7, r7, #2
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
1a002ca2:	f240 3152 	movw	r1, #850	; 0x352
1a002ca6:	4630      	mov	r0, r6
1a002ca8:	f000 feb2 	bl	1a003a10 <ff_uni2oem>
1a002cac:	4606      	mov	r6, r0
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
1a002cae:	f010 0f80 	tst.w	r0, #128	; 0x80
1a002cb2:	d0a5      	beq.n	1a002c00 <create_name+0x104>
1a002cb4:	f000 067f 	and.w	r6, r0, #127	; 0x7f
1a002cb8:	4b1f      	ldr	r3, [pc, #124]	; (1a002d38 <create_name+0x23c>)
1a002cba:	5d9e      	ldrb	r6, [r3, r6]
1a002cbc:	e7a0      	b.n	1a002c00 <create_name+0x104>
				cf |= NS_LOSS | NS_LFN;
1a002cbe:	f047 0703 	orr.w	r7, r7, #3
		wc = lfn[si++];					/* Get an LFN character */
1a002cc2:	464e      	mov	r6, r9
				i = ni; continue;		/* Next field */
1a002cc4:	f8cd b004 	str.w	fp, [sp, #4]
1a002cc8:	e78a      	b.n	1a002be0 <create_name+0xe4>
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
1a002cca:	b956      	cbnz	r6, 1a002ce2 <create_name+0x1e6>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
1a002ccc:	f047 0703 	orr.w	r7, r7, #3
1a002cd0:	9b01      	ldr	r3, [sp, #4]
1a002cd2:	265f      	movs	r6, #95	; 0x5f
		dp->fn[i++] = (BYTE)wc;
1a002cd4:	1c5a      	adds	r2, r3, #1
1a002cd6:	9201      	str	r2, [sp, #4]
1a002cd8:	4443      	add	r3, r8
1a002cda:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
		wc = lfn[si++];					/* Get an LFN character */
1a002cde:	464e      	mov	r6, r9
1a002ce0:	e77e      	b.n	1a002be0 <create_name+0xe4>
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
1a002ce2:	4631      	mov	r1, r6
1a002ce4:	4815      	ldr	r0, [pc, #84]	; (1a002d3c <create_name+0x240>)
1a002ce6:	f7fe fc17 	bl	1a001518 <chk_chr>
1a002cea:	2800      	cmp	r0, #0
1a002cec:	d1ee      	bne.n	1a002ccc <create_name+0x1d0>
				if (IsUpper(wc)) {		/* ASCII upper case? */
1a002cee:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
1a002cf2:	b29b      	uxth	r3, r3
1a002cf4:	2b19      	cmp	r3, #25
1a002cf6:	d801      	bhi.n	1a002cfc <create_name+0x200>
					b |= 2;
1a002cf8:	f04a 0a02 	orr.w	sl, sl, #2
				if (IsLower(wc)) {		/* ASCII lower case? */
1a002cfc:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
1a002d00:	b29b      	uxth	r3, r3
1a002d02:	2b19      	cmp	r3, #25
1a002d04:	d805      	bhi.n	1a002d12 <create_name+0x216>
					b |= 1; wc -= 0x20;
1a002d06:	f04a 0a01 	orr.w	sl, sl, #1
1a002d0a:	3e20      	subs	r6, #32
1a002d0c:	b2b6      	uxth	r6, r6
1a002d0e:	9b01      	ldr	r3, [sp, #4]
1a002d10:	e7e0      	b.n	1a002cd4 <create_name+0x1d8>
1a002d12:	9b01      	ldr	r3, [sp, #4]
1a002d14:	e7de      	b.n	1a002cd4 <create_name+0x1d8>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
1a002d16:	2305      	movs	r3, #5
1a002d18:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
1a002d1c:	e792      	b.n	1a002c44 <create_name+0x148>
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
1a002d1e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
1a002d22:	fa5f fa8a 	uxtb.w	sl, sl
1a002d26:	e790      	b.n	1a002c4a <create_name+0x14e>
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
1a002d28:	2006      	movs	r0, #6
1a002d2a:	e7a8      	b.n	1a002c7e <create_name+0x182>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
1a002d2c:	2006      	movs	r0, #6
1a002d2e:	e7a6      	b.n	1a002c7e <create_name+0x182>
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
1a002d30:	2006      	movs	r0, #6
1a002d32:	e7a4      	b.n	1a002c7e <create_name+0x182>
1a002d34:	1a008048 	.word	0x1a008048
1a002d38:	1a007f98 	.word	0x1a007f98
1a002d3c:	1a008054 	.word	0x1a008054

1a002d40 <xname_sum>:
{
1a002d40:	b538      	push	{r3, r4, r5, lr}
	WORD sum = 0;
1a002d42:	2400      	movs	r4, #0
	while ((chr = *name++) != 0) {
1a002d44:	e011      	b.n	1a002d6a <xname_sum+0x2a>
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
1a002d46:	f000 fe83 	bl	1a003a50 <ff_wtoupper>
1a002d4a:	b280      	uxth	r0, r0
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
1a002d4c:	0863      	lsrs	r3, r4, #1
1a002d4e:	eb03 34c4 	add.w	r4, r3, r4, lsl #15
1a002d52:	b2c3      	uxtb	r3, r0
1a002d54:	fa13 f484 	uxtah	r4, r3, r4
1a002d58:	b2a3      	uxth	r3, r4
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
1a002d5a:	085c      	lsrs	r4, r3, #1
1a002d5c:	eb04 34c3 	add.w	r4, r4, r3, lsl #15
1a002d60:	0a00      	lsrs	r0, r0, #8
1a002d62:	fa10 f484 	uxtah	r4, r0, r4
1a002d66:	b2a4      	uxth	r4, r4
	while ((chr = *name++) != 0) {
1a002d68:	4628      	mov	r0, r5
1a002d6a:	1c85      	adds	r5, r0, #2
1a002d6c:	8800      	ldrh	r0, [r0, #0]
1a002d6e:	2800      	cmp	r0, #0
1a002d70:	d1e9      	bne.n	1a002d46 <xname_sum+0x6>
}
1a002d72:	4620      	mov	r0, r4
1a002d74:	bd38      	pop	{r3, r4, r5, pc}

1a002d76 <create_xdir>:
{
1a002d76:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a002d7a:	4607      	mov	r7, r0
1a002d7c:	4688      	mov	r8, r1
	mem_set(dirb, 0, 2 * SZDIRE);
1a002d7e:	2240      	movs	r2, #64	; 0x40
1a002d80:	2100      	movs	r1, #0
1a002d82:	f7fe fbb5 	bl	1a0014f0 <mem_set>
	dirb[0 * SZDIRE + XDIR_Type] = 0x85;	/* 85 entry */
1a002d86:	2385      	movs	r3, #133	; 0x85
1a002d88:	703b      	strb	r3, [r7, #0]
	dirb[1 * SZDIRE + XDIR_Type] = 0xC0;	/* C0 entry */
1a002d8a:	23c0      	movs	r3, #192	; 0xc0
1a002d8c:	f887 3020 	strb.w	r3, [r7, #32]
	nlen = nc1 = 0; wc = 1;
1a002d90:	2501      	movs	r5, #1
1a002d92:	2600      	movs	r6, #0
1a002d94:	46b1      	mov	r9, r6
	i = SZDIRE * 2;	/* Top of C1 entries */
1a002d96:	2440      	movs	r4, #64	; 0x40
1a002d98:	e017      	b.n	1a002dca <create_xdir+0x54>
			st_word(dirb + i, wc); 		/* Store it */
1a002d9a:	4629      	mov	r1, r5
1a002d9c:	1938      	adds	r0, r7, r4
1a002d9e:	f7fe fb7d 	bl	1a00149c <st_word>
			i += 2;
1a002da2:	3402      	adds	r4, #2
		} while (i % SZDIRE != 0);
1a002da4:	f014 0f1f 	tst.w	r4, #31
1a002da8:	d008      	beq.n	1a002dbc <create_xdir+0x46>
			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
1a002daa:	2d00      	cmp	r5, #0
1a002dac:	d0f5      	beq.n	1a002d9a <create_xdir+0x24>
1a002dae:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
1a002db2:	2d00      	cmp	r5, #0
1a002db4:	d0f1      	beq.n	1a002d9a <create_xdir+0x24>
1a002db6:	3601      	adds	r6, #1
1a002db8:	b2f6      	uxtb	r6, r6
1a002dba:	e7ee      	b.n	1a002d9a <create_xdir+0x24>
		nc1++;
1a002dbc:	f109 0301 	add.w	r3, r9, #1
1a002dc0:	b2db      	uxtb	r3, r3
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
1a002dc2:	f838 2016 	ldrh.w	r2, [r8, r6, lsl #1]
1a002dc6:	b13a      	cbz	r2, 1a002dd8 <create_xdir+0x62>
		nc1++;
1a002dc8:	4699      	mov	r9, r3
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
1a002dca:	1c63      	adds	r3, r4, #1
1a002dcc:	22c1      	movs	r2, #193	; 0xc1
1a002dce:	553a      	strb	r2, [r7, r4]
1a002dd0:	2200      	movs	r2, #0
1a002dd2:	54fa      	strb	r2, [r7, r3]
1a002dd4:	3402      	adds	r4, #2
1a002dd6:	e7e8      	b.n	1a002daa <create_xdir+0x34>
	dirb[XDIR_NumName] = nlen;		/* Set name length */
1a002dd8:	f887 6023 	strb.w	r6, [r7, #35]	; 0x23
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
1a002ddc:	f109 0902 	add.w	r9, r9, #2
1a002de0:	f887 9001 	strb.w	r9, [r7, #1]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
1a002de4:	4640      	mov	r0, r8
1a002de6:	f7ff ffab 	bl	1a002d40 <xname_sum>
1a002dea:	4601      	mov	r1, r0
1a002dec:	f107 0024 	add.w	r0, r7, #36	; 0x24
1a002df0:	f7fe fb54 	bl	1a00149c <st_word>
}
1a002df4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a002df8 <cmp_lfn>:
{
1a002df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a002dfc:	4681      	mov	r9, r0
1a002dfe:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
1a002e00:	f101 001a 	add.w	r0, r1, #26
1a002e04:	f7fe fae6 	bl	1a0013d4 <ld_word>
1a002e08:	bbb8      	cbnz	r0, 1a002e7a <cmp_lfn+0x82>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
1a002e0a:	783d      	ldrb	r5, [r7, #0]
1a002e0c:	f005 053f 	and.w	r5, r5, #63	; 0x3f
1a002e10:	3d01      	subs	r5, #1
1a002e12:	eb05 0345 	add.w	r3, r5, r5, lsl #1
1a002e16:	eb05 0583 	add.w	r5, r5, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1a002e1a:	f04f 0801 	mov.w	r8, #1
1a002e1e:	2400      	movs	r4, #0
1a002e20:	e004      	b.n	1a002e2c <cmp_lfn+0x34>
			if (uc != 0xFFFF) return 0;		/* Check filler */
1a002e22:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a002e26:	4298      	cmp	r0, r3
1a002e28:	d12e      	bne.n	1a002e88 <cmp_lfn+0x90>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1a002e2a:	3401      	adds	r4, #1
1a002e2c:	2c0c      	cmp	r4, #12
1a002e2e:	d818      	bhi.n	1a002e62 <cmp_lfn+0x6a>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1a002e30:	4b19      	ldr	r3, [pc, #100]	; (1a002e98 <cmp_lfn+0xa0>)
1a002e32:	5d18      	ldrb	r0, [r3, r4]
1a002e34:	4438      	add	r0, r7
1a002e36:	f7fe facd 	bl	1a0013d4 <ld_word>
1a002e3a:	4606      	mov	r6, r0
		if (wc != 0) {
1a002e3c:	f1b8 0f00 	cmp.w	r8, #0
1a002e40:	d0ef      	beq.n	1a002e22 <cmp_lfn+0x2a>
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
1a002e42:	2dfe      	cmp	r5, #254	; 0xfe
1a002e44:	d81c      	bhi.n	1a002e80 <cmp_lfn+0x88>
1a002e46:	f000 fe03 	bl	1a003a50 <ff_wtoupper>
1a002e4a:	4680      	mov	r8, r0
1a002e4c:	f105 0a01 	add.w	sl, r5, #1
1a002e50:	f839 0015 	ldrh.w	r0, [r9, r5, lsl #1]
1a002e54:	f000 fdfc 	bl	1a003a50 <ff_wtoupper>
1a002e58:	4580      	cmp	r8, r0
1a002e5a:	d113      	bne.n	1a002e84 <cmp_lfn+0x8c>
			wc = uc;
1a002e5c:	46b0      	mov	r8, r6
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
1a002e5e:	4655      	mov	r5, sl
1a002e60:	e7e3      	b.n	1a002e2a <cmp_lfn+0x32>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
1a002e62:	783b      	ldrb	r3, [r7, #0]
1a002e64:	f013 0f40 	tst.w	r3, #64	; 0x40
1a002e68:	d010      	beq.n	1a002e8c <cmp_lfn+0x94>
1a002e6a:	f1b8 0f00 	cmp.w	r8, #0
1a002e6e:	d00f      	beq.n	1a002e90 <cmp_lfn+0x98>
1a002e70:	f839 3015 	ldrh.w	r3, [r9, r5, lsl #1]
1a002e74:	b973      	cbnz	r3, 1a002e94 <cmp_lfn+0x9c>
	return 1;		/* The part of LFN matched */
1a002e76:	2001      	movs	r0, #1
1a002e78:	e000      	b.n	1a002e7c <cmp_lfn+0x84>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
1a002e7a:	2000      	movs	r0, #0
}
1a002e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return 0;					/* Not matched */
1a002e80:	2000      	movs	r0, #0
1a002e82:	e7fb      	b.n	1a002e7c <cmp_lfn+0x84>
1a002e84:	2000      	movs	r0, #0
1a002e86:	e7f9      	b.n	1a002e7c <cmp_lfn+0x84>
			if (uc != 0xFFFF) return 0;		/* Check filler */
1a002e88:	2000      	movs	r0, #0
1a002e8a:	e7f7      	b.n	1a002e7c <cmp_lfn+0x84>
	return 1;		/* The part of LFN matched */
1a002e8c:	2001      	movs	r0, #1
1a002e8e:	e7f5      	b.n	1a002e7c <cmp_lfn+0x84>
1a002e90:	2001      	movs	r0, #1
1a002e92:	e7f3      	b.n	1a002e7c <cmp_lfn+0x84>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
1a002e94:	2000      	movs	r0, #0
1a002e96:	e7f1      	b.n	1a002e7c <cmp_lfn+0x84>
1a002e98:	1a008018 	.word	0x1a008018

1a002e9c <dir_find>:
{
1a002e9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002ea0:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
1a002ea2:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
1a002ea4:	2100      	movs	r1, #0
1a002ea6:	f7ff fa3b 	bl	1a002320 <dir_sdi>
	if (res != FR_OK) return res;
1a002eaa:	4680      	mov	r8, r0
1a002eac:	2800      	cmp	r0, #0
1a002eae:	f040 80a0 	bne.w	1a002ff2 <dir_find+0x156>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1a002eb2:	783b      	ldrb	r3, [r7, #0]
1a002eb4:	2b04      	cmp	r3, #4
1a002eb6:	d006      	beq.n	1a002ec6 <dir_find+0x2a>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
1a002eb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a002ebc:	64e3      	str	r3, [r4, #76]	; 0x4c
1a002ebe:	f04f 09ff 	mov.w	r9, #255	; 0xff
1a002ec2:	464e      	mov	r6, r9
1a002ec4:	e042      	b.n	1a002f4c <dir_find+0xb0>
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
1a002ec6:	68f8      	ldr	r0, [r7, #12]
1a002ec8:	f7ff ff3a 	bl	1a002d40 <xname_sum>
1a002ecc:	4683      	mov	fp, r0
		while ((res = dir_read_file(dp)) == FR_OK) {	/* Read an item */
1a002ece:	e01e      	b.n	1a002f0e <dir_find+0x72>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
1a002ed0:	6938      	ldr	r0, [r7, #16]
1a002ed2:	4430      	add	r0, r6
1a002ed4:	f7fe fa7e 	bl	1a0013d4 <ld_word>
1a002ed8:	f000 fdba 	bl	1a003a50 <ff_wtoupper>
1a002edc:	4682      	mov	sl, r0
1a002ede:	68fb      	ldr	r3, [r7, #12]
1a002ee0:	f833 0019 	ldrh.w	r0, [r3, r9, lsl #1]
1a002ee4:	f000 fdb4 	bl	1a003a50 <ff_wtoupper>
1a002ee8:	4582      	cmp	sl, r0
1a002eea:	d10a      	bne.n	1a002f02 <dir_find+0x66>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
1a002eec:	3d01      	subs	r5, #1
1a002eee:	b2ed      	uxtb	r5, r5
1a002ef0:	3602      	adds	r6, #2
1a002ef2:	f109 0901 	add.w	r9, r9, #1
1a002ef6:	b125      	cbz	r5, 1a002f02 <dir_find+0x66>
				if ((di % SZDIRE) == 0) di += 2;
1a002ef8:	f016 0f1f 	tst.w	r6, #31
1a002efc:	d1e8      	bne.n	1a002ed0 <dir_find+0x34>
1a002efe:	3602      	adds	r6, #2
1a002f00:	e7e6      	b.n	1a002ed0 <dir_find+0x34>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
1a002f02:	b925      	cbnz	r5, 1a002f0e <dir_find+0x72>
1a002f04:	68fb      	ldr	r3, [r7, #12]
1a002f06:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
1a002f0a:	2b00      	cmp	r3, #0
1a002f0c:	d071      	beq.n	1a002ff2 <dir_find+0x156>
		while ((res = dir_read_file(dp)) == FR_OK) {	/* Read an item */
1a002f0e:	2100      	movs	r1, #0
1a002f10:	4620      	mov	r0, r4
1a002f12:	f7ff fd18 	bl	1a002946 <dir_read>
1a002f16:	4680      	mov	r8, r0
1a002f18:	2800      	cmp	r0, #0
1a002f1a:	d16a      	bne.n	1a002ff2 <dir_find+0x156>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
1a002f1c:	693d      	ldr	r5, [r7, #16]
1a002f1e:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a002f22:	f7fe fa57 	bl	1a0013d4 <ld_word>
1a002f26:	4558      	cmp	r0, fp
1a002f28:	d1f1      	bne.n	1a002f0e <dir_find+0x72>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
1a002f2a:	f895 5023 	ldrb.w	r5, [r5, #35]	; 0x23
1a002f2e:	f04f 0900 	mov.w	r9, #0
1a002f32:	2640      	movs	r6, #64	; 0x40
1a002f34:	e7df      	b.n	1a002ef6 <dir_find+0x5a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
1a002f36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a002f3a:	64e3      	str	r3, [r4, #76]	; 0x4c
1a002f3c:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
1a002f3e:	2100      	movs	r1, #0
1a002f40:	4620      	mov	r0, r4
1a002f42:	f7ff fbf5 	bl	1a002730 <dir_next>
	} while (res == FR_OK);
1a002f46:	4680      	mov	r8, r0
1a002f48:	2800      	cmp	r0, #0
1a002f4a:	d152      	bne.n	1a002ff2 <dir_find+0x156>
		res = move_window(fs, dp->sect);
1a002f4c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a002f4e:	4638      	mov	r0, r7
1a002f50:	f7fe fd38 	bl	1a0019c4 <move_window>
		if (res != FR_OK) break;
1a002f54:	4680      	mov	r8, r0
1a002f56:	2800      	cmp	r0, #0
1a002f58:	d14b      	bne.n	1a002ff2 <dir_find+0x156>
		c = dp->dir[DIR_Name];
1a002f5a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
1a002f5c:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1a002f5e:	2b00      	cmp	r3, #0
1a002f60:	d045      	beq.n	1a002fee <dir_find+0x152>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
1a002f62:	7ae9      	ldrb	r1, [r5, #11]
1a002f64:	f001 023f 	and.w	r2, r1, #63	; 0x3f
1a002f68:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
1a002f6a:	2be5      	cmp	r3, #229	; 0xe5
1a002f6c:	d0e3      	beq.n	1a002f36 <dir_find+0x9a>
1a002f6e:	f011 0f08 	tst.w	r1, #8
1a002f72:	d001      	beq.n	1a002f78 <dir_find+0xdc>
1a002f74:	2a0f      	cmp	r2, #15
1a002f76:	d1de      	bne.n	1a002f36 <dir_find+0x9a>
			if (a == AM_LFN) {			/* An LFN entry is found */
1a002f78:	2a0f      	cmp	r2, #15
1a002f7a:	d016      	beq.n	1a002faa <dir_find+0x10e>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
1a002f7c:	b926      	cbnz	r6, 1a002f88 <dir_find+0xec>
1a002f7e:	4628      	mov	r0, r5
1a002f80:	f7fe fc3e 	bl	1a001800 <sum_sfn>
1a002f84:	4548      	cmp	r0, r9
1a002f86:	d034      	beq.n	1a002ff2 <dir_find+0x156>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
1a002f88:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
1a002f8c:	f013 0f01 	tst.w	r3, #1
1a002f90:	d106      	bne.n	1a002fa0 <dir_find+0x104>
1a002f92:	220b      	movs	r2, #11
1a002f94:	f104 0140 	add.w	r1, r4, #64	; 0x40
1a002f98:	4628      	mov	r0, r5
1a002f9a:	f7fe faae 	bl	1a0014fa <mem_cmp>
1a002f9e:	b340      	cbz	r0, 1a002ff2 <dir_find+0x156>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
1a002fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a002fa4:	64e3      	str	r3, [r4, #76]	; 0x4c
1a002fa6:	26ff      	movs	r6, #255	; 0xff
1a002fa8:	e7c9      	b.n	1a002f3e <dir_find+0xa2>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
1a002faa:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
1a002fae:	f012 0f40 	tst.w	r2, #64	; 0x40
1a002fb2:	d1c4      	bne.n	1a002f3e <dir_find+0xa2>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
1a002fb4:	f013 0f40 	tst.w	r3, #64	; 0x40
1a002fb8:	d006      	beq.n	1a002fc8 <dir_find+0x12c>
						sum = dp->dir[LDIR_Chksum];
1a002fba:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
1a002fbe:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
1a002fc2:	6b22      	ldr	r2, [r4, #48]	; 0x30
1a002fc4:	64e2      	str	r2, [r4, #76]	; 0x4c
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
1a002fc6:	461e      	mov	r6, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
1a002fc8:	42b3      	cmp	r3, r6
1a002fca:	d001      	beq.n	1a002fd0 <dir_find+0x134>
1a002fcc:	26ff      	movs	r6, #255	; 0xff
1a002fce:	e7b6      	b.n	1a002f3e <dir_find+0xa2>
1a002fd0:	7b6b      	ldrb	r3, [r5, #13]
1a002fd2:	454b      	cmp	r3, r9
1a002fd4:	d001      	beq.n	1a002fda <dir_find+0x13e>
1a002fd6:	26ff      	movs	r6, #255	; 0xff
1a002fd8:	e7b1      	b.n	1a002f3e <dir_find+0xa2>
1a002fda:	4629      	mov	r1, r5
1a002fdc:	68f8      	ldr	r0, [r7, #12]
1a002fde:	f7ff ff0b 	bl	1a002df8 <cmp_lfn>
1a002fe2:	b110      	cbz	r0, 1a002fea <dir_find+0x14e>
1a002fe4:	3e01      	subs	r6, #1
1a002fe6:	b2f6      	uxtb	r6, r6
1a002fe8:	e7a9      	b.n	1a002f3e <dir_find+0xa2>
1a002fea:	26ff      	movs	r6, #255	; 0xff
1a002fec:	e7a7      	b.n	1a002f3e <dir_find+0xa2>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1a002fee:	f04f 0804 	mov.w	r8, #4
}
1a002ff2:	4640      	mov	r0, r8
1a002ff4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a002ff8 <follow_path>:
{
1a002ff8:	b530      	push	{r4, r5, lr}
1a002ffa:	b083      	sub	sp, #12
1a002ffc:	4604      	mov	r4, r0
1a002ffe:	9101      	str	r1, [sp, #4]
	FATFS *fs = dp->obj.fs;
1a003000:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
1a003002:	e001      	b.n	1a003008 <follow_path+0x10>
1a003004:	3301      	adds	r3, #1
1a003006:	9301      	str	r3, [sp, #4]
1a003008:	9b01      	ldr	r3, [sp, #4]
1a00300a:	781a      	ldrb	r2, [r3, #0]
1a00300c:	2a2f      	cmp	r2, #47	; 0x2f
1a00300e:	d0f9      	beq.n	1a003004 <follow_path+0xc>
1a003010:	2a5c      	cmp	r2, #92	; 0x5c
1a003012:	d0f7      	beq.n	1a003004 <follow_path+0xc>
		dp->obj.sclust = 0;					/* Start from root directory */
1a003014:	2200      	movs	r2, #0
1a003016:	60a2      	str	r2, [r4, #8]
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
1a003018:	61e2      	str	r2, [r4, #28]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
1a00301a:	781b      	ldrb	r3, [r3, #0]
1a00301c:	2b1f      	cmp	r3, #31
1a00301e:	d81f      	bhi.n	1a003060 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
1a003020:	2380      	movs	r3, #128	; 0x80
1a003022:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
		res = dir_sdi(dp, 0);
1a003026:	4611      	mov	r1, r2
1a003028:	4620      	mov	r0, r4
1a00302a:	f7ff f979 	bl	1a002320 <dir_sdi>
1a00302e:	4603      	mov	r3, r0
}
1a003030:	4618      	mov	r0, r3
1a003032:	b003      	add	sp, #12
1a003034:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
1a003036:	2804      	cmp	r0, #4
1a003038:	d1fa      	bne.n	1a003030 <follow_path+0x38>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
1a00303a:	f012 0f04 	tst.w	r2, #4
1a00303e:	d1f7      	bne.n	1a003030 <follow_path+0x38>
1a003040:	2305      	movs	r3, #5
1a003042:	e7f5      	b.n	1a003030 <follow_path+0x38>
				dp->obj.c_scl = dp->obj.sclust;
1a003044:	68a3      	ldr	r3, [r4, #8]
1a003046:	6223      	str	r3, [r4, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
1a003048:	6923      	ldr	r3, [r4, #16]
1a00304a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a00304e:	79e2      	ldrb	r2, [r4, #7]
1a003050:	4313      	orrs	r3, r2
1a003052:	6263      	str	r3, [r4, #36]	; 0x24
				dp->obj.c_ofs = dp->blk_ofs;
1a003054:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
1a003056:	62a3      	str	r3, [r4, #40]	; 0x28
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
1a003058:	4621      	mov	r1, r4
1a00305a:	4628      	mov	r0, r5
1a00305c:	f7fe fbf6 	bl	1a00184c <init_alloc_info>
			res = create_name(dp, &path);	/* Get a segment name of the path */
1a003060:	a901      	add	r1, sp, #4
1a003062:	4620      	mov	r0, r4
1a003064:	f7ff fd4a 	bl	1a002afc <create_name>
			if (res != FR_OK) break;
1a003068:	4603      	mov	r3, r0
1a00306a:	2800      	cmp	r0, #0
1a00306c:	d1e0      	bne.n	1a003030 <follow_path+0x38>
			res = dir_find(dp);				/* Find an object with the segment name */
1a00306e:	4620      	mov	r0, r4
1a003070:	f7ff ff14 	bl	1a002e9c <dir_find>
			ns = dp->fn[NSFLAG];
1a003074:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
1a003078:	4603      	mov	r3, r0
1a00307a:	2800      	cmp	r0, #0
1a00307c:	d1db      	bne.n	1a003036 <follow_path+0x3e>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
1a00307e:	f012 0f04 	tst.w	r2, #4
1a003082:	d1d5      	bne.n	1a003030 <follow_path+0x38>
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
1a003084:	79a3      	ldrb	r3, [r4, #6]
1a003086:	f013 0f10 	tst.w	r3, #16
1a00308a:	d00d      	beq.n	1a0030a8 <follow_path+0xb0>
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
1a00308c:	782b      	ldrb	r3, [r5, #0]
1a00308e:	2b04      	cmp	r3, #4
1a003090:	d0d8      	beq.n	1a003044 <follow_path+0x4c>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
1a003092:	f105 0138 	add.w	r1, r5, #56	; 0x38
1a003096:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a003098:	f3c3 0308 	ubfx	r3, r3, #0, #9
1a00309c:	4419      	add	r1, r3
1a00309e:	4628      	mov	r0, r5
1a0030a0:	f7fe fab0 	bl	1a001604 <ld_clust>
1a0030a4:	60a0      	str	r0, [r4, #8]
1a0030a6:	e7db      	b.n	1a003060 <follow_path+0x68>
				res = FR_NO_PATH; break;
1a0030a8:	2305      	movs	r3, #5
1a0030aa:	e7c1      	b.n	1a003030 <follow_path+0x38>

1a0030ac <dir_register>:
{
1a0030ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0030b0:	b099      	sub	sp, #100	; 0x64
	FATFS *fs = dp->obj.fs;
1a0030b2:	6805      	ldr	r5, [r0, #0]
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
1a0030b4:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
1a0030b8:	f013 0fa0 	tst.w	r3, #160	; 0xa0
1a0030bc:	f040 80eb 	bne.w	1a003296 <dir_register+0x1ea>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
1a0030c0:	2400      	movs	r4, #0
1a0030c2:	e000      	b.n	1a0030c6 <dir_register+0x1a>
1a0030c4:	3401      	adds	r4, #1
1a0030c6:	68eb      	ldr	r3, [r5, #12]
1a0030c8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
1a0030cc:	2b00      	cmp	r3, #0
1a0030ce:	d1f9      	bne.n	1a0030c4 <dir_register+0x18>
1a0030d0:	4606      	mov	r6, r0
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1a0030d2:	782b      	ldrb	r3, [r5, #0]
1a0030d4:	2b04      	cmp	r3, #4
1a0030d6:	d022      	beq.n	1a00311e <dir_register+0x72>
	mem_cpy(sn, dp->fn, 12);
1a0030d8:	f100 0740 	add.w	r7, r0, #64	; 0x40
1a0030dc:	220c      	movs	r2, #12
1a0030de:	4639      	mov	r1, r7
1a0030e0:	a815      	add	r0, sp, #84	; 0x54
1a0030e2:	f7fe f9fc 	bl	1a0014de <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
1a0030e6:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
1a0030ea:	f013 0f01 	tst.w	r3, #1
1a0030ee:	d07a      	beq.n	1a0031e6 <dir_register+0x13a>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
1a0030f0:	2340      	movs	r3, #64	; 0x40
1a0030f2:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
1a0030f6:	f04f 0801 	mov.w	r8, #1
1a0030fa:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
1a0030fe:	d868      	bhi.n	1a0031d2 <dir_register+0x126>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
1a003100:	4643      	mov	r3, r8
1a003102:	68ea      	ldr	r2, [r5, #12]
1a003104:	a915      	add	r1, sp, #84	; 0x54
1a003106:	4638      	mov	r0, r7
1a003108:	f7fe fb22 	bl	1a001750 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
1a00310c:	4630      	mov	r0, r6
1a00310e:	f7ff fec5 	bl	1a002e9c <dir_find>
			if (res != FR_OK) break;
1a003112:	4681      	mov	r9, r0
1a003114:	2800      	cmp	r0, #0
1a003116:	d15c      	bne.n	1a0031d2 <dir_register+0x126>
		for (n = 1; n < 100; n++) {
1a003118:	f108 0801 	add.w	r8, r8, #1
1a00311c:	e7ed      	b.n	1a0030fa <dir_register+0x4e>
		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
1a00311e:	340e      	adds	r4, #14
1a003120:	4b62      	ldr	r3, [pc, #392]	; (1a0032ac <dir_register+0x200>)
1a003122:	fba3 3404 	umull	r3, r4, r3, r4
1a003126:	08e4      	lsrs	r4, r4, #3
		res = dir_alloc(dp, nent);		/* Allocate entries */
1a003128:	1ca1      	adds	r1, r4, #2
1a00312a:	f7ff fc81 	bl	1a002a30 <dir_alloc>
		if (res != FR_OK) return res;
1a00312e:	4681      	mov	r9, r0
1a003130:	2800      	cmp	r0, #0
1a003132:	f040 80b2 	bne.w	1a00329a <dir_register+0x1ee>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
1a003136:	6b33      	ldr	r3, [r6, #48]	; 0x30
1a003138:	f104 6400 	add.w	r4, r4, #134217728	; 0x8000000
1a00313c:	3401      	adds	r4, #1
1a00313e:	eba3 1444 	sub.w	r4, r3, r4, lsl #5
1a003142:	64f4      	str	r4, [r6, #76]	; 0x4c
		if (dp->obj.stat & 4) {			/* Has the directory been stretched? */
1a003144:	79f3      	ldrb	r3, [r6, #7]
1a003146:	f013 0f04 	tst.w	r3, #4
1a00314a:	d013      	beq.n	1a003174 <dir_register+0xc8>
			dp->obj.stat &= ~4;
1a00314c:	f023 0304 	bic.w	r3, r3, #4
1a003150:	71f3      	strb	r3, [r6, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
1a003152:	4630      	mov	r0, r6
1a003154:	f7ff f812 	bl	1a00217c <fill_first_frag>
			if (res != FR_OK) return res;
1a003158:	b108      	cbz	r0, 1a00315e <dir_register+0xb2>
1a00315a:	4681      	mov	r9, r0
1a00315c:	e09d      	b.n	1a00329a <dir_register+0x1ee>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
1a00315e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a003162:	6b71      	ldr	r1, [r6, #52]	; 0x34
1a003164:	4630      	mov	r0, r6
1a003166:	f7fe fff1 	bl	1a00214c <fill_last_frag>
			if (res != FR_OK) return res;
1a00316a:	2800      	cmp	r0, #0
1a00316c:	f040 8099 	bne.w	1a0032a2 <dir_register+0x1f6>
			if (dp->obj.sclust != 0) {		/* Is it a sub directory? */
1a003170:	68b3      	ldr	r3, [r6, #8]
1a003172:	b923      	cbnz	r3, 1a00317e <dir_register+0xd2>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
1a003174:	68e9      	ldr	r1, [r5, #12]
1a003176:	6928      	ldr	r0, [r5, #16]
1a003178:	f7ff fdfd 	bl	1a002d76 <create_xdir>
		return FR_OK;
1a00317c:	e08d      	b.n	1a00329a <dir_register+0x1ee>
				res = load_obj_xdir(&dj, &dp->obj);	/* Load the object status */
1a00317e:	4631      	mov	r1, r6
1a003180:	4668      	mov	r0, sp
1a003182:	f7ff fbc3 	bl	1a00290c <load_obj_xdir>
				if (res != FR_OK) return res;
1a003186:	4603      	mov	r3, r0
1a003188:	b108      	cbz	r0, 1a00318e <dir_register+0xe2>
1a00318a:	4699      	mov	r9, r3
1a00318c:	e085      	b.n	1a00329a <dir_register+0x1ee>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);			/* Increase the directory size by cluster size */
1a00318e:	8969      	ldrh	r1, [r5, #10]
1a003190:	0249      	lsls	r1, r1, #9
1a003192:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
1a003196:	1857      	adds	r7, r2, r1
1a003198:	f143 0800 	adc.w	r8, r3, #0
1a00319c:	e9c6 7804 	strd	r7, r8, [r6, #16]
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);	/* Update the allocation status */
1a0031a0:	6928      	ldr	r0, [r5, #16]
1a0031a2:	463a      	mov	r2, r7
1a0031a4:	4643      	mov	r3, r8
1a0031a6:	3038      	adds	r0, #56	; 0x38
1a0031a8:	f7fe f986 	bl	1a0014b8 <st_qword>
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
1a0031ac:	6928      	ldr	r0, [r5, #16]
1a0031ae:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
1a0031b2:	3028      	adds	r0, #40	; 0x28
1a0031b4:	f7fe f980 	bl	1a0014b8 <st_qword>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
1a0031b8:	79f3      	ldrb	r3, [r6, #7]
1a0031ba:	692a      	ldr	r2, [r5, #16]
1a0031bc:	f043 0301 	orr.w	r3, r3, #1
1a0031c0:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
				res = store_xdir(&dj);				/* Store the object status */
1a0031c4:	4668      	mov	r0, sp
1a0031c6:	f7ff fc69 	bl	1a002a9c <store_xdir>
				if (res != FR_OK) return res;
1a0031ca:	4603      	mov	r3, r0
1a0031cc:	2800      	cmp	r0, #0
1a0031ce:	d0d1      	beq.n	1a003174 <dir_register+0xc8>
1a0031d0:	e7db      	b.n	1a00318a <dir_register+0xde>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
1a0031d2:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
1a0031d6:	d066      	beq.n	1a0032a6 <dir_register+0x1fa>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
1a0031d8:	f1b9 0f04 	cmp.w	r9, #4
1a0031dc:	d15d      	bne.n	1a00329a <dir_register+0x1ee>
		dp->fn[NSFLAG] = sn[NSFLAG];
1a0031de:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
1a0031e2:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
1a0031e6:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
1a0031ea:	f013 0f02 	tst.w	r3, #2
1a0031ee:	d02a      	beq.n	1a003246 <dir_register+0x19a>
1a0031f0:	340c      	adds	r4, #12
1a0031f2:	4b2f      	ldr	r3, [pc, #188]	; (1a0032b0 <dir_register+0x204>)
1a0031f4:	fba3 3404 	umull	r3, r4, r3, r4
1a0031f8:	08a4      	lsrs	r4, r4, #2
1a0031fa:	3401      	adds	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
1a0031fc:	4621      	mov	r1, r4
1a0031fe:	4630      	mov	r0, r6
1a003200:	f7ff fc16 	bl	1a002a30 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
1a003204:	4681      	mov	r9, r0
1a003206:	b908      	cbnz	r0, 1a00320c <dir_register+0x160>
1a003208:	3c01      	subs	r4, #1
1a00320a:	d11e      	bne.n	1a00324a <dir_register+0x19e>
	if (res == FR_OK) {
1a00320c:	f1b9 0f00 	cmp.w	r9, #0
1a003210:	d143      	bne.n	1a00329a <dir_register+0x1ee>
		res = move_window(fs, dp->sect);
1a003212:	6bb1      	ldr	r1, [r6, #56]	; 0x38
1a003214:	4628      	mov	r0, r5
1a003216:	f7fe fbd5 	bl	1a0019c4 <move_window>
		if (res == FR_OK) {
1a00321a:	4681      	mov	r9, r0
1a00321c:	2800      	cmp	r0, #0
1a00321e:	d13c      	bne.n	1a00329a <dir_register+0x1ee>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
1a003220:	2220      	movs	r2, #32
1a003222:	2100      	movs	r1, #0
1a003224:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
1a003226:	f7fe f963 	bl	1a0014f0 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
1a00322a:	220b      	movs	r2, #11
1a00322c:	4639      	mov	r1, r7
1a00322e:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
1a003230:	f7fe f955 	bl	1a0014de <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
1a003234:	f896 304b 	ldrb.w	r3, [r6, #75]	; 0x4b
1a003238:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
1a00323a:	f003 0318 	and.w	r3, r3, #24
1a00323e:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
1a003240:	2301      	movs	r3, #1
1a003242:	70eb      	strb	r3, [r5, #3]
1a003244:	e029      	b.n	1a00329a <dir_register+0x1ee>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
1a003246:	2401      	movs	r4, #1
1a003248:	e7d8      	b.n	1a0031fc <dir_register+0x150>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
1a00324a:	6b31      	ldr	r1, [r6, #48]	; 0x30
1a00324c:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
1a003250:	4630      	mov	r0, r6
1a003252:	f7ff f865 	bl	1a002320 <dir_sdi>
		if (res == FR_OK) {
1a003256:	4681      	mov	r9, r0
1a003258:	2800      	cmp	r0, #0
1a00325a:	d1d7      	bne.n	1a00320c <dir_register+0x160>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
1a00325c:	4638      	mov	r0, r7
1a00325e:	f7fe facf 	bl	1a001800 <sum_sfn>
1a003262:	4680      	mov	r8, r0
				res = move_window(fs, dp->sect);
1a003264:	6bb1      	ldr	r1, [r6, #56]	; 0x38
1a003266:	4628      	mov	r0, r5
1a003268:	f7fe fbac 	bl	1a0019c4 <move_window>
				if (res != FR_OK) break;
1a00326c:	4681      	mov	r9, r0
1a00326e:	2800      	cmp	r0, #0
1a003270:	d1cc      	bne.n	1a00320c <dir_register+0x160>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
1a003272:	4643      	mov	r3, r8
1a003274:	b2e2      	uxtb	r2, r4
1a003276:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
1a003278:	68e8      	ldr	r0, [r5, #12]
1a00327a:	f7fe fa2d 	bl	1a0016d8 <put_lfn>
				fs->wflag = 1;
1a00327e:	2301      	movs	r3, #1
1a003280:	70eb      	strb	r3, [r5, #3]
				res = dir_next(dp, 0);	/* Next entry */
1a003282:	2100      	movs	r1, #0
1a003284:	4630      	mov	r0, r6
1a003286:	f7ff fa53 	bl	1a002730 <dir_next>
			} while (res == FR_OK && --nent);
1a00328a:	4681      	mov	r9, r0
1a00328c:	2800      	cmp	r0, #0
1a00328e:	d1bd      	bne.n	1a00320c <dir_register+0x160>
1a003290:	3c01      	subs	r4, #1
1a003292:	d1e7      	bne.n	1a003264 <dir_register+0x1b8>
1a003294:	e7ba      	b.n	1a00320c <dir_register+0x160>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
1a003296:	f04f 0906 	mov.w	r9, #6
}
1a00329a:	4648      	mov	r0, r9
1a00329c:	b019      	add	sp, #100	; 0x64
1a00329e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (res != FR_OK) return res;
1a0032a2:	4681      	mov	r9, r0
1a0032a4:	e7f9      	b.n	1a00329a <dir_register+0x1ee>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
1a0032a6:	f04f 0907 	mov.w	r9, #7
1a0032aa:	e7f6      	b.n	1a00329a <dir_register+0x1ee>
1a0032ac:	88888889 	.word	0x88888889
1a0032b0:	4ec4ec4f 	.word	0x4ec4ec4f

1a0032b4 <sync_fs>:
{
1a0032b4:	b570      	push	{r4, r5, r6, lr}
1a0032b6:	4604      	mov	r4, r0
	res = sync_window(fs);
1a0032b8:	f7fe fb5c 	bl	1a001974 <sync_window>
	if (res == FR_OK) {
1a0032bc:	4605      	mov	r5, r0
1a0032be:	b948      	cbnz	r0, 1a0032d4 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
1a0032c0:	7823      	ldrb	r3, [r4, #0]
1a0032c2:	2b03      	cmp	r3, #3
1a0032c4:	d008      	beq.n	1a0032d8 <sync_fs+0x24>
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
1a0032c6:	2200      	movs	r2, #0
1a0032c8:	4611      	mov	r1, r2
1a0032ca:	7860      	ldrb	r0, [r4, #1]
1a0032cc:	f002 fdb2 	bl	1a005e34 <disk_ioctl>
1a0032d0:	b100      	cbz	r0, 1a0032d4 <sync_fs+0x20>
1a0032d2:	2501      	movs	r5, #1
}
1a0032d4:	4628      	mov	r0, r5
1a0032d6:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
1a0032d8:	7923      	ldrb	r3, [r4, #4]
1a0032da:	2b01      	cmp	r3, #1
1a0032dc:	d1f3      	bne.n	1a0032c6 <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
1a0032de:	f104 0638 	add.w	r6, r4, #56	; 0x38
1a0032e2:	f44f 7200 	mov.w	r2, #512	; 0x200
1a0032e6:	2100      	movs	r1, #0
1a0032e8:	4630      	mov	r0, r6
1a0032ea:	f7fe f901 	bl	1a0014f0 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
1a0032ee:	f64a 2155 	movw	r1, #43605	; 0xaa55
1a0032f2:	f204 2036 	addw	r0, r4, #566	; 0x236
1a0032f6:	f7fe f8d1 	bl	1a00149c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
1a0032fa:	490f      	ldr	r1, [pc, #60]	; (1a003338 <sync_fs+0x84>)
1a0032fc:	4630      	mov	r0, r6
1a0032fe:	f7fe f8d1 	bl	1a0014a4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
1a003302:	490e      	ldr	r1, [pc, #56]	; (1a00333c <sync_fs+0x88>)
1a003304:	f504 7007 	add.w	r0, r4, #540	; 0x21c
1a003308:	f7fe f8cc 	bl	1a0014a4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
1a00330c:	69a1      	ldr	r1, [r4, #24]
1a00330e:	f504 7008 	add.w	r0, r4, #544	; 0x220
1a003312:	f7fe f8c7 	bl	1a0014a4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
1a003316:	6961      	ldr	r1, [r4, #20]
1a003318:	f504 7009 	add.w	r0, r4, #548	; 0x224
1a00331c:	f7fe f8c2 	bl	1a0014a4 <st_dword>
			fs->winsect = fs->volbase + 1;
1a003320:	6a62      	ldr	r2, [r4, #36]	; 0x24
1a003322:	3201      	adds	r2, #1
1a003324:	6362      	str	r2, [r4, #52]	; 0x34
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
1a003326:	2301      	movs	r3, #1
1a003328:	4631      	mov	r1, r6
1a00332a:	7860      	ldrb	r0, [r4, #1]
1a00332c:	f002 fd72 	bl	1a005e14 <disk_write>
			fs->fsi_flag = 0;
1a003330:	2300      	movs	r3, #0
1a003332:	7123      	strb	r3, [r4, #4]
1a003334:	e7c7      	b.n	1a0032c6 <sync_fs+0x12>
1a003336:	bf00      	nop
1a003338:	41615252 	.word	0x41615252
1a00333c:	61417272 	.word	0x61417272

1a003340 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
1a003340:	b510      	push	{r4, lr}
1a003342:	b084      	sub	sp, #16
1a003344:	9001      	str	r0, [sp, #4]
1a003346:	9100      	str	r1, [sp, #0]
1a003348:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
1a00334a:	a804      	add	r0, sp, #16
1a00334c:	f840 1d04 	str.w	r1, [r0, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
1a003350:	f7fe fa94 	bl	1a00187c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
1a003354:	2800      	cmp	r0, #0
1a003356:	db17      	blt.n	1a003388 <f_mount+0x48>
	cfs = FatFs[vol];					/* Pointer to fs object */
1a003358:	4b0c      	ldr	r3, [pc, #48]	; (1a00338c <f_mount+0x4c>)
1a00335a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (cfs) {
1a00335e:	b10b      	cbz	r3, 1a003364 <f_mount+0x24>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
1a003360:	2200      	movs	r2, #0
1a003362:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
1a003364:	9b01      	ldr	r3, [sp, #4]
1a003366:	b10b      	cbz	r3, 1a00336c <f_mount+0x2c>
		fs->fs_type = 0;				/* Clear new fs object */
1a003368:	2200      	movs	r2, #0
1a00336a:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
1a00336c:	4b07      	ldr	r3, [pc, #28]	; (1a00338c <f_mount+0x4c>)
1a00336e:	9a01      	ldr	r2, [sp, #4]
1a003370:	f843 2020 	str.w	r2, [r3, r0, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
1a003374:	b914      	cbnz	r4, 1a00337c <f_mount+0x3c>
1a003376:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
1a003378:	b004      	add	sp, #16
1a00337a:	bd10      	pop	{r4, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
1a00337c:	2200      	movs	r2, #0
1a00337e:	a901      	add	r1, sp, #4
1a003380:	4668      	mov	r0, sp
1a003382:	f7fe fb7b 	bl	1a001a7c <find_volume>
	LEAVE_FF(fs, res);
1a003386:	e7f7      	b.n	1a003378 <f_mount+0x38>
	if (vol < 0) return FR_INVALID_DRIVE;
1a003388:	200b      	movs	r0, #11
1a00338a:	e7f5      	b.n	1a003378 <f_mount+0x38>
1a00338c:	10000848 	.word	0x10000848

1a003390 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
1a003390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003394:	b099      	sub	sp, #100	; 0x64
1a003396:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
1a003398:	2800      	cmp	r0, #0
1a00339a:	f000 8153 	beq.w	1a003644 <f_open+0x2b4>
1a00339e:	4604      	mov	r4, r0
1a0033a0:	4616      	mov	r6, r2

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
1a0033a2:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
1a0033a6:	463a      	mov	r2, r7
1a0033a8:	a903      	add	r1, sp, #12
1a0033aa:	a801      	add	r0, sp, #4
1a0033ac:	f7fe fb66 	bl	1a001a7c <find_volume>
	if (res == FR_OK) {
1a0033b0:	4605      	mov	r5, r0
1a0033b2:	b130      	cbz	r0, 1a0033c2 <f_open+0x32>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
1a0033b4:	b10d      	cbz	r5, 1a0033ba <f_open+0x2a>
1a0033b6:	2300      	movs	r3, #0
1a0033b8:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
1a0033ba:	4628      	mov	r0, r5
1a0033bc:	b019      	add	sp, #100	; 0x64
1a0033be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dj.obj.fs = fs;
1a0033c2:	9b03      	ldr	r3, [sp, #12]
1a0033c4:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
1a0033c6:	9901      	ldr	r1, [sp, #4]
1a0033c8:	a804      	add	r0, sp, #16
1a0033ca:	f7ff fe15 	bl	1a002ff8 <follow_path>
		if (res == FR_OK) {
1a0033ce:	4605      	mov	r5, r0
1a0033d0:	b918      	cbnz	r0, 1a0033da <f_open+0x4a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
1a0033d2:	f99d 305b 	ldrsb.w	r3, [sp, #91]	; 0x5b
1a0033d6:	2b00      	cmp	r3, #0
1a0033d8:	db47      	blt.n	1a00346a <f_open+0xda>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
1a0033da:	f016 0f1c 	tst.w	r6, #28
1a0033de:	f000 808a 	beq.w	1a0034f6 <f_open+0x166>
			if (res != FR_OK) {					/* No file, create new */
1a0033e2:	2d00      	cmp	r5, #0
1a0033e4:	d048      	beq.n	1a003478 <f_open+0xe8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
1a0033e6:	2d04      	cmp	r5, #4
1a0033e8:	d041      	beq.n	1a00346e <f_open+0xde>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
1a0033ea:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
1a0033ee:	2d00      	cmp	r5, #0
1a0033f0:	f040 8090 	bne.w	1a003514 <f_open+0x184>
1a0033f4:	f017 0f08 	tst.w	r7, #8
1a0033f8:	f000 808c 	beq.w	1a003514 <f_open+0x184>
				if (fs->fs_type == FS_EXFAT) {
1a0033fc:	9803      	ldr	r0, [sp, #12]
1a0033fe:	7803      	ldrb	r3, [r0, #0]
1a003400:	2b04      	cmp	r3, #4
1a003402:	d043      	beq.n	1a00348c <f_open+0xfc>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
1a003404:	9e13      	ldr	r6, [sp, #76]	; 0x4c
1a003406:	4631      	mov	r1, r6
1a003408:	f7fe f8fc 	bl	1a001604 <ld_clust>
1a00340c:	4680      	mov	r8, r0
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
1a00340e:	f002 fcc5 	bl	1a005d9c <get_fattime>
1a003412:	4601      	mov	r1, r0
1a003414:	f106 000e 	add.w	r0, r6, #14
1a003418:	f7fe f844 	bl	1a0014a4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
1a00341c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a00341e:	2220      	movs	r2, #32
1a003420:	72da      	strb	r2, [r3, #11]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
1a003422:	2200      	movs	r2, #0
1a003424:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a003426:	9803      	ldr	r0, [sp, #12]
1a003428:	f7fe f8ff 	bl	1a00162a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
1a00342c:	2100      	movs	r1, #0
1a00342e:	9813      	ldr	r0, [sp, #76]	; 0x4c
1a003430:	301c      	adds	r0, #28
1a003432:	f7fe f837 	bl	1a0014a4 <st_dword>
					fs->wflag = 1;
1a003436:	9b03      	ldr	r3, [sp, #12]
1a003438:	2201      	movs	r2, #1
1a00343a:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
1a00343c:	f1b8 0f00 	cmp.w	r8, #0
1a003440:	d068      	beq.n	1a003514 <f_open+0x184>
						dw = fs->winsect;
1a003442:	9b03      	ldr	r3, [sp, #12]
1a003444:	6b5e      	ldr	r6, [r3, #52]	; 0x34
						res = remove_chain(&dj.obj, cl, 0);
1a003446:	2200      	movs	r2, #0
1a003448:	4641      	mov	r1, r8
1a00344a:	a804      	add	r0, sp, #16
1a00344c:	f7ff f8a8 	bl	1a0025a0 <remove_chain>
						if (res == FR_OK) {
1a003450:	4605      	mov	r5, r0
1a003452:	2800      	cmp	r0, #0
1a003454:	d15e      	bne.n	1a003514 <f_open+0x184>
							res = move_window(fs, dw);
1a003456:	4631      	mov	r1, r6
1a003458:	9803      	ldr	r0, [sp, #12]
1a00345a:	f7fe fab3 	bl	1a0019c4 <move_window>
1a00345e:	4605      	mov	r5, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
1a003460:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a003464:	9a03      	ldr	r2, [sp, #12]
1a003466:	6153      	str	r3, [r2, #20]
1a003468:	e054      	b.n	1a003514 <f_open+0x184>
				res = FR_INVALID_NAME;
1a00346a:	2506      	movs	r5, #6
1a00346c:	e7b5      	b.n	1a0033da <f_open+0x4a>
					res = dir_register(&dj);
1a00346e:	a804      	add	r0, sp, #16
1a003470:	f7ff fe1c 	bl	1a0030ac <dir_register>
1a003474:	4605      	mov	r5, r0
1a003476:	e7b8      	b.n	1a0033ea <f_open+0x5a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
1a003478:	f89d 3016 	ldrb.w	r3, [sp, #22]
1a00347c:	f013 0f11 	tst.w	r3, #17
1a003480:	d147      	bne.n	1a003512 <f_open+0x182>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
1a003482:	f016 0f04 	tst.w	r6, #4
1a003486:	d0b2      	beq.n	1a0033ee <f_open+0x5e>
1a003488:	2508      	movs	r5, #8
1a00348a:	e043      	b.n	1a003514 <f_open+0x184>
					fp->obj.fs = fs;
1a00348c:	6020      	str	r0, [r4, #0]
					init_alloc_info(fs, &fp->obj);
1a00348e:	4621      	mov	r1, r4
1a003490:	9803      	ldr	r0, [sp, #12]
1a003492:	f7fe f9db 	bl	1a00184c <init_alloc_info>
					mem_set(fs->dirbuf + 2, 0, 30);		/* Clear 85 entry except for NumSec */
1a003496:	9b03      	ldr	r3, [sp, #12]
1a003498:	6918      	ldr	r0, [r3, #16]
1a00349a:	221e      	movs	r2, #30
1a00349c:	2100      	movs	r1, #0
1a00349e:	3002      	adds	r0, #2
1a0034a0:	f7fe f826 	bl	1a0014f0 <mem_set>
					mem_set(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
1a0034a4:	9b03      	ldr	r3, [sp, #12]
1a0034a6:	6918      	ldr	r0, [r3, #16]
1a0034a8:	221a      	movs	r2, #26
1a0034aa:	2100      	movs	r1, #0
1a0034ac:	3026      	adds	r0, #38	; 0x26
1a0034ae:	f7fe f81f 	bl	1a0014f0 <mem_set>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
1a0034b2:	9b03      	ldr	r3, [sp, #12]
1a0034b4:	691a      	ldr	r2, [r3, #16]
1a0034b6:	2120      	movs	r1, #32
1a0034b8:	7111      	strb	r1, [r2, #4]
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
1a0034ba:	691d      	ldr	r5, [r3, #16]
1a0034bc:	f002 fc6e 	bl	1a005d9c <get_fattime>
1a0034c0:	4601      	mov	r1, r0
1a0034c2:	f105 0008 	add.w	r0, r5, #8
1a0034c6:	f7fd ffed 	bl	1a0014a4 <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 1;
1a0034ca:	9b03      	ldr	r3, [sp, #12]
1a0034cc:	691b      	ldr	r3, [r3, #16]
1a0034ce:	2201      	movs	r2, #1
1a0034d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					res = store_xdir(&dj);
1a0034d4:	a804      	add	r0, sp, #16
1a0034d6:	f7ff fae1 	bl	1a002a9c <store_xdir>
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
1a0034da:	4605      	mov	r5, r0
1a0034dc:	b9d0      	cbnz	r0, 1a003514 <f_open+0x184>
1a0034de:	68a1      	ldr	r1, [r4, #8]
1a0034e0:	b1c1      	cbz	r1, 1a003514 <f_open+0x184>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
1a0034e2:	2200      	movs	r2, #0
1a0034e4:	4620      	mov	r0, r4
1a0034e6:	f7ff f85b 	bl	1a0025a0 <remove_chain>
1a0034ea:	4605      	mov	r5, r0
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
1a0034ec:	68a3      	ldr	r3, [r4, #8]
1a0034ee:	3b01      	subs	r3, #1
1a0034f0:	9a03      	ldr	r2, [sp, #12]
1a0034f2:	6153      	str	r3, [r2, #20]
1a0034f4:	e00e      	b.n	1a003514 <f_open+0x184>
			if (res == FR_OK) {					/* Is the object exsiting? */
1a0034f6:	b96d      	cbnz	r5, 1a003514 <f_open+0x184>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
1a0034f8:	f89d 3016 	ldrb.w	r3, [sp, #22]
1a0034fc:	f013 0f10 	tst.w	r3, #16
1a003500:	d14e      	bne.n	1a0035a0 <f_open+0x210>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
1a003502:	f016 0f02 	tst.w	r6, #2
1a003506:	d005      	beq.n	1a003514 <f_open+0x184>
1a003508:	f013 0f01 	tst.w	r3, #1
1a00350c:	d002      	beq.n	1a003514 <f_open+0x184>
						res = FR_DENIED;
1a00350e:	2507      	movs	r5, #7
1a003510:	e00b      	b.n	1a00352a <f_open+0x19a>
					res = FR_DENIED;
1a003512:	2507      	movs	r5, #7
		if (res == FR_OK) {
1a003514:	b94d      	cbnz	r5, 1a00352a <f_open+0x19a>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
1a003516:	f017 0f08 	tst.w	r7, #8
1a00351a:	d001      	beq.n	1a003520 <f_open+0x190>
1a00351c:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
1a003520:	9b03      	ldr	r3, [sp, #12]
1a003522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1a003524:	64a3      	str	r3, [r4, #72]	; 0x48
			fp->dir_ptr = dj.dir;
1a003526:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a003528:	64e3      	str	r3, [r4, #76]	; 0x4c
		if (res == FR_OK) {
1a00352a:	2d00      	cmp	r5, #0
1a00352c:	f47f af42 	bne.w	1a0033b4 <f_open+0x24>
			if (fs->fs_type == FS_EXFAT) {
1a003530:	9803      	ldr	r0, [sp, #12]
1a003532:	7803      	ldrb	r3, [r0, #0]
1a003534:	2b04      	cmp	r3, #4
1a003536:	d035      	beq.n	1a0035a4 <f_open+0x214>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
1a003538:	9e13      	ldr	r6, [sp, #76]	; 0x4c
1a00353a:	4631      	mov	r1, r6
1a00353c:	f7fe f862 	bl	1a001604 <ld_clust>
1a003540:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
1a003542:	f106 001c 	add.w	r0, r6, #28
1a003546:	f7fd ff4a 	bl	1a0013de <ld_dword>
1a00354a:	6120      	str	r0, [r4, #16]
1a00354c:	2300      	movs	r3, #0
1a00354e:	6163      	str	r3, [r4, #20]
			fp->obj.fs = fs;	 	/* Validate the file object */
1a003550:	9b03      	ldr	r3, [sp, #12]
1a003552:	6023      	str	r3, [r4, #0]
			fp->obj.id = fs->id;
1a003554:	88db      	ldrh	r3, [r3, #6]
1a003556:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
1a003558:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
1a00355c:	2100      	movs	r1, #0
1a00355e:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
1a003562:	6461      	str	r1, [r4, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
1a003564:	2200      	movs	r2, #0
1a003566:	2300      	movs	r3, #0
1a003568:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
			mem_set(fp->buf, 0, FF_MAX_SS);	/* Clear sector buffer */
1a00356c:	f104 0a50 	add.w	sl, r4, #80	; 0x50
1a003570:	f44f 7200 	mov.w	r2, #512	; 0x200
1a003574:	4650      	mov	r0, sl
1a003576:	f7fd ffbb 	bl	1a0014f0 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
1a00357a:	f017 0f20 	tst.w	r7, #32
1a00357e:	f43f af19 	beq.w	1a0033b4 <f_open+0x24>
1a003582:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
1a003586:	ea56 0307 	orrs.w	r3, r6, r7
1a00358a:	f43f af13 	beq.w	1a0033b4 <f_open+0x24>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
1a00358e:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
1a003592:	9b03      	ldr	r3, [sp, #12]
1a003594:	f8b3 b00a 	ldrh.w	fp, [r3, #10]
1a003598:	ea4f 2b4b 	mov.w	fp, fp, lsl #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
1a00359c:	68a1      	ldr	r1, [r4, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
1a00359e:	e017      	b.n	1a0035d0 <f_open+0x240>
					res = FR_NO_FILE;
1a0035a0:	2504      	movs	r5, #4
1a0035a2:	e7c2      	b.n	1a00352a <f_open+0x19a>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
1a0035a4:	9b06      	ldr	r3, [sp, #24]
1a0035a6:	6223      	str	r3, [r4, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
1a0035a8:	9b08      	ldr	r3, [sp, #32]
1a0035aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0035ae:	f89d 2017 	ldrb.w	r2, [sp, #23]
1a0035b2:	4313      	orrs	r3, r2
1a0035b4:	6263      	str	r3, [r4, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
1a0035b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1a0035b8:	62a3      	str	r3, [r4, #40]	; 0x28
				init_alloc_info(fs, &fp->obj);
1a0035ba:	4621      	mov	r1, r4
1a0035bc:	f7fe f946 	bl	1a00184c <init_alloc_info>
1a0035c0:	e7c6      	b.n	1a003550 <f_open+0x1c0>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
1a0035c2:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
1a0035c6:	d013      	beq.n	1a0035f0 <f_open+0x260>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
1a0035c8:	ebb6 0608 	subs.w	r6, r6, r8
1a0035cc:	eb67 0709 	sbc.w	r7, r7, r9
1a0035d0:	b985      	cbnz	r5, 1a0035f4 <f_open+0x264>
1a0035d2:	46d8      	mov	r8, fp
1a0035d4:	f04f 0900 	mov.w	r9, #0
1a0035d8:	45b9      	cmp	r9, r7
1a0035da:	bf08      	it	eq
1a0035dc:	45b3      	cmpeq	fp, r6
1a0035de:	d209      	bcs.n	1a0035f4 <f_open+0x264>
					clst = get_fat(&fp->obj, clst);
1a0035e0:	4620      	mov	r0, r4
1a0035e2:	f7fe fde4 	bl	1a0021ae <get_fat>
1a0035e6:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
1a0035e8:	2801      	cmp	r0, #1
1a0035ea:	d8ea      	bhi.n	1a0035c2 <f_open+0x232>
1a0035ec:	2502      	movs	r5, #2
1a0035ee:	e7e8      	b.n	1a0035c2 <f_open+0x232>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
1a0035f0:	2501      	movs	r5, #1
1a0035f2:	e7e9      	b.n	1a0035c8 <f_open+0x238>
				fp->clust = clst;
1a0035f4:	6421      	str	r1, [r4, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
1a0035f6:	2d00      	cmp	r5, #0
1a0035f8:	f47f aedc 	bne.w	1a0033b4 <f_open+0x24>
1a0035fc:	f240 12ff 	movw	r2, #511	; 0x1ff
1a003600:	2300      	movs	r3, #0
1a003602:	ea02 0806 	and.w	r8, r2, r6
1a003606:	ea03 0907 	and.w	r9, r3, r7
1a00360a:	ea58 0309 	orrs.w	r3, r8, r9
1a00360e:	f43f aed1 	beq.w	1a0033b4 <f_open+0x24>
					if ((sc = clst2sect(fs, clst)) == 0) {
1a003612:	f8dd 800c 	ldr.w	r8, [sp, #12]
1a003616:	4640      	mov	r0, r8
1a003618:	f7fd ffe8 	bl	1a0015ec <clst2sect>
1a00361c:	4602      	mov	r2, r0
1a00361e:	b908      	cbnz	r0, 1a003624 <f_open+0x294>
						res = FR_INT_ERR;
1a003620:	2502      	movs	r5, #2
1a003622:	e6c8      	b.n	1a0033b6 <f_open+0x26>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
1a003624:	0a73      	lsrs	r3, r6, #9
1a003626:	ea43 53c7 	orr.w	r3, r3, r7, lsl #23
1a00362a:	441a      	add	r2, r3
1a00362c:	6462      	str	r2, [r4, #68]	; 0x44
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
1a00362e:	2301      	movs	r3, #1
1a003630:	4651      	mov	r1, sl
1a003632:	f898 0001 	ldrb.w	r0, [r8, #1]
1a003636:	f002 fbdd 	bl	1a005df4 <disk_read>
1a00363a:	2800      	cmp	r0, #0
1a00363c:	f43f aeba 	beq.w	1a0033b4 <f_open+0x24>
1a003640:	2501      	movs	r5, #1
1a003642:	e6b8      	b.n	1a0033b6 <f_open+0x26>
	if (!fp) return FR_INVALID_OBJECT;
1a003644:	2509      	movs	r5, #9
1a003646:	e6b8      	b.n	1a0033ba <f_open+0x2a>

1a003648 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
1a003648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00364c:	b085      	sub	sp, #20
1a00364e:	4604      	mov	r4, r0
1a003650:	460e      	mov	r6, r1
1a003652:	4615      	mov	r5, r2
1a003654:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
1a003656:	2300      	movs	r3, #0
1a003658:	603b      	str	r3, [r7, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
1a00365a:	9000      	str	r0, [sp, #0]
1a00365c:	a903      	add	r1, sp, #12
1a00365e:	f7fe f965 	bl	1a00192c <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
1a003662:	4680      	mov	r8, r0
1a003664:	2800      	cmp	r0, #0
1a003666:	f040 80f1 	bne.w	1a00384c <f_write+0x204>
1a00366a:	f894 8031 	ldrb.w	r8, [r4, #49]	; 0x31
1a00366e:	f1b8 0f00 	cmp.w	r8, #0
1a003672:	f040 80eb 	bne.w	1a00384c <f_write+0x204>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
1a003676:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a00367a:	f013 0f02 	tst.w	r3, #2
1a00367e:	f000 8100 	beq.w	1a003882 <f_write+0x23a>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
1a003682:	9b03      	ldr	r3, [sp, #12]
1a003684:	781b      	ldrb	r3, [r3, #0]
1a003686:	2b04      	cmp	r3, #4
1a003688:	f000 808a 	beq.w	1a0037a0 <f_write+0x158>
1a00368c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a00368e:	42eb      	cmn	r3, r5
1a003690:	f0c0 8086 	bcc.w	1a0037a0 <f_write+0x158>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
1a003694:	43dd      	mvns	r5, r3
1a003696:	e083      	b.n	1a0037a0 <f_write+0x158>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
			if (csect == 0) {				/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
					clst = fp->obj.sclust;	/* Follow from the origin */
					if (clst == 0) {		/* If no cluster is allocated, */
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
1a003698:	2100      	movs	r1, #0
1a00369a:	9800      	ldr	r0, [sp, #0]
1a00369c:	f7fe fe9a 	bl	1a0023d4 <create_chain>
1a0036a0:	e09e      	b.n	1a0037e0 <f_write+0x198>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
1a0036a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
1a0036a4:	9800      	ldr	r0, [sp, #0]
1a0036a6:	f7fe fe95 	bl	1a0023d4 <create_chain>
1a0036aa:	e099      	b.n	1a0037e0 <f_write+0x198>
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fs, FR_INT_ERR);
1a0036ac:	f04f 0802 	mov.w	r8, #2
1a0036b0:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
1a0036b4:	e0ca      	b.n	1a00384c <f_write+0x204>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
1a0036b6:	f04f 0801 	mov.w	r8, #1
1a0036ba:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
1a0036be:	e0c5      	b.n	1a00384c <f_write+0x204>
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
1a0036c0:	2301      	movs	r3, #1
1a0036c2:	6c62      	ldr	r2, [r4, #68]	; 0x44
1a0036c4:	f104 0150 	add.w	r1, r4, #80	; 0x50
1a0036c8:	9803      	ldr	r0, [sp, #12]
1a0036ca:	7840      	ldrb	r0, [r0, #1]
1a0036cc:	f002 fba2 	bl	1a005e14 <disk_write>
1a0036d0:	b930      	cbnz	r0, 1a0036e0 <f_write+0x98>
				fp->flag &= (BYTE)~FA_DIRTY;
1a0036d2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a0036d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1a0036da:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
1a0036de:	e091      	b.n	1a003804 <f_write+0x1bc>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
1a0036e0:	f04f 0801 	mov.w	r8, #1
1a0036e4:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
1a0036e8:	e0b0      	b.n	1a00384c <f_write+0x204>
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
			if (sect == 0) ABORT(fs, FR_INT_ERR);
1a0036ea:	f04f 0802 	mov.w	r8, #2
1a0036ee:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
1a0036f2:	e0ab      	b.n	1a00384c <f_write+0x204>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
1a0036f4:	6c61      	ldr	r1, [r4, #68]	; 0x44
1a0036f6:	eba1 0109 	sub.w	r1, r1, r9
1a0036fa:	4551      	cmp	r1, sl
1a0036fc:	d302      	bcc.n	1a003704 <f_write+0xbc>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
1a0036fe:	ea4f 294a 	mov.w	r9, sl, lsl #9
				continue;
1a003702:	e031      	b.n	1a003768 <f_write+0x120>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
1a003704:	f44f 7200 	mov.w	r2, #512	; 0x200
1a003708:	eb06 2141 	add.w	r1, r6, r1, lsl #9
1a00370c:	f104 0050 	add.w	r0, r4, #80	; 0x50
1a003710:	f7fd fee5 	bl	1a0014de <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
1a003714:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a003718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1a00371c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
1a003720:	e7ed      	b.n	1a0036fe <f_write+0xb6>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
1a003722:	6c63      	ldr	r3, [r4, #68]	; 0x44
1a003724:	454b      	cmp	r3, r9
1a003726:	d008      	beq.n	1a00373a <f_write+0xf2>
				fp->fptr < fp->obj.objsize &&
1a003728:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
1a00372c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
1a003730:	4299      	cmp	r1, r3
1a003732:	bf08      	it	eq
1a003734:	4290      	cmpeq	r0, r2
1a003736:	f0c0 808d 	bcc.w	1a003854 <f_write+0x20c>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
			}
#endif
			fp->sect = sect;
1a00373a:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
1a00373e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a003740:	f3c3 0308 	ubfx	r3, r3, #0, #9
1a003744:	f5c3 7900 	rsb	r9, r3, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
1a003748:	454d      	cmp	r5, r9
1a00374a:	d200      	bcs.n	1a00374e <f_write+0x106>
1a00374c:	46a9      	mov	r9, r5
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
1a00374e:	f104 0050 	add.w	r0, r4, #80	; 0x50
1a003752:	464a      	mov	r2, r9
1a003754:	4631      	mov	r1, r6
1a003756:	4418      	add	r0, r3
1a003758:	f7fd fec1 	bl	1a0014de <mem_cpy>
		fp->flag |= FA_DIRTY;
1a00375c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a003760:	f063 037f 	orn	r3, r3, #127	; 0x7f
1a003764:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
1a003768:	eba5 0509 	sub.w	r5, r5, r9
1a00376c:	683b      	ldr	r3, [r7, #0]
1a00376e:	444b      	add	r3, r9
1a003770:	603b      	str	r3, [r7, #0]
1a003772:	444e      	add	r6, r9
1a003774:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
1a003778:	eb12 0a09 	adds.w	sl, r2, r9
1a00377c:	f143 0b00 	adc.w	fp, r3, #0
1a003780:	e9c4 ab0e 	strd	sl, fp, [r4, #56]	; 0x38
1a003784:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
1a003788:	46d6      	mov	lr, sl
1a00378a:	46dc      	mov	ip, fp
1a00378c:	458b      	cmp	fp, r1
1a00378e:	bf08      	it	eq
1a003790:	4582      	cmpeq	sl, r0
1a003792:	d201      	bcs.n	1a003798 <f_write+0x150>
1a003794:	4686      	mov	lr, r0
1a003796:	468c      	mov	ip, r1
1a003798:	f8c4 e010 	str.w	lr, [r4, #16]
1a00379c:	f8c4 c014 	str.w	ip, [r4, #20]
	for ( ;  btw;							/* Repeat until all data written */
1a0037a0:	2d00      	cmp	r5, #0
1a0037a2:	d067      	beq.n	1a003874 <f_write+0x22c>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
1a0037a4:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
1a0037a8:	f240 12ff 	movw	r2, #511	; 0x1ff
1a0037ac:	2300      	movs	r3, #0
1a0037ae:	ea02 0900 	and.w	r9, r2, r0
1a0037b2:	ea03 0a01 	and.w	sl, r3, r1
1a0037b6:	ea59 030a 	orrs.w	r3, r9, sl
1a0037ba:	d1c0      	bne.n	1a00373e <f_write+0xf6>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
1a0037bc:	ea4f 2b50 	mov.w	fp, r0, lsr #9
1a0037c0:	ea4b 5bc1 	orr.w	fp, fp, r1, lsl #23
1a0037c4:	9b03      	ldr	r3, [sp, #12]
1a0037c6:	895b      	ldrh	r3, [r3, #10]
1a0037c8:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
1a0037ca:	ea1b 0b03 	ands.w	fp, fp, r3
1a0037ce:	d114      	bne.n	1a0037fa <f_write+0x1b2>
				if (fp->fptr == 0) {		/* On the top of the file? */
1a0037d0:	ea50 0301 	orrs.w	r3, r0, r1
1a0037d4:	f47f af65 	bne.w	1a0036a2 <f_write+0x5a>
					clst = fp->obj.sclust;	/* Follow from the origin */
1a0037d8:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
1a0037da:	2800      	cmp	r0, #0
1a0037dc:	f43f af5c 	beq.w	1a003698 <f_write+0x50>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
1a0037e0:	2800      	cmp	r0, #0
1a0037e2:	d047      	beq.n	1a003874 <f_write+0x22c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
1a0037e4:	2801      	cmp	r0, #1
1a0037e6:	f43f af61 	beq.w	1a0036ac <f_write+0x64>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
1a0037ea:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0037ee:	f43f af62 	beq.w	1a0036b6 <f_write+0x6e>
				fp->clust = clst;			/* Update current cluster */
1a0037f2:	6420      	str	r0, [r4, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
1a0037f4:	68a3      	ldr	r3, [r4, #8]
1a0037f6:	b903      	cbnz	r3, 1a0037fa <f_write+0x1b2>
1a0037f8:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
1a0037fa:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
1a0037fe:	2b00      	cmp	r3, #0
1a003800:	f6ff af5e 	blt.w	1a0036c0 <f_write+0x78>
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
1a003804:	9b03      	ldr	r3, [sp, #12]
1a003806:	9301      	str	r3, [sp, #4]
1a003808:	6c21      	ldr	r1, [r4, #64]	; 0x40
1a00380a:	4618      	mov	r0, r3
1a00380c:	f7fd feee 	bl	1a0015ec <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
1a003810:	4681      	mov	r9, r0
1a003812:	2800      	cmp	r0, #0
1a003814:	f43f af69 	beq.w	1a0036ea <f_write+0xa2>
			sect += csect;
1a003818:	44d9      	add	r9, fp
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
1a00381a:	ea5f 2a55 	movs.w	sl, r5, lsr #9
1a00381e:	d080      	beq.n	1a003722 <f_write+0xda>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
1a003820:	eb0b 030a 	add.w	r3, fp, sl
1a003824:	9a01      	ldr	r2, [sp, #4]
1a003826:	8952      	ldrh	r2, [r2, #10]
1a003828:	4293      	cmp	r3, r2
1a00382a:	d901      	bls.n	1a003830 <f_write+0x1e8>
					cc = fs->csize - csect;
1a00382c:	eba2 0a0b 	sub.w	sl, r2, fp
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
1a003830:	4653      	mov	r3, sl
1a003832:	464a      	mov	r2, r9
1a003834:	4631      	mov	r1, r6
1a003836:	9801      	ldr	r0, [sp, #4]
1a003838:	7840      	ldrb	r0, [r0, #1]
1a00383a:	f002 faeb 	bl	1a005e14 <disk_write>
1a00383e:	2800      	cmp	r0, #0
1a003840:	f43f af58 	beq.w	1a0036f4 <f_write+0xac>
1a003844:	f04f 0801 	mov.w	r8, #1
1a003848:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
1a00384c:	4640      	mov	r0, r8
1a00384e:	b005      	add	sp, #20
1a003850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
1a003854:	2301      	movs	r3, #1
1a003856:	464a      	mov	r2, r9
1a003858:	f104 0150 	add.w	r1, r4, #80	; 0x50
1a00385c:	9801      	ldr	r0, [sp, #4]
1a00385e:	7840      	ldrb	r0, [r0, #1]
1a003860:	f002 fac8 	bl	1a005df4 <disk_read>
				fp->fptr < fp->obj.objsize &&
1a003864:	2800      	cmp	r0, #0
1a003866:	f43f af68 	beq.w	1a00373a <f_write+0xf2>
					ABORT(fs, FR_DISK_ERR);
1a00386a:	f04f 0801 	mov.w	r8, #1
1a00386e:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
1a003872:	e7eb      	b.n	1a00384c <f_write+0x204>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
1a003874:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a003878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00387c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	LEAVE_FF(fs, FR_OK);
1a003880:	e7e4      	b.n	1a00384c <f_write+0x204>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
1a003882:	f04f 0807 	mov.w	r8, #7
1a003886:	e7e1      	b.n	1a00384c <f_write+0x204>

1a003888 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
1a003888:	b570      	push	{r4, r5, r6, lr}
1a00388a:	b096      	sub	sp, #88	; 0x58
1a00388c:	4604      	mov	r4, r0
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
1a00388e:	a915      	add	r1, sp, #84	; 0x54
1a003890:	f7fe f84c 	bl	1a00192c <validate>
	if (res == FR_OK) {
1a003894:	4603      	mov	r3, r0
1a003896:	b9a0      	cbnz	r0, 1a0038c2 <f_sync+0x3a>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
1a003898:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
1a00389c:	f012 0f40 	tst.w	r2, #64	; 0x40
1a0038a0:	d00f      	beq.n	1a0038c2 <f_sync+0x3a>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
1a0038a2:	f012 0f80 	tst.w	r2, #128	; 0x80
1a0038a6:	d10f      	bne.n	1a0038c8 <f_sync+0x40>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
1a0038a8:	f002 fa78 	bl	1a005d9c <get_fattime>
1a0038ac:	4606      	mov	r6, r0
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
1a0038ae:	9815      	ldr	r0, [sp, #84]	; 0x54
1a0038b0:	7803      	ldrb	r3, [r0, #0]
1a0038b2:	2b04      	cmp	r3, #4
1a0038b4:	d01a      	beq.n	1a0038ec <f_sync+0x64>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
1a0038b6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
1a0038b8:	f7fe f884 	bl	1a0019c4 <move_window>
				if (res == FR_OK) {
1a0038bc:	4603      	mov	r3, r0
1a0038be:	2800      	cmp	r0, #0
1a0038c0:	d069      	beq.n	1a003996 <f_sync+0x10e>
			}
		}
	}

	LEAVE_FF(fs, res);
}
1a0038c2:	4618      	mov	r0, r3
1a0038c4:	b016      	add	sp, #88	; 0x58
1a0038c6:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
1a0038c8:	2301      	movs	r3, #1
1a0038ca:	6c62      	ldr	r2, [r4, #68]	; 0x44
1a0038cc:	f104 0150 	add.w	r1, r4, #80	; 0x50
1a0038d0:	9815      	ldr	r0, [sp, #84]	; 0x54
1a0038d2:	7840      	ldrb	r0, [r0, #1]
1a0038d4:	f002 fa9e 	bl	1a005e14 <disk_write>
1a0038d8:	2800      	cmp	r0, #0
1a0038da:	f040 8083 	bne.w	1a0039e4 <f_sync+0x15c>
				fp->flag &= (BYTE)~FA_DIRTY;
1a0038de:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a0038e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1a0038e6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
1a0038ea:	e7dd      	b.n	1a0038a8 <f_sync+0x20>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
1a0038ec:	4620      	mov	r0, r4
1a0038ee:	f7fe fc45 	bl	1a00217c <fill_first_frag>
				if (res == FR_OK) {
1a0038f2:	4603      	mov	r3, r0
1a0038f4:	2800      	cmp	r0, #0
1a0038f6:	d046      	beq.n	1a003986 <f_sync+0xfe>
				if (res == FR_OK) {
1a0038f8:	2b00      	cmp	r3, #0
1a0038fa:	d1e2      	bne.n	1a0038c2 <f_sync+0x3a>
					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
1a0038fc:	4621      	mov	r1, r4
1a0038fe:	4668      	mov	r0, sp
1a003900:	f7ff f804 	bl	1a00290c <load_obj_xdir>
					if (res == FR_OK) {
1a003904:	4603      	mov	r3, r0
1a003906:	2800      	cmp	r0, #0
1a003908:	d1db      	bne.n	1a0038c2 <f_sync+0x3a>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
1a00390a:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a00390c:	6919      	ldr	r1, [r3, #16]
1a00390e:	790a      	ldrb	r2, [r1, #4]
1a003910:	f042 0220 	orr.w	r2, r2, #32
1a003914:	710a      	strb	r2, [r1, #4]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
1a003916:	79e2      	ldrb	r2, [r4, #7]
1a003918:	6919      	ldr	r1, [r3, #16]
1a00391a:	f042 0201 	orr.w	r2, r2, #1
1a00391e:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
1a003922:	6918      	ldr	r0, [r3, #16]
1a003924:	68a1      	ldr	r1, [r4, #8]
1a003926:	3034      	adds	r0, #52	; 0x34
1a003928:	f7fd fdbc 	bl	1a0014a4 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
1a00392c:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a00392e:	6918      	ldr	r0, [r3, #16]
1a003930:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
1a003934:	3038      	adds	r0, #56	; 0x38
1a003936:	f7fd fdbf 	bl	1a0014b8 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
1a00393a:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a00393c:	6918      	ldr	r0, [r3, #16]
1a00393e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
1a003942:	3028      	adds	r0, #40	; 0x28
1a003944:	f7fd fdb8 	bl	1a0014b8 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
1a003948:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a00394a:	6918      	ldr	r0, [r3, #16]
1a00394c:	4631      	mov	r1, r6
1a00394e:	300c      	adds	r0, #12
1a003950:	f7fd fda8 	bl	1a0014a4 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
1a003954:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a003956:	691a      	ldr	r2, [r3, #16]
1a003958:	2100      	movs	r1, #0
1a00395a:	7551      	strb	r1, [r2, #21]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
1a00395c:	6918      	ldr	r0, [r3, #16]
1a00395e:	3010      	adds	r0, #16
1a003960:	f7fd fda0 	bl	1a0014a4 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
1a003964:	4668      	mov	r0, sp
1a003966:	f7ff f899 	bl	1a002a9c <store_xdir>
						if (res == FR_OK) {
1a00396a:	4603      	mov	r3, r0
1a00396c:	2800      	cmp	r0, #0
1a00396e:	d1a8      	bne.n	1a0038c2 <f_sync+0x3a>
							res = sync_fs(fs);
1a003970:	9815      	ldr	r0, [sp, #84]	; 0x54
1a003972:	f7ff fc9f 	bl	1a0032b4 <sync_fs>
1a003976:	4603      	mov	r3, r0
							fp->flag &= (BYTE)~FA_MODIFIED;
1a003978:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
1a00397c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
1a003980:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
1a003984:	e79d      	b.n	1a0038c2 <f_sync+0x3a>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
1a003986:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00398a:	6c21      	ldr	r1, [r4, #64]	; 0x40
1a00398c:	4620      	mov	r0, r4
1a00398e:	f7fe fbdd 	bl	1a00214c <fill_last_frag>
1a003992:	4603      	mov	r3, r0
1a003994:	e7b0      	b.n	1a0038f8 <f_sync+0x70>
					dir = fp->dir_ptr;
1a003996:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
1a003998:	7aeb      	ldrb	r3, [r5, #11]
1a00399a:	f043 0320 	orr.w	r3, r3, #32
1a00399e:	72eb      	strb	r3, [r5, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
1a0039a0:	68a2      	ldr	r2, [r4, #8]
1a0039a2:	4629      	mov	r1, r5
1a0039a4:	6820      	ldr	r0, [r4, #0]
1a0039a6:	f7fd fe40 	bl	1a00162a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
1a0039aa:	6921      	ldr	r1, [r4, #16]
1a0039ac:	f105 001c 	add.w	r0, r5, #28
1a0039b0:	f7fd fd78 	bl	1a0014a4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
1a0039b4:	4631      	mov	r1, r6
1a0039b6:	f105 0016 	add.w	r0, r5, #22
1a0039ba:	f7fd fd73 	bl	1a0014a4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
1a0039be:	2100      	movs	r1, #0
1a0039c0:	f105 0012 	add.w	r0, r5, #18
1a0039c4:	f7fd fd6a 	bl	1a00149c <st_word>
					fs->wflag = 1;
1a0039c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a0039ca:	2201      	movs	r2, #1
1a0039cc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
1a0039ce:	9815      	ldr	r0, [sp, #84]	; 0x54
1a0039d0:	f7ff fc70 	bl	1a0032b4 <sync_fs>
1a0039d4:	4603      	mov	r3, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
1a0039d6:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
1a0039da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
1a0039de:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
1a0039e2:	e76e      	b.n	1a0038c2 <f_sync+0x3a>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
1a0039e4:	2301      	movs	r3, #1
1a0039e6:	e76c      	b.n	1a0038c2 <f_sync+0x3a>

1a0039e8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
1a0039e8:	b510      	push	{r4, lr}
1a0039ea:	b082      	sub	sp, #8
1a0039ec:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
1a0039ee:	f7ff ff4b 	bl	1a003888 <f_sync>
	if (res == FR_OK)
1a0039f2:	4603      	mov	r3, r0
1a0039f4:	b110      	cbz	r0, 1a0039fc <f_close+0x14>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
1a0039f6:	4618      	mov	r0, r3
1a0039f8:	b002      	add	sp, #8
1a0039fa:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
1a0039fc:	a901      	add	r1, sp, #4
1a0039fe:	4620      	mov	r0, r4
1a003a00:	f7fd ff94 	bl	1a00192c <validate>
		if (res == FR_OK) {
1a003a04:	4603      	mov	r3, r0
1a003a06:	2800      	cmp	r0, #0
1a003a08:	d1f5      	bne.n	1a0039f6 <f_close+0xe>
			fp->obj.fs = 0;	/* Invalidate file object */
1a003a0a:	2200      	movs	r2, #0
1a003a0c:	6022      	str	r2, [r4, #0]
1a003a0e:	e7f2      	b.n	1a0039f6 <f_close+0xe>

1a003a10 <ff_uni2oem>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
1a003a10:	287f      	cmp	r0, #127	; 0x7f
1a003a12:	d908      	bls.n	1a003a26 <ff_uni2oem+0x16>
		c = (WCHAR)uni;

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
1a003a14:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
1a003a18:	d215      	bcs.n	1a003a46 <ff_uni2oem+0x36>
1a003a1a:	f240 3352 	movw	r3, #850	; 0x352
1a003a1e:	4299      	cmp	r1, r3
1a003a20:	d003      	beq.n	1a003a2a <ff_uni2oem+0x1a>
	WCHAR c = 0;
1a003a22:	2000      	movs	r0, #0
1a003a24:	4770      	bx	lr
		c = (WCHAR)uni;
1a003a26:	b280      	uxth	r0, r0
1a003a28:	4770      	bx	lr
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
1a003a2a:	2300      	movs	r3, #0
1a003a2c:	2b7f      	cmp	r3, #127	; 0x7f
1a003a2e:	d807      	bhi.n	1a003a40 <ff_uni2oem+0x30>
1a003a30:	4a06      	ldr	r2, [pc, #24]	; (1a003a4c <ff_uni2oem+0x3c>)
1a003a32:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
1a003a36:	4282      	cmp	r2, r0
1a003a38:	d002      	beq.n	1a003a40 <ff_uni2oem+0x30>
1a003a3a:	3301      	adds	r3, #1
1a003a3c:	b29b      	uxth	r3, r3
1a003a3e:	e7f5      	b.n	1a003a2c <ff_uni2oem+0x1c>
			c = (c + 0x80) & 0xFF;
1a003a40:	3380      	adds	r3, #128	; 0x80
1a003a42:	b2d8      	uxtb	r0, r3
1a003a44:	4770      	bx	lr
	WCHAR c = 0;
1a003a46:	2000      	movs	r0, #0
		}
	}

	return c;
}
1a003a48:	4770      	bx	lr
1a003a4a:	bf00      	nop
1a003a4c:	1a008314 	.word	0x1a008314

1a003a50 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
1a003a50:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
1a003a54:	d245      	bcs.n	1a003ae2 <ff_wtoupper+0x92>
{
1a003a56:	b4f0      	push	{r4, r5, r6, r7}
		uc = (WORD)uni;
1a003a58:	b287      	uxth	r7, r0
		p = uc < 0x1000 ? cvt1 : cvt2;
1a003a5a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
1a003a5e:	d201      	bcs.n	1a003a64 <ff_wtoupper+0x14>
1a003a60:	4b20      	ldr	r3, [pc, #128]	; (1a003ae4 <ff_wtoupper+0x94>)
1a003a62:	e002      	b.n	1a003a6a <ff_wtoupper+0x1a>
1a003a64:	4b20      	ldr	r3, [pc, #128]	; (1a003ae8 <ff_wtoupper+0x98>)
1a003a66:	e000      	b.n	1a003a6a <ff_wtoupper+0x1a>
		for (;;) {
			bc = *p++;								/* Get the block base */
			if (bc == 0 || uc < bc) break;			/* Not matched? */
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
1a003a68:	4633      	mov	r3, r6
			bc = *p++;								/* Get the block base */
1a003a6a:	881a      	ldrh	r2, [r3, #0]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
1a003a6c:	b1d2      	cbz	r2, 1a003aa4 <ff_wtoupper+0x54>
1a003a6e:	4297      	cmp	r7, r2
1a003a70:	d318      	bcc.n	1a003aa4 <ff_wtoupper+0x54>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
1a003a72:	1d1e      	adds	r6, r3, #4
1a003a74:	885b      	ldrh	r3, [r3, #2]
1a003a76:	0a19      	lsrs	r1, r3, #8
1a003a78:	b2db      	uxtb	r3, r3
			if (uc < bc + nc) {	/* In the block? */
1a003a7a:	b284      	uxth	r4, r0
1a003a7c:	189d      	adds	r5, r3, r2
1a003a7e:	42ac      	cmp	r4, r5
1a003a80:	db04      	blt.n	1a003a8c <ff_wtoupper+0x3c>
				case 7: uc -= 80; break;			/* Shift -80 */
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
1a003a82:	2900      	cmp	r1, #0
1a003a84:	d1f0      	bne.n	1a003a68 <ff_wtoupper+0x18>
1a003a86:	eb06 0343 	add.w	r3, r6, r3, lsl #1
1a003a8a:	e7ee      	b.n	1a003a6a <ff_wtoupper+0x1a>
				switch (cmd) {
1a003a8c:	2908      	cmp	r1, #8
1a003a8e:	d809      	bhi.n	1a003aa4 <ff_wtoupper+0x54>
1a003a90:	e8df f001 	tbb	[pc, r1]
1a003a94:	14110b05 	.word	0x14110b05
1a003a98:	201d1a17 	.word	0x201d1a17
1a003a9c:	23          	.byte	0x23
1a003a9d:	00          	.byte	0x00
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
1a003a9e:	1aa4      	subs	r4, r4, r2
1a003aa0:	f836 7014 	ldrh.w	r7, [r6, r4, lsl #1]
		}
		uni = uc;
1a003aa4:	4638      	mov	r0, r7
	}

	return uni;
}
1a003aa6:	bcf0      	pop	{r4, r5, r6, r7}
1a003aa8:	4770      	bx	lr
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
1a003aaa:	1aba      	subs	r2, r7, r2
1a003aac:	f002 0301 	and.w	r3, r2, #1
1a003ab0:	1aff      	subs	r7, r7, r3
1a003ab2:	b2bf      	uxth	r7, r7
1a003ab4:	e7f6      	b.n	1a003aa4 <ff_wtoupper+0x54>
				case 2: uc -= 16; break;			/* Shift -16 */
1a003ab6:	3f10      	subs	r7, #16
1a003ab8:	b2bf      	uxth	r7, r7
1a003aba:	e7f3      	b.n	1a003aa4 <ff_wtoupper+0x54>
				case 3:	uc -= 32; break;			/* Shift -32 */
1a003abc:	3f20      	subs	r7, #32
1a003abe:	b2bf      	uxth	r7, r7
1a003ac0:	e7f0      	b.n	1a003aa4 <ff_wtoupper+0x54>
				case 4:	uc -= 48; break;			/* Shift -48 */
1a003ac2:	3f30      	subs	r7, #48	; 0x30
1a003ac4:	b2bf      	uxth	r7, r7
1a003ac6:	e7ed      	b.n	1a003aa4 <ff_wtoupper+0x54>
				case 5:	uc -= 26; break;			/* Shift -26 */
1a003ac8:	3f1a      	subs	r7, #26
1a003aca:	b2bf      	uxth	r7, r7
1a003acc:	e7ea      	b.n	1a003aa4 <ff_wtoupper+0x54>
				case 6:	uc += 8; break;				/* Shift +8 */
1a003ace:	3708      	adds	r7, #8
1a003ad0:	b2bf      	uxth	r7, r7
1a003ad2:	e7e7      	b.n	1a003aa4 <ff_wtoupper+0x54>
				case 7: uc -= 80; break;			/* Shift -80 */
1a003ad4:	3f50      	subs	r7, #80	; 0x50
1a003ad6:	b2bf      	uxth	r7, r7
1a003ad8:	e7e4      	b.n	1a003aa4 <ff_wtoupper+0x54>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
1a003ada:	f5a7 57e3 	sub.w	r7, r7, #7264	; 0x1c60
1a003ade:	b2bf      	uxth	r7, r7
1a003ae0:	e7e0      	b.n	1a003aa4 <ff_wtoupper+0x54>
}
1a003ae2:	4770      	bx	lr
1a003ae4:	1a008064 	.word	0x1a008064
1a003ae8:	1a008258 	.word	0x1a008258

1a003aec <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a003aec:	b538      	push	{r3, r4, r5, lr}
1a003aee:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
1a003af0:	f010 0f07 	tst.w	r0, #7
1a003af4:	d002      	beq.n	1a003afc <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a003af6:	f020 0407 	bic.w	r4, r0, #7
1a003afa:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
1a003afc:	f000 fe62 	bl	1a0047c4 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
1a003b00:	4b13      	ldr	r3, [pc, #76]	; (1a003b50 <pvPortMalloc+0x64>)
1a003b02:	681b      	ldr	r3, [r3, #0]
1a003b04:	b17b      	cbz	r3, 1a003b26 <pvPortMalloc+0x3a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
1a003b06:	4b13      	ldr	r3, [pc, #76]	; (1a003b54 <pvPortMalloc+0x68>)
1a003b08:	681b      	ldr	r3, [r3, #0]
1a003b0a:	441c      	add	r4, r3
1a003b0c:	f641 72f7 	movw	r2, #8183	; 0x1ff7
1a003b10:	4294      	cmp	r4, r2
1a003b12:	d80e      	bhi.n	1a003b32 <pvPortMalloc+0x46>
1a003b14:	42a3      	cmp	r3, r4
1a003b16:	d310      	bcc.n	1a003b3a <pvPortMalloc+0x4e>
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a003b18:	f000 feee 	bl	1a0048f8 <xTaskResumeAll>
void *pvReturn = NULL;
1a003b1c:	2500      	movs	r5, #0
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a003b1e:	f000 fc0e 	bl	1a00433e <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
1a003b22:	4628      	mov	r0, r5
1a003b24:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a003b26:	4b0c      	ldr	r3, [pc, #48]	; (1a003b58 <pvPortMalloc+0x6c>)
1a003b28:	f023 0307 	bic.w	r3, r3, #7
1a003b2c:	4a08      	ldr	r2, [pc, #32]	; (1a003b50 <pvPortMalloc+0x64>)
1a003b2e:	6013      	str	r3, [r2, #0]
1a003b30:	e7e9      	b.n	1a003b06 <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
1a003b32:	f000 fee1 	bl	1a0048f8 <xTaskResumeAll>
void *pvReturn = NULL;
1a003b36:	2500      	movs	r5, #0
1a003b38:	e7f1      	b.n	1a003b1e <pvPortMalloc+0x32>
			pvReturn = pucAlignedHeap + xNextFreeByte;
1a003b3a:	4a05      	ldr	r2, [pc, #20]	; (1a003b50 <pvPortMalloc+0x64>)
1a003b3c:	6815      	ldr	r5, [r2, #0]
1a003b3e:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
1a003b40:	4b04      	ldr	r3, [pc, #16]	; (1a003b54 <pvPortMalloc+0x68>)
1a003b42:	601c      	str	r4, [r3, #0]
	( void ) xTaskResumeAll();
1a003b44:	f000 fed8 	bl	1a0048f8 <xTaskResumeAll>
		if( pvReturn == NULL )
1a003b48:	2d00      	cmp	r5, #0
1a003b4a:	d1ea      	bne.n	1a003b22 <pvPortMalloc+0x36>
1a003b4c:	e7e7      	b.n	1a003b1e <pvPortMalloc+0x32>
1a003b4e:	bf00      	nop
1a003b50:	10000a54 	.word	0x10000a54
1a003b54:	10002a58 	.word	0x10002a58
1a003b58:	10000a60 	.word	0x10000a60

1a003b5c <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
1a003b5c:	b140      	cbz	r0, 1a003b70 <vPortFree+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a003b5e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003b62:	f383 8811 	msr	BASEPRI, r3
1a003b66:	f3bf 8f6f 	isb	sy
1a003b6a:	f3bf 8f4f 	dsb	sy
1a003b6e:	e7fe      	b.n	1a003b6e <vPortFree+0x12>
}
1a003b70:	4770      	bx	lr

1a003b72 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a003b72:	b510      	push	{r4, lr}
1a003b74:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a003b76:	f001 fb7d 	bl	1a005274 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a003b7a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a003b7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a003b7e:	429a      	cmp	r2, r3
1a003b80:	d004      	beq.n	1a003b8c <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a003b82:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a003b84:	f001 fb98 	bl	1a0052b8 <vPortExitCritical>

	return xReturn;
}
1a003b88:	4620      	mov	r0, r4
1a003b8a:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a003b8c:	2401      	movs	r4, #1
1a003b8e:	e7f9      	b.n	1a003b84 <prvIsQueueFull+0x12>

1a003b90 <prvIsQueueEmpty>:
{
1a003b90:	b510      	push	{r4, lr}
1a003b92:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a003b94:	f001 fb6e 	bl	1a005274 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a003b98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a003b9a:	b123      	cbz	r3, 1a003ba6 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a003b9c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a003b9e:	f001 fb8b 	bl	1a0052b8 <vPortExitCritical>
}
1a003ba2:	4620      	mov	r0, r4
1a003ba4:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a003ba6:	2401      	movs	r4, #1
1a003ba8:	e7f9      	b.n	1a003b9e <prvIsQueueEmpty+0xe>

1a003baa <prvCopyDataToQueue>:
{
1a003baa:	b570      	push	{r4, r5, r6, lr}
1a003bac:	4604      	mov	r4, r0
1a003bae:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a003bb0:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a003bb2:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a003bb4:	b95a      	cbnz	r2, 1a003bce <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a003bb6:	6803      	ldr	r3, [r0, #0]
1a003bb8:	b11b      	cbz	r3, 1a003bc2 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a003bba:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a003bbc:	3501      	adds	r5, #1
1a003bbe:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a003bc0:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a003bc2:	6840      	ldr	r0, [r0, #4]
1a003bc4:	f001 f878 	bl	1a004cb8 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a003bc8:	2300      	movs	r3, #0
1a003bca:	6063      	str	r3, [r4, #4]
1a003bcc:	e7f6      	b.n	1a003bbc <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a003bce:	b96e      	cbnz	r6, 1a003bec <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a003bd0:	6880      	ldr	r0, [r0, #8]
1a003bd2:	f003 fe77 	bl	1a0078c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a003bd6:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a003bd8:	68a3      	ldr	r3, [r4, #8]
1a003bda:	4413      	add	r3, r2
1a003bdc:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a003bde:	6862      	ldr	r2, [r4, #4]
1a003be0:	4293      	cmp	r3, r2
1a003be2:	d319      	bcc.n	1a003c18 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a003be4:	6823      	ldr	r3, [r4, #0]
1a003be6:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a003be8:	2000      	movs	r0, #0
1a003bea:	e7e7      	b.n	1a003bbc <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a003bec:	68c0      	ldr	r0, [r0, #12]
1a003bee:	f003 fe69 	bl	1a0078c4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a003bf2:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a003bf4:	4252      	negs	r2, r2
1a003bf6:	68e3      	ldr	r3, [r4, #12]
1a003bf8:	4413      	add	r3, r2
1a003bfa:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a003bfc:	6821      	ldr	r1, [r4, #0]
1a003bfe:	428b      	cmp	r3, r1
1a003c00:	d202      	bcs.n	1a003c08 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a003c02:	6863      	ldr	r3, [r4, #4]
1a003c04:	441a      	add	r2, r3
1a003c06:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a003c08:	2e02      	cmp	r6, #2
1a003c0a:	d001      	beq.n	1a003c10 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a003c0c:	2000      	movs	r0, #0
1a003c0e:	e7d5      	b.n	1a003bbc <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a003c10:	b125      	cbz	r5, 1a003c1c <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a003c12:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a003c14:	2000      	movs	r0, #0
1a003c16:	e7d1      	b.n	1a003bbc <prvCopyDataToQueue+0x12>
1a003c18:	2000      	movs	r0, #0
1a003c1a:	e7cf      	b.n	1a003bbc <prvCopyDataToQueue+0x12>
1a003c1c:	2000      	movs	r0, #0
1a003c1e:	e7cd      	b.n	1a003bbc <prvCopyDataToQueue+0x12>

1a003c20 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a003c20:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a003c22:	b172      	cbz	r2, 1a003c42 <prvCopyDataFromQueue+0x22>
{
1a003c24:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a003c26:	68c3      	ldr	r3, [r0, #12]
1a003c28:	4413      	add	r3, r2
1a003c2a:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a003c2c:	6844      	ldr	r4, [r0, #4]
1a003c2e:	42a3      	cmp	r3, r4
1a003c30:	d301      	bcc.n	1a003c36 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a003c32:	6803      	ldr	r3, [r0, #0]
1a003c34:	60c3      	str	r3, [r0, #12]
1a003c36:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a003c38:	68c1      	ldr	r1, [r0, #12]
1a003c3a:	4620      	mov	r0, r4
1a003c3c:	f003 fe42 	bl	1a0078c4 <memcpy>
}
1a003c40:	bd10      	pop	{r4, pc}
1a003c42:	4770      	bx	lr

1a003c44 <prvUnlockQueue>:
{
1a003c44:	b538      	push	{r3, r4, r5, lr}
1a003c46:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a003c48:	f001 fb14 	bl	1a005274 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a003c4c:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a003c50:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a003c52:	e003      	b.n	1a003c5c <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a003c54:	f001 f81a 	bl	1a004c8c <vTaskMissedYield>
			--cTxLock;
1a003c58:	3c01      	subs	r4, #1
1a003c5a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a003c5c:	2c00      	cmp	r4, #0
1a003c5e:	dd08      	ble.n	1a003c72 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a003c60:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a003c62:	b133      	cbz	r3, 1a003c72 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a003c64:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a003c68:	f000 ff7e 	bl	1a004b68 <xTaskRemoveFromEventList>
1a003c6c:	2800      	cmp	r0, #0
1a003c6e:	d0f3      	beq.n	1a003c58 <prvUnlockQueue+0x14>
1a003c70:	e7f0      	b.n	1a003c54 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a003c72:	23ff      	movs	r3, #255	; 0xff
1a003c74:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a003c78:	f001 fb1e 	bl	1a0052b8 <vPortExitCritical>
	taskENTER_CRITICAL();
1a003c7c:	f001 fafa 	bl	1a005274 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a003c80:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a003c84:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a003c86:	e003      	b.n	1a003c90 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a003c88:	f001 f800 	bl	1a004c8c <vTaskMissedYield>
				--cRxLock;
1a003c8c:	3c01      	subs	r4, #1
1a003c8e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a003c90:	2c00      	cmp	r4, #0
1a003c92:	dd08      	ble.n	1a003ca6 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a003c94:	692b      	ldr	r3, [r5, #16]
1a003c96:	b133      	cbz	r3, 1a003ca6 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a003c98:	f105 0010 	add.w	r0, r5, #16
1a003c9c:	f000 ff64 	bl	1a004b68 <xTaskRemoveFromEventList>
1a003ca0:	2800      	cmp	r0, #0
1a003ca2:	d0f3      	beq.n	1a003c8c <prvUnlockQueue+0x48>
1a003ca4:	e7f0      	b.n	1a003c88 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a003ca6:	23ff      	movs	r3, #255	; 0xff
1a003ca8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a003cac:	f001 fb04 	bl	1a0052b8 <vPortExitCritical>
}
1a003cb0:	bd38      	pop	{r3, r4, r5, pc}
1a003cb2:	Address 0x000000001a003cb2 is out of bounds.


1a003cb4 <xQueueGenericReset>:
{
1a003cb4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a003cb6:	b940      	cbnz	r0, 1a003cca <xQueueGenericReset+0x16>
1a003cb8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003cbc:	f383 8811 	msr	BASEPRI, r3
1a003cc0:	f3bf 8f6f 	isb	sy
1a003cc4:	f3bf 8f4f 	dsb	sy
1a003cc8:	e7fe      	b.n	1a003cc8 <xQueueGenericReset+0x14>
1a003cca:	4604      	mov	r4, r0
1a003ccc:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a003cce:	f001 fad1 	bl	1a005274 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a003cd2:	6821      	ldr	r1, [r4, #0]
1a003cd4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a003cd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a003cd8:	fb03 1002 	mla	r0, r3, r2, r1
1a003cdc:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a003cde:	2000      	movs	r0, #0
1a003ce0:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a003ce2:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a003ce4:	3a01      	subs	r2, #1
1a003ce6:	fb02 1303 	mla	r3, r2, r3, r1
1a003cea:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a003cec:	23ff      	movs	r3, #255	; 0xff
1a003cee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a003cf2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a003cf6:	b9a5      	cbnz	r5, 1a003d22 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a003cf8:	6923      	ldr	r3, [r4, #16]
1a003cfa:	b91b      	cbnz	r3, 1a003d04 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a003cfc:	f001 fadc 	bl	1a0052b8 <vPortExitCritical>
}
1a003d00:	2001      	movs	r0, #1
1a003d02:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a003d04:	f104 0010 	add.w	r0, r4, #16
1a003d08:	f000 ff2e 	bl	1a004b68 <xTaskRemoveFromEventList>
1a003d0c:	2800      	cmp	r0, #0
1a003d0e:	d0f5      	beq.n	1a003cfc <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a003d10:	4b08      	ldr	r3, [pc, #32]	; (1a003d34 <xQueueGenericReset+0x80>)
1a003d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a003d16:	601a      	str	r2, [r3, #0]
1a003d18:	f3bf 8f4f 	dsb	sy
1a003d1c:	f3bf 8f6f 	isb	sy
1a003d20:	e7ec      	b.n	1a003cfc <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a003d22:	f104 0010 	add.w	r0, r4, #16
1a003d26:	f000 faa8 	bl	1a00427a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a003d2a:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a003d2e:	f000 faa4 	bl	1a00427a <vListInitialise>
1a003d32:	e7e3      	b.n	1a003cfc <xQueueGenericReset+0x48>
1a003d34:	e000ed04 	.word	0xe000ed04

1a003d38 <prvInitialiseNewQueue>:
{
1a003d38:	b538      	push	{r3, r4, r5, lr}
1a003d3a:	461d      	mov	r5, r3
1a003d3c:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a003d3e:	460b      	mov	r3, r1
1a003d40:	b149      	cbz	r1, 1a003d56 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a003d42:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a003d44:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a003d46:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a003d48:	2101      	movs	r1, #1
1a003d4a:	4620      	mov	r0, r4
1a003d4c:	f7ff ffb2 	bl	1a003cb4 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a003d50:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a003d54:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a003d56:	6024      	str	r4, [r4, #0]
1a003d58:	e7f4      	b.n	1a003d44 <prvInitialiseNewQueue+0xc>

1a003d5a <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a003d5a:	b940      	cbnz	r0, 1a003d6e <xQueueGenericCreateStatic+0x14>
1a003d5c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003d60:	f383 8811 	msr	BASEPRI, r3
1a003d64:	f3bf 8f6f 	isb	sy
1a003d68:	f3bf 8f4f 	dsb	sy
1a003d6c:	e7fe      	b.n	1a003d6c <xQueueGenericCreateStatic+0x12>
	{
1a003d6e:	b510      	push	{r4, lr}
1a003d70:	b084      	sub	sp, #16
1a003d72:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a003d74:	b153      	cbz	r3, 1a003d8c <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a003d76:	b192      	cbz	r2, 1a003d9e <xQueueGenericCreateStatic+0x44>
1a003d78:	b989      	cbnz	r1, 1a003d9e <xQueueGenericCreateStatic+0x44>
1a003d7a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003d7e:	f383 8811 	msr	BASEPRI, r3
1a003d82:	f3bf 8f6f 	isb	sy
1a003d86:	f3bf 8f4f 	dsb	sy
1a003d8a:	e7fe      	b.n	1a003d8a <xQueueGenericCreateStatic+0x30>
1a003d8c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003d90:	f383 8811 	msr	BASEPRI, r3
1a003d94:	f3bf 8f6f 	isb	sy
1a003d98:	f3bf 8f4f 	dsb	sy
1a003d9c:	e7fe      	b.n	1a003d9c <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a003d9e:	b94a      	cbnz	r2, 1a003db4 <xQueueGenericCreateStatic+0x5a>
1a003da0:	b141      	cbz	r1, 1a003db4 <xQueueGenericCreateStatic+0x5a>
1a003da2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003da6:	f383 8811 	msr	BASEPRI, r3
1a003daa:	f3bf 8f6f 	isb	sy
1a003dae:	f3bf 8f4f 	dsb	sy
1a003db2:	e7fe      	b.n	1a003db2 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a003db4:	2050      	movs	r0, #80	; 0x50
1a003db6:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a003db8:	9803      	ldr	r0, [sp, #12]
1a003dba:	2850      	cmp	r0, #80	; 0x50
1a003dbc:	d008      	beq.n	1a003dd0 <xQueueGenericCreateStatic+0x76>
1a003dbe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003dc2:	f383 8811 	msr	BASEPRI, r3
1a003dc6:	f3bf 8f6f 	isb	sy
1a003dca:	f3bf 8f4f 	dsb	sy
1a003dce:	e7fe      	b.n	1a003dce <xQueueGenericCreateStatic+0x74>
1a003dd0:	4620      	mov	r0, r4
1a003dd2:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a003dd4:	2301      	movs	r3, #1
1a003dd6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a003dda:	9400      	str	r4, [sp, #0]
1a003ddc:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a003de0:	f7ff ffaa 	bl	1a003d38 <prvInitialiseNewQueue>
	}
1a003de4:	4620      	mov	r0, r4
1a003de6:	b004      	add	sp, #16
1a003de8:	bd10      	pop	{r4, pc}

1a003dea <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a003dea:	b940      	cbnz	r0, 1a003dfe <xQueueGenericCreate+0x14>
1a003dec:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003df0:	f383 8811 	msr	BASEPRI, r3
1a003df4:	f3bf 8f6f 	isb	sy
1a003df8:	f3bf 8f4f 	dsb	sy
1a003dfc:	e7fe      	b.n	1a003dfc <xQueueGenericCreate+0x12>
	{
1a003dfe:	b5f0      	push	{r4, r5, r6, r7, lr}
1a003e00:	b083      	sub	sp, #12
1a003e02:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a003e04:	b111      	cbz	r1, 1a003e0c <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a003e06:	fb01 f000 	mul.w	r0, r1, r0
1a003e0a:	e000      	b.n	1a003e0e <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
1a003e0c:	2000      	movs	r0, #0
1a003e0e:	4617      	mov	r7, r2
1a003e10:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a003e12:	3050      	adds	r0, #80	; 0x50
1a003e14:	f7ff fe6a 	bl	1a003aec <pvPortMalloc>
		if( pxNewQueue != NULL )
1a003e18:	4605      	mov	r5, r0
1a003e1a:	b150      	cbz	r0, 1a003e32 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a003e1c:	2300      	movs	r3, #0
1a003e1e:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a003e22:	9000      	str	r0, [sp, #0]
1a003e24:	463b      	mov	r3, r7
1a003e26:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a003e2a:	4621      	mov	r1, r4
1a003e2c:	4630      	mov	r0, r6
1a003e2e:	f7ff ff83 	bl	1a003d38 <prvInitialiseNewQueue>
	}
1a003e32:	4628      	mov	r0, r5
1a003e34:	b003      	add	sp, #12
1a003e36:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a003e38 <xQueueGenericSend>:
{
1a003e38:	b5f0      	push	{r4, r5, r6, r7, lr}
1a003e3a:	b085      	sub	sp, #20
1a003e3c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a003e3e:	b160      	cbz	r0, 1a003e5a <xQueueGenericSend+0x22>
1a003e40:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a003e42:	b999      	cbnz	r1, 1a003e6c <xQueueGenericSend+0x34>
1a003e44:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a003e46:	b18a      	cbz	r2, 1a003e6c <xQueueGenericSend+0x34>
1a003e48:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003e4c:	f383 8811 	msr	BASEPRI, r3
1a003e50:	f3bf 8f6f 	isb	sy
1a003e54:	f3bf 8f4f 	dsb	sy
1a003e58:	e7fe      	b.n	1a003e58 <xQueueGenericSend+0x20>
1a003e5a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003e5e:	f383 8811 	msr	BASEPRI, r3
1a003e62:	f3bf 8f6f 	isb	sy
1a003e66:	f3bf 8f4f 	dsb	sy
1a003e6a:	e7fe      	b.n	1a003e6a <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a003e6c:	2b02      	cmp	r3, #2
1a003e6e:	d10b      	bne.n	1a003e88 <xQueueGenericSend+0x50>
1a003e70:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a003e72:	2a01      	cmp	r2, #1
1a003e74:	d008      	beq.n	1a003e88 <xQueueGenericSend+0x50>
1a003e76:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003e7a:	f383 8811 	msr	BASEPRI, r3
1a003e7e:	f3bf 8f6f 	isb	sy
1a003e82:	f3bf 8f4f 	dsb	sy
1a003e86:	e7fe      	b.n	1a003e86 <xQueueGenericSend+0x4e>
1a003e88:	461e      	mov	r6, r3
1a003e8a:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a003e8c:	f000 ff04 	bl	1a004c98 <xTaskGetSchedulerState>
1a003e90:	b950      	cbnz	r0, 1a003ea8 <xQueueGenericSend+0x70>
1a003e92:	9b01      	ldr	r3, [sp, #4]
1a003e94:	b153      	cbz	r3, 1a003eac <xQueueGenericSend+0x74>
1a003e96:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003e9a:	f383 8811 	msr	BASEPRI, r3
1a003e9e:	f3bf 8f6f 	isb	sy
1a003ea2:	f3bf 8f4f 	dsb	sy
1a003ea6:	e7fe      	b.n	1a003ea6 <xQueueGenericSend+0x6e>
1a003ea8:	2500      	movs	r5, #0
1a003eaa:	e03a      	b.n	1a003f22 <xQueueGenericSend+0xea>
1a003eac:	2500      	movs	r5, #0
1a003eae:	e038      	b.n	1a003f22 <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a003eb0:	4632      	mov	r2, r6
1a003eb2:	4639      	mov	r1, r7
1a003eb4:	4620      	mov	r0, r4
1a003eb6:	f7ff fe78 	bl	1a003baa <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a003eba:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a003ebc:	b94b      	cbnz	r3, 1a003ed2 <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a003ebe:	b1a8      	cbz	r0, 1a003eec <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a003ec0:	4b3b      	ldr	r3, [pc, #236]	; (1a003fb0 <xQueueGenericSend+0x178>)
1a003ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a003ec6:	601a      	str	r2, [r3, #0]
1a003ec8:	f3bf 8f4f 	dsb	sy
1a003ecc:	f3bf 8f6f 	isb	sy
1a003ed0:	e00c      	b.n	1a003eec <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a003ed2:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a003ed6:	f000 fe47 	bl	1a004b68 <xTaskRemoveFromEventList>
1a003eda:	b138      	cbz	r0, 1a003eec <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a003edc:	4b34      	ldr	r3, [pc, #208]	; (1a003fb0 <xQueueGenericSend+0x178>)
1a003ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a003ee2:	601a      	str	r2, [r3, #0]
1a003ee4:	f3bf 8f4f 	dsb	sy
1a003ee8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a003eec:	f001 f9e4 	bl	1a0052b8 <vPortExitCritical>
				return pdPASS;
1a003ef0:	2001      	movs	r0, #1
}
1a003ef2:	b005      	add	sp, #20
1a003ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a003ef6:	f001 f9df 	bl	1a0052b8 <vPortExitCritical>
					return errQUEUE_FULL;
1a003efa:	2000      	movs	r0, #0
1a003efc:	e7f9      	b.n	1a003ef2 <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a003efe:	a802      	add	r0, sp, #8
1a003f00:	f000 fe78 	bl	1a004bf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a003f04:	2501      	movs	r5, #1
1a003f06:	e019      	b.n	1a003f3c <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a003f08:	2300      	movs	r3, #0
1a003f0a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a003f0e:	e021      	b.n	1a003f54 <xQueueGenericSend+0x11c>
1a003f10:	2300      	movs	r3, #0
1a003f12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a003f16:	e023      	b.n	1a003f60 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a003f18:	4620      	mov	r0, r4
1a003f1a:	f7ff fe93 	bl	1a003c44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a003f1e:	f000 fceb 	bl	1a0048f8 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a003f22:	f001 f9a7 	bl	1a005274 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a003f26:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a003f28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a003f2a:	429a      	cmp	r2, r3
1a003f2c:	d3c0      	bcc.n	1a003eb0 <xQueueGenericSend+0x78>
1a003f2e:	2e02      	cmp	r6, #2
1a003f30:	d0be      	beq.n	1a003eb0 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a003f32:	9b01      	ldr	r3, [sp, #4]
1a003f34:	2b00      	cmp	r3, #0
1a003f36:	d0de      	beq.n	1a003ef6 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a003f38:	2d00      	cmp	r5, #0
1a003f3a:	d0e0      	beq.n	1a003efe <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a003f3c:	f001 f9bc 	bl	1a0052b8 <vPortExitCritical>
		vTaskSuspendAll();
1a003f40:	f000 fc40 	bl	1a0047c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a003f44:	f001 f996 	bl	1a005274 <vPortEnterCritical>
1a003f48:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a003f4c:	b25b      	sxtb	r3, r3
1a003f4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a003f52:	d0d9      	beq.n	1a003f08 <xQueueGenericSend+0xd0>
1a003f54:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a003f58:	b25b      	sxtb	r3, r3
1a003f5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a003f5e:	d0d7      	beq.n	1a003f10 <xQueueGenericSend+0xd8>
1a003f60:	f001 f9aa 	bl	1a0052b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a003f64:	a901      	add	r1, sp, #4
1a003f66:	a802      	add	r0, sp, #8
1a003f68:	f000 fe50 	bl	1a004c0c <xTaskCheckForTimeOut>
1a003f6c:	b9c8      	cbnz	r0, 1a003fa2 <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a003f6e:	4620      	mov	r0, r4
1a003f70:	f7ff fdff 	bl	1a003b72 <prvIsQueueFull>
1a003f74:	2800      	cmp	r0, #0
1a003f76:	d0cf      	beq.n	1a003f18 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a003f78:	9901      	ldr	r1, [sp, #4]
1a003f7a:	f104 0010 	add.w	r0, r4, #16
1a003f7e:	f000 fdbf 	bl	1a004b00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a003f82:	4620      	mov	r0, r4
1a003f84:	f7ff fe5e 	bl	1a003c44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a003f88:	f000 fcb6 	bl	1a0048f8 <xTaskResumeAll>
1a003f8c:	2800      	cmp	r0, #0
1a003f8e:	d1c8      	bne.n	1a003f22 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a003f90:	4b07      	ldr	r3, [pc, #28]	; (1a003fb0 <xQueueGenericSend+0x178>)
1a003f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a003f96:	601a      	str	r2, [r3, #0]
1a003f98:	f3bf 8f4f 	dsb	sy
1a003f9c:	f3bf 8f6f 	isb	sy
1a003fa0:	e7bf      	b.n	1a003f22 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a003fa2:	4620      	mov	r0, r4
1a003fa4:	f7ff fe4e 	bl	1a003c44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a003fa8:	f000 fca6 	bl	1a0048f8 <xTaskResumeAll>
			return errQUEUE_FULL;
1a003fac:	2000      	movs	r0, #0
1a003fae:	e7a0      	b.n	1a003ef2 <xQueueGenericSend+0xba>
1a003fb0:	e000ed04 	.word	0xe000ed04

1a003fb4 <xQueueGenericSendFromISR>:
{
1a003fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a003fb8:	b160      	cbz	r0, 1a003fd4 <xQueueGenericSendFromISR+0x20>
1a003fba:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a003fbc:	b999      	cbnz	r1, 1a003fe6 <xQueueGenericSendFromISR+0x32>
1a003fbe:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a003fc0:	b188      	cbz	r0, 1a003fe6 <xQueueGenericSendFromISR+0x32>
1a003fc2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003fc6:	f383 8811 	msr	BASEPRI, r3
1a003fca:	f3bf 8f6f 	isb	sy
1a003fce:	f3bf 8f4f 	dsb	sy
1a003fd2:	e7fe      	b.n	1a003fd2 <xQueueGenericSendFromISR+0x1e>
1a003fd4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003fd8:	f383 8811 	msr	BASEPRI, r3
1a003fdc:	f3bf 8f6f 	isb	sy
1a003fe0:	f3bf 8f4f 	dsb	sy
1a003fe4:	e7fe      	b.n	1a003fe4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a003fe6:	2b02      	cmp	r3, #2
1a003fe8:	d10b      	bne.n	1a004002 <xQueueGenericSendFromISR+0x4e>
1a003fea:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a003fec:	2801      	cmp	r0, #1
1a003fee:	d008      	beq.n	1a004002 <xQueueGenericSendFromISR+0x4e>
1a003ff0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003ff4:	f383 8811 	msr	BASEPRI, r3
1a003ff8:	f3bf 8f6f 	isb	sy
1a003ffc:	f3bf 8f4f 	dsb	sy
1a004000:	e7fe      	b.n	1a004000 <xQueueGenericSendFromISR+0x4c>
1a004002:	461f      	mov	r7, r3
1a004004:	4690      	mov	r8, r2
1a004006:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a004008:	f001 fa5e 	bl	1a0054c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a00400c:	f3ef 8611 	mrs	r6, BASEPRI
1a004010:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004014:	f383 8811 	msr	BASEPRI, r3
1a004018:	f3bf 8f6f 	isb	sy
1a00401c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a004020:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a004022:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a004024:	429a      	cmp	r2, r3
1a004026:	d303      	bcc.n	1a004030 <xQueueGenericSendFromISR+0x7c>
1a004028:	2f02      	cmp	r7, #2
1a00402a:	d001      	beq.n	1a004030 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a00402c:	2000      	movs	r0, #0
1a00402e:	e00f      	b.n	1a004050 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a004030:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a004034:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a004036:	463a      	mov	r2, r7
1a004038:	4649      	mov	r1, r9
1a00403a:	4620      	mov	r0, r4
1a00403c:	f7ff fdb5 	bl	1a003baa <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a004040:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a004044:	d008      	beq.n	1a004058 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a004046:	1c6b      	adds	r3, r5, #1
1a004048:	b25b      	sxtb	r3, r3
1a00404a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a00404e:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a004050:	f386 8811 	msr	BASEPRI, r6
}
1a004054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a004058:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00405a:	b15b      	cbz	r3, 1a004074 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a00405c:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a004060:	f000 fd82 	bl	1a004b68 <xTaskRemoveFromEventList>
1a004064:	b140      	cbz	r0, 1a004078 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a004066:	f1b8 0f00 	cmp.w	r8, #0
1a00406a:	d007      	beq.n	1a00407c <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a00406c:	2001      	movs	r0, #1
1a00406e:	f8c8 0000 	str.w	r0, [r8]
1a004072:	e7ed      	b.n	1a004050 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a004074:	2001      	movs	r0, #1
1a004076:	e7eb      	b.n	1a004050 <xQueueGenericSendFromISR+0x9c>
1a004078:	2001      	movs	r0, #1
1a00407a:	e7e9      	b.n	1a004050 <xQueueGenericSendFromISR+0x9c>
1a00407c:	2001      	movs	r0, #1
1a00407e:	e7e7      	b.n	1a004050 <xQueueGenericSendFromISR+0x9c>

1a004080 <xQueueReceive>:
{
1a004080:	b5f0      	push	{r4, r5, r6, r7, lr}
1a004082:	b085      	sub	sp, #20
1a004084:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a004086:	b160      	cbz	r0, 1a0040a2 <xQueueReceive+0x22>
1a004088:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a00408a:	b999      	cbnz	r1, 1a0040b4 <xQueueReceive+0x34>
1a00408c:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a00408e:	b18b      	cbz	r3, 1a0040b4 <xQueueReceive+0x34>
	__asm volatile
1a004090:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004094:	f383 8811 	msr	BASEPRI, r3
1a004098:	f3bf 8f6f 	isb	sy
1a00409c:	f3bf 8f4f 	dsb	sy
1a0040a0:	e7fe      	b.n	1a0040a0 <xQueueReceive+0x20>
1a0040a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0040a6:	f383 8811 	msr	BASEPRI, r3
1a0040aa:	f3bf 8f6f 	isb	sy
1a0040ae:	f3bf 8f4f 	dsb	sy
1a0040b2:	e7fe      	b.n	1a0040b2 <xQueueReceive+0x32>
1a0040b4:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a0040b6:	f000 fdef 	bl	1a004c98 <xTaskGetSchedulerState>
1a0040ba:	b950      	cbnz	r0, 1a0040d2 <xQueueReceive+0x52>
1a0040bc:	9b01      	ldr	r3, [sp, #4]
1a0040be:	b153      	cbz	r3, 1a0040d6 <xQueueReceive+0x56>
1a0040c0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0040c4:	f383 8811 	msr	BASEPRI, r3
1a0040c8:	f3bf 8f6f 	isb	sy
1a0040cc:	f3bf 8f4f 	dsb	sy
1a0040d0:	e7fe      	b.n	1a0040d0 <xQueueReceive+0x50>
1a0040d2:	2600      	movs	r6, #0
1a0040d4:	e03e      	b.n	1a004154 <xQueueReceive+0xd4>
1a0040d6:	2600      	movs	r6, #0
1a0040d8:	e03c      	b.n	1a004154 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a0040da:	4639      	mov	r1, r7
1a0040dc:	4620      	mov	r0, r4
1a0040de:	f7ff fd9f 	bl	1a003c20 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a0040e2:	3d01      	subs	r5, #1
1a0040e4:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0040e6:	6923      	ldr	r3, [r4, #16]
1a0040e8:	b923      	cbnz	r3, 1a0040f4 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a0040ea:	f001 f8e5 	bl	1a0052b8 <vPortExitCritical>
				return pdPASS;
1a0040ee:	2001      	movs	r0, #1
}
1a0040f0:	b005      	add	sp, #20
1a0040f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0040f4:	f104 0010 	add.w	r0, r4, #16
1a0040f8:	f000 fd36 	bl	1a004b68 <xTaskRemoveFromEventList>
1a0040fc:	2800      	cmp	r0, #0
1a0040fe:	d0f4      	beq.n	1a0040ea <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a004100:	4b34      	ldr	r3, [pc, #208]	; (1a0041d4 <xQueueReceive+0x154>)
1a004102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a004106:	601a      	str	r2, [r3, #0]
1a004108:	f3bf 8f4f 	dsb	sy
1a00410c:	f3bf 8f6f 	isb	sy
1a004110:	e7eb      	b.n	1a0040ea <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a004112:	f001 f8d1 	bl	1a0052b8 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a004116:	2000      	movs	r0, #0
1a004118:	e7ea      	b.n	1a0040f0 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a00411a:	a802      	add	r0, sp, #8
1a00411c:	f000 fd6a 	bl	1a004bf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a004120:	2601      	movs	r6, #1
1a004122:	e021      	b.n	1a004168 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a004124:	2300      	movs	r3, #0
1a004126:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a00412a:	e029      	b.n	1a004180 <xQueueReceive+0x100>
1a00412c:	2300      	movs	r3, #0
1a00412e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a004132:	e02b      	b.n	1a00418c <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a004134:	4620      	mov	r0, r4
1a004136:	f7ff fd85 	bl	1a003c44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a00413a:	f000 fbdd 	bl	1a0048f8 <xTaskResumeAll>
1a00413e:	e009      	b.n	1a004154 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a004140:	4620      	mov	r0, r4
1a004142:	f7ff fd7f 	bl	1a003c44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a004146:	f000 fbd7 	bl	1a0048f8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a00414a:	4620      	mov	r0, r4
1a00414c:	f7ff fd20 	bl	1a003b90 <prvIsQueueEmpty>
1a004150:	2800      	cmp	r0, #0
1a004152:	d13d      	bne.n	1a0041d0 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a004154:	f001 f88e 	bl	1a005274 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a004158:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a00415a:	2d00      	cmp	r5, #0
1a00415c:	d1bd      	bne.n	1a0040da <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a00415e:	9b01      	ldr	r3, [sp, #4]
1a004160:	2b00      	cmp	r3, #0
1a004162:	d0d6      	beq.n	1a004112 <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a004164:	2e00      	cmp	r6, #0
1a004166:	d0d8      	beq.n	1a00411a <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a004168:	f001 f8a6 	bl	1a0052b8 <vPortExitCritical>
		vTaskSuspendAll();
1a00416c:	f000 fb2a 	bl	1a0047c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a004170:	f001 f880 	bl	1a005274 <vPortEnterCritical>
1a004174:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a004178:	b25b      	sxtb	r3, r3
1a00417a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00417e:	d0d1      	beq.n	1a004124 <xQueueReceive+0xa4>
1a004180:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a004184:	b25b      	sxtb	r3, r3
1a004186:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00418a:	d0cf      	beq.n	1a00412c <xQueueReceive+0xac>
1a00418c:	f001 f894 	bl	1a0052b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a004190:	a901      	add	r1, sp, #4
1a004192:	a802      	add	r0, sp, #8
1a004194:	f000 fd3a 	bl	1a004c0c <xTaskCheckForTimeOut>
1a004198:	2800      	cmp	r0, #0
1a00419a:	d1d1      	bne.n	1a004140 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a00419c:	4620      	mov	r0, r4
1a00419e:	f7ff fcf7 	bl	1a003b90 <prvIsQueueEmpty>
1a0041a2:	2800      	cmp	r0, #0
1a0041a4:	d0c6      	beq.n	1a004134 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a0041a6:	9901      	ldr	r1, [sp, #4]
1a0041a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0041ac:	f000 fca8 	bl	1a004b00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a0041b0:	4620      	mov	r0, r4
1a0041b2:	f7ff fd47 	bl	1a003c44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a0041b6:	f000 fb9f 	bl	1a0048f8 <xTaskResumeAll>
1a0041ba:	2800      	cmp	r0, #0
1a0041bc:	d1ca      	bne.n	1a004154 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a0041be:	4b05      	ldr	r3, [pc, #20]	; (1a0041d4 <xQueueReceive+0x154>)
1a0041c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0041c4:	601a      	str	r2, [r3, #0]
1a0041c6:	f3bf 8f4f 	dsb	sy
1a0041ca:	f3bf 8f6f 	isb	sy
1a0041ce:	e7c1      	b.n	1a004154 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a0041d0:	2000      	movs	r0, #0
1a0041d2:	e78d      	b.n	1a0040f0 <xQueueReceive+0x70>
1a0041d4:	e000ed04 	.word	0xe000ed04

1a0041d8 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
1a0041d8:	b940      	cbnz	r0, 1a0041ec <uxQueueMessagesWaiting+0x14>
1a0041da:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0041de:	f383 8811 	msr	BASEPRI, r3
1a0041e2:	f3bf 8f6f 	isb	sy
1a0041e6:	f3bf 8f4f 	dsb	sy
1a0041ea:	e7fe      	b.n	1a0041ea <uxQueueMessagesWaiting+0x12>
{
1a0041ec:	b510      	push	{r4, lr}
1a0041ee:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a0041f0:	f001 f840 	bl	1a005274 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1a0041f4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
1a0041f6:	f001 f85f 	bl	1a0052b8 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1a0041fa:	4620      	mov	r0, r4
1a0041fc:	bd10      	pop	{r4, pc}
1a0041fe:	Address 0x000000001a0041fe is out of bounds.


1a004200 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a004200:	2300      	movs	r3, #0
1a004202:	2b07      	cmp	r3, #7
1a004204:	d80c      	bhi.n	1a004220 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a004206:	4a07      	ldr	r2, [pc, #28]	; (1a004224 <vQueueAddToRegistry+0x24>)
1a004208:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a00420c:	b10a      	cbz	r2, 1a004212 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a00420e:	3301      	adds	r3, #1
1a004210:	e7f7      	b.n	1a004202 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a004212:	4a04      	ldr	r2, [pc, #16]	; (1a004224 <vQueueAddToRegistry+0x24>)
1a004214:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a004218:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a00421c:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a00421e:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a004220:	4770      	bx	lr
1a004222:	bf00      	nop
1a004224:	10003544 	.word	0x10003544

1a004228 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a004228:	b570      	push	{r4, r5, r6, lr}
1a00422a:	4604      	mov	r4, r0
1a00422c:	460d      	mov	r5, r1
1a00422e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a004230:	f001 f820 	bl	1a005274 <vPortEnterCritical>
1a004234:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a004238:	b25b      	sxtb	r3, r3
1a00423a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00423e:	d00d      	beq.n	1a00425c <vQueueWaitForMessageRestricted+0x34>
1a004240:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a004244:	b25b      	sxtb	r3, r3
1a004246:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00424a:	d00b      	beq.n	1a004264 <vQueueWaitForMessageRestricted+0x3c>
1a00424c:	f001 f834 	bl	1a0052b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a004250:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a004252:	b15b      	cbz	r3, 1a00426c <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a004254:	4620      	mov	r0, r4
1a004256:	f7ff fcf5 	bl	1a003c44 <prvUnlockQueue>
	}
1a00425a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a00425c:	2300      	movs	r3, #0
1a00425e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a004262:	e7ed      	b.n	1a004240 <vQueueWaitForMessageRestricted+0x18>
1a004264:	2300      	movs	r3, #0
1a004266:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a00426a:	e7ef      	b.n	1a00424c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a00426c:	4632      	mov	r2, r6
1a00426e:	4629      	mov	r1, r5
1a004270:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a004274:	f000 fc5c 	bl	1a004b30 <vTaskPlaceOnEventListRestricted>
1a004278:	e7ec      	b.n	1a004254 <vQueueWaitForMessageRestricted+0x2c>

1a00427a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00427a:	f100 0308 	add.w	r3, r0, #8
1a00427e:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a004280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a004284:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a004286:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a004288:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a00428a:	2300      	movs	r3, #0
1a00428c:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a00428e:	4770      	bx	lr

1a004290 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a004290:	2300      	movs	r3, #0
1a004292:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a004294:	4770      	bx	lr

1a004296 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a004296:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a004298:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a00429a:	689a      	ldr	r2, [r3, #8]
1a00429c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a00429e:	689a      	ldr	r2, [r3, #8]
1a0042a0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a0042a2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a0042a4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a0042a6:	6803      	ldr	r3, [r0, #0]
1a0042a8:	3301      	adds	r3, #1
1a0042aa:	6003      	str	r3, [r0, #0]
}
1a0042ac:	4770      	bx	lr

1a0042ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a0042ae:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a0042b0:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a0042b2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a0042b6:	d002      	beq.n	1a0042be <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0042b8:	f100 0208 	add.w	r2, r0, #8
1a0042bc:	e002      	b.n	1a0042c4 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a0042be:	6902      	ldr	r2, [r0, #16]
1a0042c0:	e004      	b.n	1a0042cc <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0042c2:	461a      	mov	r2, r3
1a0042c4:	6853      	ldr	r3, [r2, #4]
1a0042c6:	681c      	ldr	r4, [r3, #0]
1a0042c8:	42ac      	cmp	r4, r5
1a0042ca:	d9fa      	bls.n	1a0042c2 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a0042cc:	6853      	ldr	r3, [r2, #4]
1a0042ce:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a0042d0:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a0042d2:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a0042d4:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a0042d6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a0042d8:	6803      	ldr	r3, [r0, #0]
1a0042da:	3301      	adds	r3, #1
1a0042dc:	6003      	str	r3, [r0, #0]
}
1a0042de:	bc30      	pop	{r4, r5}
1a0042e0:	4770      	bx	lr

1a0042e2 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a0042e2:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a0042e4:	6842      	ldr	r2, [r0, #4]
1a0042e6:	6881      	ldr	r1, [r0, #8]
1a0042e8:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a0042ea:	6882      	ldr	r2, [r0, #8]
1a0042ec:	6841      	ldr	r1, [r0, #4]
1a0042ee:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a0042f0:	685a      	ldr	r2, [r3, #4]
1a0042f2:	4282      	cmp	r2, r0
1a0042f4:	d006      	beq.n	1a004304 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a0042f6:	2200      	movs	r2, #0
1a0042f8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a0042fa:	681a      	ldr	r2, [r3, #0]
1a0042fc:	3a01      	subs	r2, #1
1a0042fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a004300:	6818      	ldr	r0, [r3, #0]
}
1a004302:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a004304:	6882      	ldr	r2, [r0, #8]
1a004306:	605a      	str	r2, [r3, #4]
1a004308:	e7f5      	b.n	1a0042f6 <uxListRemove+0x14>
1a00430a:	Address 0x000000001a00430a is out of bounds.


1a00430c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a00430c:	4b03      	ldr	r3, [pc, #12]	; (1a00431c <vApplicationGetIdleTaskMemory+0x10>)
1a00430e:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a004310:	4b03      	ldr	r3, [pc, #12]	; (1a004320 <vApplicationGetIdleTaskMemory+0x14>)
1a004312:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a004314:	235a      	movs	r3, #90	; 0x5a
1a004316:	6013      	str	r3, [r2, #0]
}
1a004318:	4770      	bx	lr
1a00431a:	bf00      	nop
1a00431c:	10003164 	.word	0x10003164
1a004320:	10002a5c 	.word	0x10002a5c

1a004324 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a004324:	4b03      	ldr	r3, [pc, #12]	; (1a004334 <vApplicationGetTimerTaskMemory+0x10>)
1a004326:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a004328:	4b03      	ldr	r3, [pc, #12]	; (1a004338 <vApplicationGetTimerTaskMemory+0x14>)
1a00432a:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a00432c:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a004330:	6013      	str	r3, [r2, #0]
1a004332:	4770      	bx	lr
1a004334:	100031c4 	.word	0x100031c4
1a004338:	10002bc4 	.word	0x10002bc4

1a00433c <vApplicationStackOverflowHook>:
#include <FreeRTOS.h>
#include <task.h>

void vApplicationStackOverflowHook(TaskHandle_t xTask,
                                   signed char *pcTaskName)
{
1a00433c:	e7fe      	b.n	1a00433c <vApplicationStackOverflowHook>

1a00433e <vApplicationMallocFailedHook>:
    while(1)
        ;
}

void vApplicationMallocFailedHook( void )
{
1a00433e:	e7fe      	b.n	1a00433e <vApplicationMallocFailedHook>

1a004340 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a004340:	4b08      	ldr	r3, [pc, #32]	; (1a004364 <prvResetNextTaskUnblockTime+0x24>)
1a004342:	681b      	ldr	r3, [r3, #0]
1a004344:	681b      	ldr	r3, [r3, #0]
1a004346:	b13b      	cbz	r3, 1a004358 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a004348:	4b06      	ldr	r3, [pc, #24]	; (1a004364 <prvResetNextTaskUnblockTime+0x24>)
1a00434a:	681b      	ldr	r3, [r3, #0]
1a00434c:	68db      	ldr	r3, [r3, #12]
1a00434e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a004350:	685a      	ldr	r2, [r3, #4]
1a004352:	4b05      	ldr	r3, [pc, #20]	; (1a004368 <prvResetNextTaskUnblockTime+0x28>)
1a004354:	601a      	str	r2, [r3, #0]
	}
}
1a004356:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a004358:	4b03      	ldr	r3, [pc, #12]	; (1a004368 <prvResetNextTaskUnblockTime+0x28>)
1a00435a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00435e:	601a      	str	r2, [r3, #0]
1a004360:	4770      	bx	lr
1a004362:	bf00      	nop
1a004364:	10003228 	.word	0x10003228
1a004368:	100032fc 	.word	0x100032fc

1a00436c <prvInitialiseNewTask>:
{
1a00436c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a004370:	4681      	mov	r9, r0
1a004372:	460d      	mov	r5, r1
1a004374:	4617      	mov	r7, r2
1a004376:	469a      	mov	sl, r3
1a004378:	9e08      	ldr	r6, [sp, #32]
1a00437a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a00437e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a004380:	0092      	lsls	r2, r2, #2
1a004382:	21a5      	movs	r1, #165	; 0xa5
1a004384:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a004386:	f003 faa8 	bl	1a0078da <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a00438a:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a00438c:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a004390:	3a01      	subs	r2, #1
1a004392:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a004396:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a00439a:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a00439c:	2300      	movs	r3, #0
1a00439e:	2b0f      	cmp	r3, #15
1a0043a0:	d807      	bhi.n	1a0043b2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a0043a2:	5ce9      	ldrb	r1, [r5, r3]
1a0043a4:	18e2      	adds	r2, r4, r3
1a0043a6:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a0043aa:	5cea      	ldrb	r2, [r5, r3]
1a0043ac:	b10a      	cbz	r2, 1a0043b2 <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a0043ae:	3301      	adds	r3, #1
1a0043b0:	e7f5      	b.n	1a00439e <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a0043b2:	2300      	movs	r3, #0
1a0043b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a0043b8:	2e06      	cmp	r6, #6
1a0043ba:	d900      	bls.n	1a0043be <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a0043bc:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a0043be:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a0043c0:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a0043c2:	2500      	movs	r5, #0
1a0043c4:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a0043c6:	1d20      	adds	r0, r4, #4
1a0043c8:	f7ff ff62 	bl	1a004290 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a0043cc:	f104 0018 	add.w	r0, r4, #24
1a0043d0:	f7ff ff5e 	bl	1a004290 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a0043d4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0043d6:	f1c6 0607 	rsb	r6, r6, #7
1a0043da:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a0043dc:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a0043de:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a0043e0:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a0043e4:	4652      	mov	r2, sl
1a0043e6:	4649      	mov	r1, r9
1a0043e8:	4638      	mov	r0, r7
1a0043ea:	f000 ff15 	bl	1a005218 <pxPortInitialiseStack>
1a0043ee:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a0043f0:	f1b8 0f00 	cmp.w	r8, #0
1a0043f4:	d001      	beq.n	1a0043fa <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a0043f6:	f8c8 4000 	str.w	r4, [r8]
}
1a0043fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0043fe:	Address 0x000000001a0043fe is out of bounds.


1a004400 <prvInitialiseTaskLists>:
{
1a004400:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a004402:	2400      	movs	r4, #0
1a004404:	e007      	b.n	1a004416 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a004406:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a00440a:	0093      	lsls	r3, r2, #2
1a00440c:	480e      	ldr	r0, [pc, #56]	; (1a004448 <prvInitialiseTaskLists+0x48>)
1a00440e:	4418      	add	r0, r3
1a004410:	f7ff ff33 	bl	1a00427a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a004414:	3401      	adds	r4, #1
1a004416:	2c06      	cmp	r4, #6
1a004418:	d9f5      	bls.n	1a004406 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a00441a:	4d0c      	ldr	r5, [pc, #48]	; (1a00444c <prvInitialiseTaskLists+0x4c>)
1a00441c:	4628      	mov	r0, r5
1a00441e:	f7ff ff2c 	bl	1a00427a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a004422:	4c0b      	ldr	r4, [pc, #44]	; (1a004450 <prvInitialiseTaskLists+0x50>)
1a004424:	4620      	mov	r0, r4
1a004426:	f7ff ff28 	bl	1a00427a <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a00442a:	480a      	ldr	r0, [pc, #40]	; (1a004454 <prvInitialiseTaskLists+0x54>)
1a00442c:	f7ff ff25 	bl	1a00427a <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a004430:	4809      	ldr	r0, [pc, #36]	; (1a004458 <prvInitialiseTaskLists+0x58>)
1a004432:	f7ff ff22 	bl	1a00427a <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a004436:	4809      	ldr	r0, [pc, #36]	; (1a00445c <prvInitialiseTaskLists+0x5c>)
1a004438:	f7ff ff1f 	bl	1a00427a <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a00443c:	4b08      	ldr	r3, [pc, #32]	; (1a004460 <prvInitialiseTaskLists+0x60>)
1a00443e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a004440:	4b08      	ldr	r3, [pc, #32]	; (1a004464 <prvInitialiseTaskLists+0x64>)
1a004442:	601c      	str	r4, [r3, #0]
}
1a004444:	bd38      	pop	{r3, r4, r5, pc}
1a004446:	bf00      	nop
1a004448:	10003230 	.word	0x10003230
1a00444c:	100032d4 	.word	0x100032d4
1a004450:	100032e8 	.word	0x100032e8
1a004454:	10003304 	.word	0x10003304
1a004458:	10003330 	.word	0x10003330
1a00445c:	1000331c 	.word	0x1000331c
1a004460:	10003228 	.word	0x10003228
1a004464:	1000322c 	.word	0x1000322c

1a004468 <prvAddNewTaskToReadyList>:
{
1a004468:	b510      	push	{r4, lr}
1a00446a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a00446c:	f000 ff02 	bl	1a005274 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a004470:	4a21      	ldr	r2, [pc, #132]	; (1a0044f8 <prvAddNewTaskToReadyList+0x90>)
1a004472:	6813      	ldr	r3, [r2, #0]
1a004474:	3301      	adds	r3, #1
1a004476:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a004478:	4b20      	ldr	r3, [pc, #128]	; (1a0044fc <prvAddNewTaskToReadyList+0x94>)
1a00447a:	681b      	ldr	r3, [r3, #0]
1a00447c:	b15b      	cbz	r3, 1a004496 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a00447e:	4b20      	ldr	r3, [pc, #128]	; (1a004500 <prvAddNewTaskToReadyList+0x98>)
1a004480:	681b      	ldr	r3, [r3, #0]
1a004482:	b96b      	cbnz	r3, 1a0044a0 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a004484:	4b1d      	ldr	r3, [pc, #116]	; (1a0044fc <prvAddNewTaskToReadyList+0x94>)
1a004486:	681b      	ldr	r3, [r3, #0]
1a004488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00448a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00448c:	429a      	cmp	r2, r3
1a00448e:	d807      	bhi.n	1a0044a0 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a004490:	4b1a      	ldr	r3, [pc, #104]	; (1a0044fc <prvAddNewTaskToReadyList+0x94>)
1a004492:	601c      	str	r4, [r3, #0]
1a004494:	e004      	b.n	1a0044a0 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a004496:	4b19      	ldr	r3, [pc, #100]	; (1a0044fc <prvAddNewTaskToReadyList+0x94>)
1a004498:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a00449a:	6813      	ldr	r3, [r2, #0]
1a00449c:	2b01      	cmp	r3, #1
1a00449e:	d027      	beq.n	1a0044f0 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a0044a0:	4a18      	ldr	r2, [pc, #96]	; (1a004504 <prvAddNewTaskToReadyList+0x9c>)
1a0044a2:	6813      	ldr	r3, [r2, #0]
1a0044a4:	3301      	adds	r3, #1
1a0044a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a0044a8:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a0044aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0044ac:	2201      	movs	r2, #1
1a0044ae:	409a      	lsls	r2, r3
1a0044b0:	4915      	ldr	r1, [pc, #84]	; (1a004508 <prvAddNewTaskToReadyList+0xa0>)
1a0044b2:	6808      	ldr	r0, [r1, #0]
1a0044b4:	4302      	orrs	r2, r0
1a0044b6:	600a      	str	r2, [r1, #0]
1a0044b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0044bc:	009a      	lsls	r2, r3, #2
1a0044be:	1d21      	adds	r1, r4, #4
1a0044c0:	4812      	ldr	r0, [pc, #72]	; (1a00450c <prvAddNewTaskToReadyList+0xa4>)
1a0044c2:	4410      	add	r0, r2
1a0044c4:	f7ff fee7 	bl	1a004296 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a0044c8:	f000 fef6 	bl	1a0052b8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a0044cc:	4b0c      	ldr	r3, [pc, #48]	; (1a004500 <prvAddNewTaskToReadyList+0x98>)
1a0044ce:	681b      	ldr	r3, [r3, #0]
1a0044d0:	b16b      	cbz	r3, 1a0044ee <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a0044d2:	4b0a      	ldr	r3, [pc, #40]	; (1a0044fc <prvAddNewTaskToReadyList+0x94>)
1a0044d4:	681b      	ldr	r3, [r3, #0]
1a0044d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0044d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0044da:	429a      	cmp	r2, r3
1a0044dc:	d207      	bcs.n	1a0044ee <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a0044de:	4b0c      	ldr	r3, [pc, #48]	; (1a004510 <prvAddNewTaskToReadyList+0xa8>)
1a0044e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0044e4:	601a      	str	r2, [r3, #0]
1a0044e6:	f3bf 8f4f 	dsb	sy
1a0044ea:	f3bf 8f6f 	isb	sy
}
1a0044ee:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a0044f0:	f7ff ff86 	bl	1a004400 <prvInitialiseTaskLists>
1a0044f4:	e7d4      	b.n	1a0044a0 <prvAddNewTaskToReadyList+0x38>
1a0044f6:	bf00      	nop
1a0044f8:	100032bc 	.word	0x100032bc
1a0044fc:	10003224 	.word	0x10003224
1a004500:	10003318 	.word	0x10003318
1a004504:	100032cc 	.word	0x100032cc
1a004508:	100032d0 	.word	0x100032d0
1a00450c:	10003230 	.word	0x10003230
1a004510:	e000ed04 	.word	0xe000ed04

1a004514 <prvDeleteTCB>:
	{
1a004514:	b510      	push	{r4, lr}
1a004516:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a004518:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a00451c:	b933      	cbnz	r3, 1a00452c <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a00451e:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a004520:	f7ff fb1c 	bl	1a003b5c <vPortFree>
				vPortFree( pxTCB );
1a004524:	4620      	mov	r0, r4
1a004526:	f7ff fb19 	bl	1a003b5c <vPortFree>
	}
1a00452a:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a00452c:	2b01      	cmp	r3, #1
1a00452e:	d00a      	beq.n	1a004546 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a004530:	2b02      	cmp	r3, #2
1a004532:	d0fa      	beq.n	1a00452a <prvDeleteTCB+0x16>
1a004534:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004538:	f383 8811 	msr	BASEPRI, r3
1a00453c:	f3bf 8f6f 	isb	sy
1a004540:	f3bf 8f4f 	dsb	sy
1a004544:	e7fe      	b.n	1a004544 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a004546:	f7ff fb09 	bl	1a003b5c <vPortFree>
1a00454a:	e7ee      	b.n	1a00452a <prvDeleteTCB+0x16>

1a00454c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a00454c:	4b0f      	ldr	r3, [pc, #60]	; (1a00458c <prvCheckTasksWaitingTermination+0x40>)
1a00454e:	681b      	ldr	r3, [r3, #0]
1a004550:	b1d3      	cbz	r3, 1a004588 <prvCheckTasksWaitingTermination+0x3c>
{
1a004552:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a004554:	f000 fe8e 	bl	1a005274 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a004558:	4b0d      	ldr	r3, [pc, #52]	; (1a004590 <prvCheckTasksWaitingTermination+0x44>)
1a00455a:	68db      	ldr	r3, [r3, #12]
1a00455c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00455e:	1d20      	adds	r0, r4, #4
1a004560:	f7ff febf 	bl	1a0042e2 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a004564:	4a0b      	ldr	r2, [pc, #44]	; (1a004594 <prvCheckTasksWaitingTermination+0x48>)
1a004566:	6813      	ldr	r3, [r2, #0]
1a004568:	3b01      	subs	r3, #1
1a00456a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a00456c:	4a07      	ldr	r2, [pc, #28]	; (1a00458c <prvCheckTasksWaitingTermination+0x40>)
1a00456e:	6813      	ldr	r3, [r2, #0]
1a004570:	3b01      	subs	r3, #1
1a004572:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a004574:	f000 fea0 	bl	1a0052b8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a004578:	4620      	mov	r0, r4
1a00457a:	f7ff ffcb 	bl	1a004514 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a00457e:	4b03      	ldr	r3, [pc, #12]	; (1a00458c <prvCheckTasksWaitingTermination+0x40>)
1a004580:	681b      	ldr	r3, [r3, #0]
1a004582:	2b00      	cmp	r3, #0
1a004584:	d1e6      	bne.n	1a004554 <prvCheckTasksWaitingTermination+0x8>
}
1a004586:	bd10      	pop	{r4, pc}
1a004588:	4770      	bx	lr
1a00458a:	bf00      	nop
1a00458c:	100032c0 	.word	0x100032c0
1a004590:	10003330 	.word	0x10003330
1a004594:	100032bc 	.word	0x100032bc

1a004598 <prvIdleTask>:
{
1a004598:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a00459a:	f7ff ffd7 	bl	1a00454c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a00459e:	4b06      	ldr	r3, [pc, #24]	; (1a0045b8 <prvIdleTask+0x20>)
1a0045a0:	681b      	ldr	r3, [r3, #0]
1a0045a2:	2b01      	cmp	r3, #1
1a0045a4:	d9f9      	bls.n	1a00459a <prvIdleTask+0x2>
				taskYIELD();
1a0045a6:	4b05      	ldr	r3, [pc, #20]	; (1a0045bc <prvIdleTask+0x24>)
1a0045a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0045ac:	601a      	str	r2, [r3, #0]
1a0045ae:	f3bf 8f4f 	dsb	sy
1a0045b2:	f3bf 8f6f 	isb	sy
1a0045b6:	e7f0      	b.n	1a00459a <prvIdleTask+0x2>
1a0045b8:	10003230 	.word	0x10003230
1a0045bc:	e000ed04 	.word	0xe000ed04

1a0045c0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a0045c0:	b570      	push	{r4, r5, r6, lr}
1a0045c2:	4604      	mov	r4, r0
1a0045c4:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a0045c6:	4b1d      	ldr	r3, [pc, #116]	; (1a00463c <prvAddCurrentTaskToDelayedList+0x7c>)
1a0045c8:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0045ca:	4b1d      	ldr	r3, [pc, #116]	; (1a004640 <prvAddCurrentTaskToDelayedList+0x80>)
1a0045cc:	6818      	ldr	r0, [r3, #0]
1a0045ce:	3004      	adds	r0, #4
1a0045d0:	f7ff fe87 	bl	1a0042e2 <uxListRemove>
1a0045d4:	b950      	cbnz	r0, 1a0045ec <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a0045d6:	4b1a      	ldr	r3, [pc, #104]	; (1a004640 <prvAddCurrentTaskToDelayedList+0x80>)
1a0045d8:	681b      	ldr	r3, [r3, #0]
1a0045da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0045dc:	2301      	movs	r3, #1
1a0045de:	fa03 f202 	lsl.w	r2, r3, r2
1a0045e2:	4918      	ldr	r1, [pc, #96]	; (1a004644 <prvAddCurrentTaskToDelayedList+0x84>)
1a0045e4:	680b      	ldr	r3, [r1, #0]
1a0045e6:	ea23 0302 	bic.w	r3, r3, r2
1a0045ea:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a0045ec:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a0045f0:	d013      	beq.n	1a00461a <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a0045f2:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a0045f4:	4b12      	ldr	r3, [pc, #72]	; (1a004640 <prvAddCurrentTaskToDelayedList+0x80>)
1a0045f6:	681b      	ldr	r3, [r3, #0]
1a0045f8:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a0045fa:	42a5      	cmp	r5, r4
1a0045fc:	d816      	bhi.n	1a00462c <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0045fe:	4b12      	ldr	r3, [pc, #72]	; (1a004648 <prvAddCurrentTaskToDelayedList+0x88>)
1a004600:	6818      	ldr	r0, [r3, #0]
1a004602:	4b0f      	ldr	r3, [pc, #60]	; (1a004640 <prvAddCurrentTaskToDelayedList+0x80>)
1a004604:	6819      	ldr	r1, [r3, #0]
1a004606:	3104      	adds	r1, #4
1a004608:	f7ff fe51 	bl	1a0042ae <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a00460c:	4b0f      	ldr	r3, [pc, #60]	; (1a00464c <prvAddCurrentTaskToDelayedList+0x8c>)
1a00460e:	681b      	ldr	r3, [r3, #0]
1a004610:	42a3      	cmp	r3, r4
1a004612:	d912      	bls.n	1a00463a <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a004614:	4b0d      	ldr	r3, [pc, #52]	; (1a00464c <prvAddCurrentTaskToDelayedList+0x8c>)
1a004616:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a004618:	e00f      	b.n	1a00463a <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a00461a:	2e00      	cmp	r6, #0
1a00461c:	d0e9      	beq.n	1a0045f2 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a00461e:	4b08      	ldr	r3, [pc, #32]	; (1a004640 <prvAddCurrentTaskToDelayedList+0x80>)
1a004620:	6819      	ldr	r1, [r3, #0]
1a004622:	3104      	adds	r1, #4
1a004624:	480a      	ldr	r0, [pc, #40]	; (1a004650 <prvAddCurrentTaskToDelayedList+0x90>)
1a004626:	f7ff fe36 	bl	1a004296 <vListInsertEnd>
1a00462a:	e006      	b.n	1a00463a <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a00462c:	4b09      	ldr	r3, [pc, #36]	; (1a004654 <prvAddCurrentTaskToDelayedList+0x94>)
1a00462e:	6818      	ldr	r0, [r3, #0]
1a004630:	4b03      	ldr	r3, [pc, #12]	; (1a004640 <prvAddCurrentTaskToDelayedList+0x80>)
1a004632:	6819      	ldr	r1, [r3, #0]
1a004634:	3104      	adds	r1, #4
1a004636:	f7ff fe3a 	bl	1a0042ae <vListInsert>
}
1a00463a:	bd70      	pop	{r4, r5, r6, pc}
1a00463c:	10003344 	.word	0x10003344
1a004640:	10003224 	.word	0x10003224
1a004644:	100032d0 	.word	0x100032d0
1a004648:	10003228 	.word	0x10003228
1a00464c:	100032fc 	.word	0x100032fc
1a004650:	1000331c 	.word	0x1000331c
1a004654:	1000322c 	.word	0x1000322c

1a004658 <xTaskCreateStatic>:
	{
1a004658:	b570      	push	{r4, r5, r6, lr}
1a00465a:	b086      	sub	sp, #24
1a00465c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a00465e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a004660:	b945      	cbnz	r5, 1a004674 <xTaskCreateStatic+0x1c>
1a004662:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004666:	f383 8811 	msr	BASEPRI, r3
1a00466a:	f3bf 8f6f 	isb	sy
1a00466e:	f3bf 8f4f 	dsb	sy
1a004672:	e7fe      	b.n	1a004672 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a004674:	b944      	cbnz	r4, 1a004688 <xTaskCreateStatic+0x30>
1a004676:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00467a:	f383 8811 	msr	BASEPRI, r3
1a00467e:	f3bf 8f6f 	isb	sy
1a004682:	f3bf 8f4f 	dsb	sy
1a004686:	e7fe      	b.n	1a004686 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a004688:	2660      	movs	r6, #96	; 0x60
1a00468a:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a00468c:	9e04      	ldr	r6, [sp, #16]
1a00468e:	2e60      	cmp	r6, #96	; 0x60
1a004690:	d008      	beq.n	1a0046a4 <xTaskCreateStatic+0x4c>
1a004692:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004696:	f383 8811 	msr	BASEPRI, r3
1a00469a:	f3bf 8f6f 	isb	sy
1a00469e:	f3bf 8f4f 	dsb	sy
1a0046a2:	e7fe      	b.n	1a0046a2 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a0046a4:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a0046a6:	2502      	movs	r5, #2
1a0046a8:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a0046ac:	2500      	movs	r5, #0
1a0046ae:	9503      	str	r5, [sp, #12]
1a0046b0:	9402      	str	r4, [sp, #8]
1a0046b2:	ad05      	add	r5, sp, #20
1a0046b4:	9501      	str	r5, [sp, #4]
1a0046b6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a0046b8:	9500      	str	r5, [sp, #0]
1a0046ba:	f7ff fe57 	bl	1a00436c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a0046be:	4620      	mov	r0, r4
1a0046c0:	f7ff fed2 	bl	1a004468 <prvAddNewTaskToReadyList>
	}
1a0046c4:	9805      	ldr	r0, [sp, #20]
1a0046c6:	b006      	add	sp, #24
1a0046c8:	bd70      	pop	{r4, r5, r6, pc}

1a0046ca <xTaskCreate>:
	{
1a0046ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0046ce:	b085      	sub	sp, #20
1a0046d0:	4607      	mov	r7, r0
1a0046d2:	4688      	mov	r8, r1
1a0046d4:	4615      	mov	r5, r2
1a0046d6:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0046d8:	0090      	lsls	r0, r2, #2
1a0046da:	f7ff fa07 	bl	1a003aec <pvPortMalloc>
			if( pxStack != NULL )
1a0046de:	b308      	cbz	r0, 1a004724 <xTaskCreate+0x5a>
1a0046e0:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a0046e2:	2060      	movs	r0, #96	; 0x60
1a0046e4:	f7ff fa02 	bl	1a003aec <pvPortMalloc>
				if( pxNewTCB != NULL )
1a0046e8:	4604      	mov	r4, r0
1a0046ea:	b1b8      	cbz	r0, 1a00471c <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a0046ec:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a0046ee:	b1e4      	cbz	r4, 1a00472a <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a0046f0:	2300      	movs	r3, #0
1a0046f2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a0046f6:	9303      	str	r3, [sp, #12]
1a0046f8:	9402      	str	r4, [sp, #8]
1a0046fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0046fc:	9301      	str	r3, [sp, #4]
1a0046fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a004700:	9300      	str	r3, [sp, #0]
1a004702:	464b      	mov	r3, r9
1a004704:	462a      	mov	r2, r5
1a004706:	4641      	mov	r1, r8
1a004708:	4638      	mov	r0, r7
1a00470a:	f7ff fe2f 	bl	1a00436c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a00470e:	4620      	mov	r0, r4
1a004710:	f7ff feaa 	bl	1a004468 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a004714:	2001      	movs	r0, #1
	}
1a004716:	b005      	add	sp, #20
1a004718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a00471c:	4630      	mov	r0, r6
1a00471e:	f7ff fa1d 	bl	1a003b5c <vPortFree>
1a004722:	e7e4      	b.n	1a0046ee <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a004724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004728:	e7f5      	b.n	1a004716 <xTaskCreate+0x4c>
1a00472a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a00472e:	e7f2      	b.n	1a004716 <xTaskCreate+0x4c>

1a004730 <vTaskStartScheduler>:
{
1a004730:	b510      	push	{r4, lr}
1a004732:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a004734:	2400      	movs	r4, #0
1a004736:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a004738:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a00473a:	aa07      	add	r2, sp, #28
1a00473c:	a906      	add	r1, sp, #24
1a00473e:	a805      	add	r0, sp, #20
1a004740:	f7ff fde4 	bl	1a00430c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a004744:	9b05      	ldr	r3, [sp, #20]
1a004746:	9302      	str	r3, [sp, #8]
1a004748:	9b06      	ldr	r3, [sp, #24]
1a00474a:	9301      	str	r3, [sp, #4]
1a00474c:	9400      	str	r4, [sp, #0]
1a00474e:	4623      	mov	r3, r4
1a004750:	9a07      	ldr	r2, [sp, #28]
1a004752:	4917      	ldr	r1, [pc, #92]	; (1a0047b0 <vTaskStartScheduler+0x80>)
1a004754:	4817      	ldr	r0, [pc, #92]	; (1a0047b4 <vTaskStartScheduler+0x84>)
1a004756:	f7ff ff7f 	bl	1a004658 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a00475a:	b140      	cbz	r0, 1a00476e <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a00475c:	f000 fb70 	bl	1a004e40 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a004760:	2801      	cmp	r0, #1
1a004762:	d006      	beq.n	1a004772 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a004764:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a004768:	d018      	beq.n	1a00479c <vTaskStartScheduler+0x6c>
}
1a00476a:	b008      	add	sp, #32
1a00476c:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a00476e:	2000      	movs	r0, #0
1a004770:	e7f6      	b.n	1a004760 <vTaskStartScheduler+0x30>
1a004772:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004776:	f383 8811 	msr	BASEPRI, r3
1a00477a:	f3bf 8f6f 	isb	sy
1a00477e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a004782:	4b0d      	ldr	r3, [pc, #52]	; (1a0047b8 <vTaskStartScheduler+0x88>)
1a004784:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a004788:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a00478a:	4b0c      	ldr	r3, [pc, #48]	; (1a0047bc <vTaskStartScheduler+0x8c>)
1a00478c:	2201      	movs	r2, #1
1a00478e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a004790:	4b0b      	ldr	r3, [pc, #44]	; (1a0047c0 <vTaskStartScheduler+0x90>)
1a004792:	2200      	movs	r2, #0
1a004794:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a004796:	f000 fe0f 	bl	1a0053b8 <xPortStartScheduler>
1a00479a:	e7e6      	b.n	1a00476a <vTaskStartScheduler+0x3a>
1a00479c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0047a0:	f383 8811 	msr	BASEPRI, r3
1a0047a4:	f3bf 8f6f 	isb	sy
1a0047a8:	f3bf 8f4f 	dsb	sy
1a0047ac:	e7fe      	b.n	1a0047ac <vTaskStartScheduler+0x7c>
1a0047ae:	bf00      	nop
1a0047b0:	1a008414 	.word	0x1a008414
1a0047b4:	1a004599 	.word	0x1a004599
1a0047b8:	100032fc 	.word	0x100032fc
1a0047bc:	10003318 	.word	0x10003318
1a0047c0:	10003344 	.word	0x10003344

1a0047c4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a0047c4:	4a02      	ldr	r2, [pc, #8]	; (1a0047d0 <vTaskSuspendAll+0xc>)
1a0047c6:	6813      	ldr	r3, [r2, #0]
1a0047c8:	3301      	adds	r3, #1
1a0047ca:	6013      	str	r3, [r2, #0]
}
1a0047cc:	4770      	bx	lr
1a0047ce:	bf00      	nop
1a0047d0:	100032c8 	.word	0x100032c8

1a0047d4 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a0047d4:	4b01      	ldr	r3, [pc, #4]	; (1a0047dc <xTaskGetTickCount+0x8>)
1a0047d6:	6818      	ldr	r0, [r3, #0]
}
1a0047d8:	4770      	bx	lr
1a0047da:	bf00      	nop
1a0047dc:	10003344 	.word	0x10003344

1a0047e0 <xTaskIncrementTick>:
{
1a0047e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0047e2:	4b3a      	ldr	r3, [pc, #232]	; (1a0048cc <xTaskIncrementTick+0xec>)
1a0047e4:	681b      	ldr	r3, [r3, #0]
1a0047e6:	2b00      	cmp	r3, #0
1a0047e8:	d164      	bne.n	1a0048b4 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a0047ea:	4b39      	ldr	r3, [pc, #228]	; (1a0048d0 <xTaskIncrementTick+0xf0>)
1a0047ec:	681d      	ldr	r5, [r3, #0]
1a0047ee:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a0047f0:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a0047f2:	b9c5      	cbnz	r5, 1a004826 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a0047f4:	4b37      	ldr	r3, [pc, #220]	; (1a0048d4 <xTaskIncrementTick+0xf4>)
1a0047f6:	681b      	ldr	r3, [r3, #0]
1a0047f8:	681b      	ldr	r3, [r3, #0]
1a0047fa:	b143      	cbz	r3, 1a00480e <xTaskIncrementTick+0x2e>
1a0047fc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004800:	f383 8811 	msr	BASEPRI, r3
1a004804:	f3bf 8f6f 	isb	sy
1a004808:	f3bf 8f4f 	dsb	sy
1a00480c:	e7fe      	b.n	1a00480c <xTaskIncrementTick+0x2c>
1a00480e:	4a31      	ldr	r2, [pc, #196]	; (1a0048d4 <xTaskIncrementTick+0xf4>)
1a004810:	6811      	ldr	r1, [r2, #0]
1a004812:	4b31      	ldr	r3, [pc, #196]	; (1a0048d8 <xTaskIncrementTick+0xf8>)
1a004814:	6818      	ldr	r0, [r3, #0]
1a004816:	6010      	str	r0, [r2, #0]
1a004818:	6019      	str	r1, [r3, #0]
1a00481a:	4a30      	ldr	r2, [pc, #192]	; (1a0048dc <xTaskIncrementTick+0xfc>)
1a00481c:	6813      	ldr	r3, [r2, #0]
1a00481e:	3301      	adds	r3, #1
1a004820:	6013      	str	r3, [r2, #0]
1a004822:	f7ff fd8d 	bl	1a004340 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a004826:	4b2e      	ldr	r3, [pc, #184]	; (1a0048e0 <xTaskIncrementTick+0x100>)
1a004828:	681b      	ldr	r3, [r3, #0]
1a00482a:	42ab      	cmp	r3, r5
1a00482c:	d938      	bls.n	1a0048a0 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a00482e:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a004830:	4b2c      	ldr	r3, [pc, #176]	; (1a0048e4 <xTaskIncrementTick+0x104>)
1a004832:	681b      	ldr	r3, [r3, #0]
1a004834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a004836:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00483a:	009a      	lsls	r2, r3, #2
1a00483c:	4b2a      	ldr	r3, [pc, #168]	; (1a0048e8 <xTaskIncrementTick+0x108>)
1a00483e:	589b      	ldr	r3, [r3, r2]
1a004840:	2b01      	cmp	r3, #1
1a004842:	d93c      	bls.n	1a0048be <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a004844:	2401      	movs	r4, #1
1a004846:	e03a      	b.n	1a0048be <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a004848:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a00484a:	4b22      	ldr	r3, [pc, #136]	; (1a0048d4 <xTaskIncrementTick+0xf4>)
1a00484c:	681b      	ldr	r3, [r3, #0]
1a00484e:	681b      	ldr	r3, [r3, #0]
1a004850:	b343      	cbz	r3, 1a0048a4 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a004852:	4b20      	ldr	r3, [pc, #128]	; (1a0048d4 <xTaskIncrementTick+0xf4>)
1a004854:	681b      	ldr	r3, [r3, #0]
1a004856:	68db      	ldr	r3, [r3, #12]
1a004858:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a00485a:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a00485c:	429d      	cmp	r5, r3
1a00485e:	d326      	bcc.n	1a0048ae <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a004860:	1d37      	adds	r7, r6, #4
1a004862:	4638      	mov	r0, r7
1a004864:	f7ff fd3d 	bl	1a0042e2 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a004868:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a00486a:	b11b      	cbz	r3, 1a004874 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a00486c:	f106 0018 	add.w	r0, r6, #24
1a004870:	f7ff fd37 	bl	1a0042e2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a004874:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a004876:	2201      	movs	r2, #1
1a004878:	409a      	lsls	r2, r3
1a00487a:	491c      	ldr	r1, [pc, #112]	; (1a0048ec <xTaskIncrementTick+0x10c>)
1a00487c:	6808      	ldr	r0, [r1, #0]
1a00487e:	4302      	orrs	r2, r0
1a004880:	600a      	str	r2, [r1, #0]
1a004882:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a004886:	009a      	lsls	r2, r3, #2
1a004888:	4639      	mov	r1, r7
1a00488a:	4817      	ldr	r0, [pc, #92]	; (1a0048e8 <xTaskIncrementTick+0x108>)
1a00488c:	4410      	add	r0, r2
1a00488e:	f7ff fd02 	bl	1a004296 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a004892:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a004894:	4b13      	ldr	r3, [pc, #76]	; (1a0048e4 <xTaskIncrementTick+0x104>)
1a004896:	681b      	ldr	r3, [r3, #0]
1a004898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00489a:	429a      	cmp	r2, r3
1a00489c:	d2d4      	bcs.n	1a004848 <xTaskIncrementTick+0x68>
1a00489e:	e7d4      	b.n	1a00484a <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a0048a0:	2400      	movs	r4, #0
1a0048a2:	e7d2      	b.n	1a00484a <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0048a4:	4b0e      	ldr	r3, [pc, #56]	; (1a0048e0 <xTaskIncrementTick+0x100>)
1a0048a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0048aa:	601a      	str	r2, [r3, #0]
					break;
1a0048ac:	e7c0      	b.n	1a004830 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a0048ae:	4a0c      	ldr	r2, [pc, #48]	; (1a0048e0 <xTaskIncrementTick+0x100>)
1a0048b0:	6013      	str	r3, [r2, #0]
						break;
1a0048b2:	e7bd      	b.n	1a004830 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a0048b4:	4a0e      	ldr	r2, [pc, #56]	; (1a0048f0 <xTaskIncrementTick+0x110>)
1a0048b6:	6813      	ldr	r3, [r2, #0]
1a0048b8:	3301      	adds	r3, #1
1a0048ba:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a0048bc:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a0048be:	4b0d      	ldr	r3, [pc, #52]	; (1a0048f4 <xTaskIncrementTick+0x114>)
1a0048c0:	681b      	ldr	r3, [r3, #0]
1a0048c2:	b103      	cbz	r3, 1a0048c6 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a0048c4:	2401      	movs	r4, #1
}
1a0048c6:	4620      	mov	r0, r4
1a0048c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0048ca:	bf00      	nop
1a0048cc:	100032c8 	.word	0x100032c8
1a0048d0:	10003344 	.word	0x10003344
1a0048d4:	10003228 	.word	0x10003228
1a0048d8:	1000322c 	.word	0x1000322c
1a0048dc:	10003300 	.word	0x10003300
1a0048e0:	100032fc 	.word	0x100032fc
1a0048e4:	10003224 	.word	0x10003224
1a0048e8:	10003230 	.word	0x10003230
1a0048ec:	100032d0 	.word	0x100032d0
1a0048f0:	100032c4 	.word	0x100032c4
1a0048f4:	10003348 	.word	0x10003348

1a0048f8 <xTaskResumeAll>:
{
1a0048f8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a0048fa:	4b33      	ldr	r3, [pc, #204]	; (1a0049c8 <xTaskResumeAll+0xd0>)
1a0048fc:	681b      	ldr	r3, [r3, #0]
1a0048fe:	b943      	cbnz	r3, 1a004912 <xTaskResumeAll+0x1a>
1a004900:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004904:	f383 8811 	msr	BASEPRI, r3
1a004908:	f3bf 8f6f 	isb	sy
1a00490c:	f3bf 8f4f 	dsb	sy
1a004910:	e7fe      	b.n	1a004910 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a004912:	f000 fcaf 	bl	1a005274 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a004916:	4b2c      	ldr	r3, [pc, #176]	; (1a0049c8 <xTaskResumeAll+0xd0>)
1a004918:	681a      	ldr	r2, [r3, #0]
1a00491a:	3a01      	subs	r2, #1
1a00491c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00491e:	681b      	ldr	r3, [r3, #0]
1a004920:	2b00      	cmp	r3, #0
1a004922:	d14d      	bne.n	1a0049c0 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a004924:	4b29      	ldr	r3, [pc, #164]	; (1a0049cc <xTaskResumeAll+0xd4>)
1a004926:	681b      	ldr	r3, [r3, #0]
1a004928:	b923      	cbnz	r3, 1a004934 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a00492a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a00492c:	f000 fcc4 	bl	1a0052b8 <vPortExitCritical>
}
1a004930:	4620      	mov	r0, r4
1a004932:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a004934:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a004936:	4b26      	ldr	r3, [pc, #152]	; (1a0049d0 <xTaskResumeAll+0xd8>)
1a004938:	681b      	ldr	r3, [r3, #0]
1a00493a:	b31b      	cbz	r3, 1a004984 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a00493c:	4b24      	ldr	r3, [pc, #144]	; (1a0049d0 <xTaskResumeAll+0xd8>)
1a00493e:	68db      	ldr	r3, [r3, #12]
1a004940:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a004942:	f104 0018 	add.w	r0, r4, #24
1a004946:	f7ff fccc 	bl	1a0042e2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00494a:	1d25      	adds	r5, r4, #4
1a00494c:	4628      	mov	r0, r5
1a00494e:	f7ff fcc8 	bl	1a0042e2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a004952:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a004954:	2201      	movs	r2, #1
1a004956:	409a      	lsls	r2, r3
1a004958:	491e      	ldr	r1, [pc, #120]	; (1a0049d4 <xTaskResumeAll+0xdc>)
1a00495a:	6808      	ldr	r0, [r1, #0]
1a00495c:	4302      	orrs	r2, r0
1a00495e:	600a      	str	r2, [r1, #0]
1a004960:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a004964:	009a      	lsls	r2, r3, #2
1a004966:	4629      	mov	r1, r5
1a004968:	481b      	ldr	r0, [pc, #108]	; (1a0049d8 <xTaskResumeAll+0xe0>)
1a00496a:	4410      	add	r0, r2
1a00496c:	f7ff fc93 	bl	1a004296 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a004970:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a004972:	4b1a      	ldr	r3, [pc, #104]	; (1a0049dc <xTaskResumeAll+0xe4>)
1a004974:	681b      	ldr	r3, [r3, #0]
1a004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a004978:	429a      	cmp	r2, r3
1a00497a:	d3dc      	bcc.n	1a004936 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a00497c:	4b18      	ldr	r3, [pc, #96]	; (1a0049e0 <xTaskResumeAll+0xe8>)
1a00497e:	2201      	movs	r2, #1
1a004980:	601a      	str	r2, [r3, #0]
1a004982:	e7d8      	b.n	1a004936 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a004984:	b10c      	cbz	r4, 1a00498a <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a004986:	f7ff fcdb 	bl	1a004340 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a00498a:	4b16      	ldr	r3, [pc, #88]	; (1a0049e4 <xTaskResumeAll+0xec>)
1a00498c:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a00498e:	b154      	cbz	r4, 1a0049a6 <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a004990:	f7ff ff26 	bl	1a0047e0 <xTaskIncrementTick>
1a004994:	b110      	cbz	r0, 1a00499c <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a004996:	4b12      	ldr	r3, [pc, #72]	; (1a0049e0 <xTaskResumeAll+0xe8>)
1a004998:	2201      	movs	r2, #1
1a00499a:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a00499c:	3c01      	subs	r4, #1
1a00499e:	d1f7      	bne.n	1a004990 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a0049a0:	4b10      	ldr	r3, [pc, #64]	; (1a0049e4 <xTaskResumeAll+0xec>)
1a0049a2:	2200      	movs	r2, #0
1a0049a4:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a0049a6:	4b0e      	ldr	r3, [pc, #56]	; (1a0049e0 <xTaskResumeAll+0xe8>)
1a0049a8:	681b      	ldr	r3, [r3, #0]
1a0049aa:	b15b      	cbz	r3, 1a0049c4 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a0049ac:	4b0e      	ldr	r3, [pc, #56]	; (1a0049e8 <xTaskResumeAll+0xf0>)
1a0049ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0049b2:	601a      	str	r2, [r3, #0]
1a0049b4:	f3bf 8f4f 	dsb	sy
1a0049b8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a0049bc:	2401      	movs	r4, #1
1a0049be:	e7b5      	b.n	1a00492c <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a0049c0:	2400      	movs	r4, #0
1a0049c2:	e7b3      	b.n	1a00492c <xTaskResumeAll+0x34>
1a0049c4:	2400      	movs	r4, #0
1a0049c6:	e7b1      	b.n	1a00492c <xTaskResumeAll+0x34>
1a0049c8:	100032c8 	.word	0x100032c8
1a0049cc:	100032bc 	.word	0x100032bc
1a0049d0:	10003304 	.word	0x10003304
1a0049d4:	100032d0 	.word	0x100032d0
1a0049d8:	10003230 	.word	0x10003230
1a0049dc:	10003224 	.word	0x10003224
1a0049e0:	10003348 	.word	0x10003348
1a0049e4:	100032c4 	.word	0x100032c4
1a0049e8:	e000ed04 	.word	0xe000ed04

1a0049ec <vTaskDelay>:
	{
1a0049ec:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a0049ee:	b1a8      	cbz	r0, 1a004a1c <vTaskDelay+0x30>
1a0049f0:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a0049f2:	4b0f      	ldr	r3, [pc, #60]	; (1a004a30 <vTaskDelay+0x44>)
1a0049f4:	681b      	ldr	r3, [r3, #0]
1a0049f6:	b143      	cbz	r3, 1a004a0a <vTaskDelay+0x1e>
1a0049f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0049fc:	f383 8811 	msr	BASEPRI, r3
1a004a00:	f3bf 8f6f 	isb	sy
1a004a04:	f3bf 8f4f 	dsb	sy
1a004a08:	e7fe      	b.n	1a004a08 <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a004a0a:	f7ff fedb 	bl	1a0047c4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a004a0e:	2100      	movs	r1, #0
1a004a10:	4620      	mov	r0, r4
1a004a12:	f7ff fdd5 	bl	1a0045c0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a004a16:	f7ff ff6f 	bl	1a0048f8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a004a1a:	b938      	cbnz	r0, 1a004a2c <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a004a1c:	4b05      	ldr	r3, [pc, #20]	; (1a004a34 <vTaskDelay+0x48>)
1a004a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a004a22:	601a      	str	r2, [r3, #0]
1a004a24:	f3bf 8f4f 	dsb	sy
1a004a28:	f3bf 8f6f 	isb	sy
	}
1a004a2c:	bd10      	pop	{r4, pc}
1a004a2e:	bf00      	nop
1a004a30:	100032c8 	.word	0x100032c8
1a004a34:	e000ed04 	.word	0xe000ed04

1a004a38 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a004a38:	4b2c      	ldr	r3, [pc, #176]	; (1a004aec <vTaskSwitchContext+0xb4>)
1a004a3a:	681b      	ldr	r3, [r3, #0]
1a004a3c:	b11b      	cbz	r3, 1a004a46 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a004a3e:	4b2c      	ldr	r3, [pc, #176]	; (1a004af0 <vTaskSwitchContext+0xb8>)
1a004a40:	2201      	movs	r2, #1
1a004a42:	601a      	str	r2, [r3, #0]
1a004a44:	4770      	bx	lr
{
1a004a46:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a004a48:	4b29      	ldr	r3, [pc, #164]	; (1a004af0 <vTaskSwitchContext+0xb8>)
1a004a4a:	2200      	movs	r2, #0
1a004a4c:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a004a4e:	4b29      	ldr	r3, [pc, #164]	; (1a004af4 <vTaskSwitchContext+0xbc>)
1a004a50:	681b      	ldr	r3, [r3, #0]
1a004a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a004a54:	681a      	ldr	r2, [r3, #0]
1a004a56:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a004a5a:	d103      	bne.n	1a004a64 <vTaskSwitchContext+0x2c>
1a004a5c:	685a      	ldr	r2, [r3, #4]
1a004a5e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a004a62:	d01b      	beq.n	1a004a9c <vTaskSwitchContext+0x64>
1a004a64:	4b23      	ldr	r3, [pc, #140]	; (1a004af4 <vTaskSwitchContext+0xbc>)
1a004a66:	6818      	ldr	r0, [r3, #0]
1a004a68:	6819      	ldr	r1, [r3, #0]
1a004a6a:	3134      	adds	r1, #52	; 0x34
1a004a6c:	f7ff fc66 	bl	1a00433c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a004a70:	4b21      	ldr	r3, [pc, #132]	; (1a004af8 <vTaskSwitchContext+0xc0>)
1a004a72:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a004a74:	fab3 f383 	clz	r3, r3
1a004a78:	b2db      	uxtb	r3, r3
1a004a7a:	f1c3 031f 	rsb	r3, r3, #31
1a004a7e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a004a82:	008a      	lsls	r2, r1, #2
1a004a84:	491d      	ldr	r1, [pc, #116]	; (1a004afc <vTaskSwitchContext+0xc4>)
1a004a86:	588a      	ldr	r2, [r1, r2]
1a004a88:	b98a      	cbnz	r2, 1a004aae <vTaskSwitchContext+0x76>
	__asm volatile
1a004a8a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004a8e:	f383 8811 	msr	BASEPRI, r3
1a004a92:	f3bf 8f6f 	isb	sy
1a004a96:	f3bf 8f4f 	dsb	sy
1a004a9a:	e7fe      	b.n	1a004a9a <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a004a9c:	689a      	ldr	r2, [r3, #8]
1a004a9e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a004aa2:	d1df      	bne.n	1a004a64 <vTaskSwitchContext+0x2c>
1a004aa4:	68db      	ldr	r3, [r3, #12]
1a004aa6:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a004aaa:	d1db      	bne.n	1a004a64 <vTaskSwitchContext+0x2c>
1a004aac:	e7e0      	b.n	1a004a70 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a004aae:	4813      	ldr	r0, [pc, #76]	; (1a004afc <vTaskSwitchContext+0xc4>)
1a004ab0:	009a      	lsls	r2, r3, #2
1a004ab2:	18d4      	adds	r4, r2, r3
1a004ab4:	00a1      	lsls	r1, r4, #2
1a004ab6:	4401      	add	r1, r0
1a004ab8:	684c      	ldr	r4, [r1, #4]
1a004aba:	6864      	ldr	r4, [r4, #4]
1a004abc:	604c      	str	r4, [r1, #4]
1a004abe:	441a      	add	r2, r3
1a004ac0:	0091      	lsls	r1, r2, #2
1a004ac2:	3108      	adds	r1, #8
1a004ac4:	4408      	add	r0, r1
1a004ac6:	4284      	cmp	r4, r0
1a004ac8:	d009      	beq.n	1a004ade <vTaskSwitchContext+0xa6>
1a004aca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a004ace:	009a      	lsls	r2, r3, #2
1a004ad0:	4b0a      	ldr	r3, [pc, #40]	; (1a004afc <vTaskSwitchContext+0xc4>)
1a004ad2:	4413      	add	r3, r2
1a004ad4:	685b      	ldr	r3, [r3, #4]
1a004ad6:	68da      	ldr	r2, [r3, #12]
1a004ad8:	4b06      	ldr	r3, [pc, #24]	; (1a004af4 <vTaskSwitchContext+0xbc>)
1a004ada:	601a      	str	r2, [r3, #0]
}
1a004adc:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a004ade:	6861      	ldr	r1, [r4, #4]
1a004ae0:	4806      	ldr	r0, [pc, #24]	; (1a004afc <vTaskSwitchContext+0xc4>)
1a004ae2:	2214      	movs	r2, #20
1a004ae4:	fb02 0203 	mla	r2, r2, r3, r0
1a004ae8:	6051      	str	r1, [r2, #4]
1a004aea:	e7ee      	b.n	1a004aca <vTaskSwitchContext+0x92>
1a004aec:	100032c8 	.word	0x100032c8
1a004af0:	10003348 	.word	0x10003348
1a004af4:	10003224 	.word	0x10003224
1a004af8:	100032d0 	.word	0x100032d0
1a004afc:	10003230 	.word	0x10003230

1a004b00 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a004b00:	b940      	cbnz	r0, 1a004b14 <vTaskPlaceOnEventList+0x14>
1a004b02:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004b06:	f383 8811 	msr	BASEPRI, r3
1a004b0a:	f3bf 8f6f 	isb	sy
1a004b0e:	f3bf 8f4f 	dsb	sy
1a004b12:	e7fe      	b.n	1a004b12 <vTaskPlaceOnEventList+0x12>
{
1a004b14:	b510      	push	{r4, lr}
1a004b16:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a004b18:	4b04      	ldr	r3, [pc, #16]	; (1a004b2c <vTaskPlaceOnEventList+0x2c>)
1a004b1a:	6819      	ldr	r1, [r3, #0]
1a004b1c:	3118      	adds	r1, #24
1a004b1e:	f7ff fbc6 	bl	1a0042ae <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a004b22:	2101      	movs	r1, #1
1a004b24:	4620      	mov	r0, r4
1a004b26:	f7ff fd4b 	bl	1a0045c0 <prvAddCurrentTaskToDelayedList>
}
1a004b2a:	bd10      	pop	{r4, pc}
1a004b2c:	10003224 	.word	0x10003224

1a004b30 <vTaskPlaceOnEventListRestricted>:
	{
1a004b30:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a004b32:	b940      	cbnz	r0, 1a004b46 <vTaskPlaceOnEventListRestricted+0x16>
1a004b34:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004b38:	f383 8811 	msr	BASEPRI, r3
1a004b3c:	f3bf 8f6f 	isb	sy
1a004b40:	f3bf 8f4f 	dsb	sy
1a004b44:	e7fe      	b.n	1a004b44 <vTaskPlaceOnEventListRestricted+0x14>
1a004b46:	460c      	mov	r4, r1
1a004b48:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a004b4a:	4a06      	ldr	r2, [pc, #24]	; (1a004b64 <vTaskPlaceOnEventListRestricted+0x34>)
1a004b4c:	6811      	ldr	r1, [r2, #0]
1a004b4e:	3118      	adds	r1, #24
1a004b50:	f7ff fba1 	bl	1a004296 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a004b54:	b10d      	cbz	r5, 1a004b5a <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a004b56:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a004b5a:	4629      	mov	r1, r5
1a004b5c:	4620      	mov	r0, r4
1a004b5e:	f7ff fd2f 	bl	1a0045c0 <prvAddCurrentTaskToDelayedList>
	}
1a004b62:	bd38      	pop	{r3, r4, r5, pc}
1a004b64:	10003224 	.word	0x10003224

1a004b68 <xTaskRemoveFromEventList>:
{
1a004b68:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a004b6a:	68c3      	ldr	r3, [r0, #12]
1a004b6c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a004b6e:	b944      	cbnz	r4, 1a004b82 <xTaskRemoveFromEventList+0x1a>
1a004b70:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004b74:	f383 8811 	msr	BASEPRI, r3
1a004b78:	f3bf 8f6f 	isb	sy
1a004b7c:	f3bf 8f4f 	dsb	sy
1a004b80:	e7fe      	b.n	1a004b80 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a004b82:	f104 0518 	add.w	r5, r4, #24
1a004b86:	4628      	mov	r0, r5
1a004b88:	f7ff fbab 	bl	1a0042e2 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a004b8c:	4b13      	ldr	r3, [pc, #76]	; (1a004bdc <xTaskRemoveFromEventList+0x74>)
1a004b8e:	681b      	ldr	r3, [r3, #0]
1a004b90:	b9e3      	cbnz	r3, 1a004bcc <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a004b92:	1d25      	adds	r5, r4, #4
1a004b94:	4628      	mov	r0, r5
1a004b96:	f7ff fba4 	bl	1a0042e2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a004b9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a004b9c:	2201      	movs	r2, #1
1a004b9e:	409a      	lsls	r2, r3
1a004ba0:	490f      	ldr	r1, [pc, #60]	; (1a004be0 <xTaskRemoveFromEventList+0x78>)
1a004ba2:	6808      	ldr	r0, [r1, #0]
1a004ba4:	4302      	orrs	r2, r0
1a004ba6:	600a      	str	r2, [r1, #0]
1a004ba8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a004bac:	009a      	lsls	r2, r3, #2
1a004bae:	4629      	mov	r1, r5
1a004bb0:	480c      	ldr	r0, [pc, #48]	; (1a004be4 <xTaskRemoveFromEventList+0x7c>)
1a004bb2:	4410      	add	r0, r2
1a004bb4:	f7ff fb6f 	bl	1a004296 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a004bb8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a004bba:	4b0b      	ldr	r3, [pc, #44]	; (1a004be8 <xTaskRemoveFromEventList+0x80>)
1a004bbc:	681b      	ldr	r3, [r3, #0]
1a004bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a004bc0:	429a      	cmp	r2, r3
1a004bc2:	d908      	bls.n	1a004bd6 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a004bc4:	2001      	movs	r0, #1
1a004bc6:	4b09      	ldr	r3, [pc, #36]	; (1a004bec <xTaskRemoveFromEventList+0x84>)
1a004bc8:	6018      	str	r0, [r3, #0]
}
1a004bca:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a004bcc:	4629      	mov	r1, r5
1a004bce:	4808      	ldr	r0, [pc, #32]	; (1a004bf0 <xTaskRemoveFromEventList+0x88>)
1a004bd0:	f7ff fb61 	bl	1a004296 <vListInsertEnd>
1a004bd4:	e7f0      	b.n	1a004bb8 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a004bd6:	2000      	movs	r0, #0
	return xReturn;
1a004bd8:	e7f7      	b.n	1a004bca <xTaskRemoveFromEventList+0x62>
1a004bda:	bf00      	nop
1a004bdc:	100032c8 	.word	0x100032c8
1a004be0:	100032d0 	.word	0x100032d0
1a004be4:	10003230 	.word	0x10003230
1a004be8:	10003224 	.word	0x10003224
1a004bec:	10003348 	.word	0x10003348
1a004bf0:	10003304 	.word	0x10003304

1a004bf4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a004bf4:	4b03      	ldr	r3, [pc, #12]	; (1a004c04 <vTaskInternalSetTimeOutState+0x10>)
1a004bf6:	681b      	ldr	r3, [r3, #0]
1a004bf8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a004bfa:	4b03      	ldr	r3, [pc, #12]	; (1a004c08 <vTaskInternalSetTimeOutState+0x14>)
1a004bfc:	681b      	ldr	r3, [r3, #0]
1a004bfe:	6043      	str	r3, [r0, #4]
}
1a004c00:	4770      	bx	lr
1a004c02:	bf00      	nop
1a004c04:	10003300 	.word	0x10003300
1a004c08:	10003344 	.word	0x10003344

1a004c0c <xTaskCheckForTimeOut>:
{
1a004c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a004c0e:	b150      	cbz	r0, 1a004c26 <xTaskCheckForTimeOut+0x1a>
1a004c10:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a004c12:	b989      	cbnz	r1, 1a004c38 <xTaskCheckForTimeOut+0x2c>
1a004c14:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004c18:	f383 8811 	msr	BASEPRI, r3
1a004c1c:	f3bf 8f6f 	isb	sy
1a004c20:	f3bf 8f4f 	dsb	sy
1a004c24:	e7fe      	b.n	1a004c24 <xTaskCheckForTimeOut+0x18>
1a004c26:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004c2a:	f383 8811 	msr	BASEPRI, r3
1a004c2e:	f3bf 8f6f 	isb	sy
1a004c32:	f3bf 8f4f 	dsb	sy
1a004c36:	e7fe      	b.n	1a004c36 <xTaskCheckForTimeOut+0x2a>
1a004c38:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a004c3a:	f000 fb1b 	bl	1a005274 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a004c3e:	4b11      	ldr	r3, [pc, #68]	; (1a004c84 <xTaskCheckForTimeOut+0x78>)
1a004c40:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a004c42:	6868      	ldr	r0, [r5, #4]
1a004c44:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a004c46:	6823      	ldr	r3, [r4, #0]
1a004c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a004c4c:	d016      	beq.n	1a004c7c <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a004c4e:	682f      	ldr	r7, [r5, #0]
1a004c50:	4e0d      	ldr	r6, [pc, #52]	; (1a004c88 <xTaskCheckForTimeOut+0x7c>)
1a004c52:	6836      	ldr	r6, [r6, #0]
1a004c54:	42b7      	cmp	r7, r6
1a004c56:	d001      	beq.n	1a004c5c <xTaskCheckForTimeOut+0x50>
1a004c58:	4288      	cmp	r0, r1
1a004c5a:	d911      	bls.n	1a004c80 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a004c5c:	4293      	cmp	r3, r2
1a004c5e:	d803      	bhi.n	1a004c68 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a004c60:	2300      	movs	r3, #0
1a004c62:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a004c64:	2401      	movs	r4, #1
1a004c66:	e005      	b.n	1a004c74 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a004c68:	1a9b      	subs	r3, r3, r2
1a004c6a:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a004c6c:	4628      	mov	r0, r5
1a004c6e:	f7ff ffc1 	bl	1a004bf4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a004c72:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a004c74:	f000 fb20 	bl	1a0052b8 <vPortExitCritical>
}
1a004c78:	4620      	mov	r0, r4
1a004c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a004c7c:	2400      	movs	r4, #0
1a004c7e:	e7f9      	b.n	1a004c74 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a004c80:	2401      	movs	r4, #1
1a004c82:	e7f7      	b.n	1a004c74 <xTaskCheckForTimeOut+0x68>
1a004c84:	10003344 	.word	0x10003344
1a004c88:	10003300 	.word	0x10003300

1a004c8c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a004c8c:	4b01      	ldr	r3, [pc, #4]	; (1a004c94 <vTaskMissedYield+0x8>)
1a004c8e:	2201      	movs	r2, #1
1a004c90:	601a      	str	r2, [r3, #0]
}
1a004c92:	4770      	bx	lr
1a004c94:	10003348 	.word	0x10003348

1a004c98 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a004c98:	4b05      	ldr	r3, [pc, #20]	; (1a004cb0 <xTaskGetSchedulerState+0x18>)
1a004c9a:	681b      	ldr	r3, [r3, #0]
1a004c9c:	b133      	cbz	r3, 1a004cac <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a004c9e:	4b05      	ldr	r3, [pc, #20]	; (1a004cb4 <xTaskGetSchedulerState+0x1c>)
1a004ca0:	681b      	ldr	r3, [r3, #0]
1a004ca2:	b10b      	cbz	r3, 1a004ca8 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a004ca4:	2000      	movs	r0, #0
	}
1a004ca6:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a004ca8:	2002      	movs	r0, #2
1a004caa:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a004cac:	2001      	movs	r0, #1
1a004cae:	4770      	bx	lr
1a004cb0:	10003318 	.word	0x10003318
1a004cb4:	100032c8 	.word	0x100032c8

1a004cb8 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a004cb8:	2800      	cmp	r0, #0
1a004cba:	d049      	beq.n	1a004d50 <xTaskPriorityDisinherit+0x98>
	{
1a004cbc:	b538      	push	{r3, r4, r5, lr}
1a004cbe:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a004cc0:	4a26      	ldr	r2, [pc, #152]	; (1a004d5c <xTaskPriorityDisinherit+0xa4>)
1a004cc2:	6812      	ldr	r2, [r2, #0]
1a004cc4:	4282      	cmp	r2, r0
1a004cc6:	d008      	beq.n	1a004cda <xTaskPriorityDisinherit+0x22>
1a004cc8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004ccc:	f383 8811 	msr	BASEPRI, r3
1a004cd0:	f3bf 8f6f 	isb	sy
1a004cd4:	f3bf 8f4f 	dsb	sy
1a004cd8:	e7fe      	b.n	1a004cd8 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a004cda:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a004cdc:	b942      	cbnz	r2, 1a004cf0 <xTaskPriorityDisinherit+0x38>
1a004cde:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004ce2:	f383 8811 	msr	BASEPRI, r3
1a004ce6:	f3bf 8f6f 	isb	sy
1a004cea:	f3bf 8f4f 	dsb	sy
1a004cee:	e7fe      	b.n	1a004cee <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a004cf0:	3a01      	subs	r2, #1
1a004cf2:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a004cf4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a004cf6:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a004cf8:	4288      	cmp	r0, r1
1a004cfa:	d02b      	beq.n	1a004d54 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a004cfc:	bb62      	cbnz	r2, 1a004d58 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a004cfe:	1d25      	adds	r5, r4, #4
1a004d00:	4628      	mov	r0, r5
1a004d02:	f7ff faee 	bl	1a0042e2 <uxListRemove>
1a004d06:	b970      	cbnz	r0, 1a004d26 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a004d08:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a004d0a:	2314      	movs	r3, #20
1a004d0c:	fb03 f302 	mul.w	r3, r3, r2
1a004d10:	4913      	ldr	r1, [pc, #76]	; (1a004d60 <xTaskPriorityDisinherit+0xa8>)
1a004d12:	58cb      	ldr	r3, [r1, r3]
1a004d14:	b93b      	cbnz	r3, 1a004d26 <xTaskPriorityDisinherit+0x6e>
1a004d16:	2301      	movs	r3, #1
1a004d18:	fa03 f202 	lsl.w	r2, r3, r2
1a004d1c:	4911      	ldr	r1, [pc, #68]	; (1a004d64 <xTaskPriorityDisinherit+0xac>)
1a004d1e:	680b      	ldr	r3, [r1, #0]
1a004d20:	ea23 0302 	bic.w	r3, r3, r2
1a004d24:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a004d26:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a004d28:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a004d2a:	f1c3 0207 	rsb	r2, r3, #7
1a004d2e:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a004d30:	2401      	movs	r4, #1
1a004d32:	fa04 f203 	lsl.w	r2, r4, r3
1a004d36:	490b      	ldr	r1, [pc, #44]	; (1a004d64 <xTaskPriorityDisinherit+0xac>)
1a004d38:	6808      	ldr	r0, [r1, #0]
1a004d3a:	4302      	orrs	r2, r0
1a004d3c:	600a      	str	r2, [r1, #0]
1a004d3e:	4629      	mov	r1, r5
1a004d40:	4a07      	ldr	r2, [pc, #28]	; (1a004d60 <xTaskPriorityDisinherit+0xa8>)
1a004d42:	2014      	movs	r0, #20
1a004d44:	fb00 2003 	mla	r0, r0, r3, r2
1a004d48:	f7ff faa5 	bl	1a004296 <vListInsertEnd>
					xReturn = pdTRUE;
1a004d4c:	4620      	mov	r0, r4
	}
1a004d4e:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a004d50:	2000      	movs	r0, #0
	}
1a004d52:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a004d54:	2000      	movs	r0, #0
1a004d56:	e7fa      	b.n	1a004d4e <xTaskPriorityDisinherit+0x96>
1a004d58:	2000      	movs	r0, #0
		return xReturn;
1a004d5a:	e7f8      	b.n	1a004d4e <xTaskPriorityDisinherit+0x96>
1a004d5c:	10003224 	.word	0x10003224
1a004d60:	10003230 	.word	0x10003230
1a004d64:	100032d0 	.word	0x100032d0

1a004d68 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a004d68:	4b06      	ldr	r3, [pc, #24]	; (1a004d84 <prvGetNextExpireTime+0x1c>)
1a004d6a:	681a      	ldr	r2, [r3, #0]
1a004d6c:	6813      	ldr	r3, [r2, #0]
1a004d6e:	fab3 f383 	clz	r3, r3
1a004d72:	095b      	lsrs	r3, r3, #5
1a004d74:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a004d76:	b913      	cbnz	r3, 1a004d7e <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a004d78:	68d3      	ldr	r3, [r2, #12]
1a004d7a:	6818      	ldr	r0, [r3, #0]
1a004d7c:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a004d7e:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a004d80:	4770      	bx	lr
1a004d82:	bf00      	nop
1a004d84:	1000334c 	.word	0x1000334c

1a004d88 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a004d88:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a004d8a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a004d8c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a004d8e:	4291      	cmp	r1, r2
1a004d90:	d80c      	bhi.n	1a004dac <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a004d92:	1ad2      	subs	r2, r2, r3
1a004d94:	6983      	ldr	r3, [r0, #24]
1a004d96:	429a      	cmp	r2, r3
1a004d98:	d301      	bcc.n	1a004d9e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a004d9a:	2001      	movs	r0, #1
1a004d9c:	e010      	b.n	1a004dc0 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a004d9e:	1d01      	adds	r1, r0, #4
1a004da0:	4b09      	ldr	r3, [pc, #36]	; (1a004dc8 <prvInsertTimerInActiveList+0x40>)
1a004da2:	6818      	ldr	r0, [r3, #0]
1a004da4:	f7ff fa83 	bl	1a0042ae <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a004da8:	2000      	movs	r0, #0
1a004daa:	e009      	b.n	1a004dc0 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a004dac:	429a      	cmp	r2, r3
1a004dae:	d201      	bcs.n	1a004db4 <prvInsertTimerInActiveList+0x2c>
1a004db0:	4299      	cmp	r1, r3
1a004db2:	d206      	bcs.n	1a004dc2 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a004db4:	1d01      	adds	r1, r0, #4
1a004db6:	4b05      	ldr	r3, [pc, #20]	; (1a004dcc <prvInsertTimerInActiveList+0x44>)
1a004db8:	6818      	ldr	r0, [r3, #0]
1a004dba:	f7ff fa78 	bl	1a0042ae <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a004dbe:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a004dc0:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a004dc2:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a004dc4:	e7fc      	b.n	1a004dc0 <prvInsertTimerInActiveList+0x38>
1a004dc6:	bf00      	nop
1a004dc8:	10003350 	.word	0x10003350
1a004dcc:	1000334c 	.word	0x1000334c

1a004dd0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a004dd0:	b530      	push	{r4, r5, lr}
1a004dd2:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a004dd4:	f000 fa4e 	bl	1a005274 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a004dd8:	4b11      	ldr	r3, [pc, #68]	; (1a004e20 <prvCheckForValidListAndQueue+0x50>)
1a004dda:	681b      	ldr	r3, [r3, #0]
1a004ddc:	b11b      	cbz	r3, 1a004de6 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a004dde:	f000 fa6b 	bl	1a0052b8 <vPortExitCritical>
}
1a004de2:	b003      	add	sp, #12
1a004de4:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a004de6:	4d0f      	ldr	r5, [pc, #60]	; (1a004e24 <prvCheckForValidListAndQueue+0x54>)
1a004de8:	4628      	mov	r0, r5
1a004dea:	f7ff fa46 	bl	1a00427a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a004dee:	4c0e      	ldr	r4, [pc, #56]	; (1a004e28 <prvCheckForValidListAndQueue+0x58>)
1a004df0:	4620      	mov	r0, r4
1a004df2:	f7ff fa42 	bl	1a00427a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a004df6:	4b0d      	ldr	r3, [pc, #52]	; (1a004e2c <prvCheckForValidListAndQueue+0x5c>)
1a004df8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a004dfa:	4b0d      	ldr	r3, [pc, #52]	; (1a004e30 <prvCheckForValidListAndQueue+0x60>)
1a004dfc:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a004dfe:	2300      	movs	r3, #0
1a004e00:	9300      	str	r3, [sp, #0]
1a004e02:	4b0c      	ldr	r3, [pc, #48]	; (1a004e34 <prvCheckForValidListAndQueue+0x64>)
1a004e04:	4a0c      	ldr	r2, [pc, #48]	; (1a004e38 <prvCheckForValidListAndQueue+0x68>)
1a004e06:	2110      	movs	r1, #16
1a004e08:	200a      	movs	r0, #10
1a004e0a:	f7fe ffa6 	bl	1a003d5a <xQueueGenericCreateStatic>
1a004e0e:	4b04      	ldr	r3, [pc, #16]	; (1a004e20 <prvCheckForValidListAndQueue+0x50>)
1a004e10:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a004e12:	2800      	cmp	r0, #0
1a004e14:	d0e3      	beq.n	1a004dde <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a004e16:	4909      	ldr	r1, [pc, #36]	; (1a004e3c <prvCheckForValidListAndQueue+0x6c>)
1a004e18:	f7ff f9f2 	bl	1a004200 <vQueueAddToRegistry>
1a004e1c:	e7df      	b.n	1a004dde <prvCheckForValidListAndQueue+0xe>
1a004e1e:	bf00      	nop
1a004e20:	10003470 	.word	0x10003470
1a004e24:	100033f4 	.word	0x100033f4
1a004e28:	10003408 	.word	0x10003408
1a004e2c:	1000334c 	.word	0x1000334c
1a004e30:	10003350 	.word	0x10003350
1a004e34:	10003420 	.word	0x10003420
1a004e38:	10003354 	.word	0x10003354
1a004e3c:	1a00841c 	.word	0x1a00841c

1a004e40 <xTimerCreateTimerTask>:
{
1a004e40:	b510      	push	{r4, lr}
1a004e42:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a004e44:	f7ff ffc4 	bl	1a004dd0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a004e48:	4b12      	ldr	r3, [pc, #72]	; (1a004e94 <xTimerCreateTimerTask+0x54>)
1a004e4a:	681b      	ldr	r3, [r3, #0]
1a004e4c:	b1cb      	cbz	r3, 1a004e82 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a004e4e:	2400      	movs	r4, #0
1a004e50:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a004e52:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a004e54:	aa07      	add	r2, sp, #28
1a004e56:	a906      	add	r1, sp, #24
1a004e58:	a805      	add	r0, sp, #20
1a004e5a:	f7ff fa63 	bl	1a004324 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a004e5e:	9b05      	ldr	r3, [sp, #20]
1a004e60:	9302      	str	r3, [sp, #8]
1a004e62:	9b06      	ldr	r3, [sp, #24]
1a004e64:	9301      	str	r3, [sp, #4]
1a004e66:	2304      	movs	r3, #4
1a004e68:	9300      	str	r3, [sp, #0]
1a004e6a:	4623      	mov	r3, r4
1a004e6c:	9a07      	ldr	r2, [sp, #28]
1a004e6e:	490a      	ldr	r1, [pc, #40]	; (1a004e98 <xTimerCreateTimerTask+0x58>)
1a004e70:	480a      	ldr	r0, [pc, #40]	; (1a004e9c <xTimerCreateTimerTask+0x5c>)
1a004e72:	f7ff fbf1 	bl	1a004658 <xTaskCreateStatic>
1a004e76:	4b0a      	ldr	r3, [pc, #40]	; (1a004ea0 <xTimerCreateTimerTask+0x60>)
1a004e78:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a004e7a:	b110      	cbz	r0, 1a004e82 <xTimerCreateTimerTask+0x42>
}
1a004e7c:	2001      	movs	r0, #1
1a004e7e:	b008      	add	sp, #32
1a004e80:	bd10      	pop	{r4, pc}
1a004e82:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004e86:	f383 8811 	msr	BASEPRI, r3
1a004e8a:	f3bf 8f6f 	isb	sy
1a004e8e:	f3bf 8f4f 	dsb	sy
1a004e92:	e7fe      	b.n	1a004e92 <xTimerCreateTimerTask+0x52>
1a004e94:	10003470 	.word	0x10003470
1a004e98:	1a008424 	.word	0x1a008424
1a004e9c:	1a005185 	.word	0x1a005185
1a004ea0:	10003474 	.word	0x10003474

1a004ea4 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a004ea4:	b1c8      	cbz	r0, 1a004eda <xTimerGenericCommand+0x36>
{
1a004ea6:	b530      	push	{r4, r5, lr}
1a004ea8:	b085      	sub	sp, #20
1a004eaa:	4615      	mov	r5, r2
1a004eac:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a004eae:	4a17      	ldr	r2, [pc, #92]	; (1a004f0c <xTimerGenericCommand+0x68>)
1a004eb0:	6810      	ldr	r0, [r2, #0]
1a004eb2:	b340      	cbz	r0, 1a004f06 <xTimerGenericCommand+0x62>
1a004eb4:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a004eb6:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a004eb8:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a004eba:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a004ebc:	2905      	cmp	r1, #5
1a004ebe:	dc1d      	bgt.n	1a004efc <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a004ec0:	f7ff feea 	bl	1a004c98 <xTaskGetSchedulerState>
1a004ec4:	2802      	cmp	r0, #2
1a004ec6:	d011      	beq.n	1a004eec <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a004ec8:	2300      	movs	r3, #0
1a004eca:	461a      	mov	r2, r3
1a004ecc:	4669      	mov	r1, sp
1a004ece:	480f      	ldr	r0, [pc, #60]	; (1a004f0c <xTimerGenericCommand+0x68>)
1a004ed0:	6800      	ldr	r0, [r0, #0]
1a004ed2:	f7fe ffb1 	bl	1a003e38 <xQueueGenericSend>
}
1a004ed6:	b005      	add	sp, #20
1a004ed8:	bd30      	pop	{r4, r5, pc}
1a004eda:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004ede:	f383 8811 	msr	BASEPRI, r3
1a004ee2:	f3bf 8f6f 	isb	sy
1a004ee6:	f3bf 8f4f 	dsb	sy
1a004eea:	e7fe      	b.n	1a004eea <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a004eec:	2300      	movs	r3, #0
1a004eee:	9a08      	ldr	r2, [sp, #32]
1a004ef0:	4669      	mov	r1, sp
1a004ef2:	4806      	ldr	r0, [pc, #24]	; (1a004f0c <xTimerGenericCommand+0x68>)
1a004ef4:	6800      	ldr	r0, [r0, #0]
1a004ef6:	f7fe ff9f 	bl	1a003e38 <xQueueGenericSend>
1a004efa:	e7ec      	b.n	1a004ed6 <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a004efc:	2300      	movs	r3, #0
1a004efe:	4669      	mov	r1, sp
1a004f00:	f7ff f858 	bl	1a003fb4 <xQueueGenericSendFromISR>
1a004f04:	e7e7      	b.n	1a004ed6 <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a004f06:	2000      	movs	r0, #0
	return xReturn;
1a004f08:	e7e5      	b.n	1a004ed6 <xTimerGenericCommand+0x32>
1a004f0a:	bf00      	nop
1a004f0c:	10003470 	.word	0x10003470

1a004f10 <prvSwitchTimerLists>:
{
1a004f10:	b570      	push	{r4, r5, r6, lr}
1a004f12:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a004f14:	4b1a      	ldr	r3, [pc, #104]	; (1a004f80 <prvSwitchTimerLists+0x70>)
1a004f16:	681b      	ldr	r3, [r3, #0]
1a004f18:	681a      	ldr	r2, [r3, #0]
1a004f1a:	b352      	cbz	r2, 1a004f72 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a004f1c:	68db      	ldr	r3, [r3, #12]
1a004f1e:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a004f20:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a004f22:	1d25      	adds	r5, r4, #4
1a004f24:	4628      	mov	r0, r5
1a004f26:	f7ff f9dc 	bl	1a0042e2 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a004f2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a004f2c:	4620      	mov	r0, r4
1a004f2e:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a004f30:	69e3      	ldr	r3, [r4, #28]
1a004f32:	2b01      	cmp	r3, #1
1a004f34:	d1ee      	bne.n	1a004f14 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a004f36:	69a3      	ldr	r3, [r4, #24]
1a004f38:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a004f3a:	429e      	cmp	r6, r3
1a004f3c:	d207      	bcs.n	1a004f4e <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a004f3e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a004f40:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a004f42:	4629      	mov	r1, r5
1a004f44:	4b0e      	ldr	r3, [pc, #56]	; (1a004f80 <prvSwitchTimerLists+0x70>)
1a004f46:	6818      	ldr	r0, [r3, #0]
1a004f48:	f7ff f9b1 	bl	1a0042ae <vListInsert>
1a004f4c:	e7e2      	b.n	1a004f14 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a004f4e:	2100      	movs	r1, #0
1a004f50:	9100      	str	r1, [sp, #0]
1a004f52:	460b      	mov	r3, r1
1a004f54:	4632      	mov	r2, r6
1a004f56:	4620      	mov	r0, r4
1a004f58:	f7ff ffa4 	bl	1a004ea4 <xTimerGenericCommand>
				configASSERT( xResult );
1a004f5c:	2800      	cmp	r0, #0
1a004f5e:	d1d9      	bne.n	1a004f14 <prvSwitchTimerLists+0x4>
1a004f60:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004f64:	f383 8811 	msr	BASEPRI, r3
1a004f68:	f3bf 8f6f 	isb	sy
1a004f6c:	f3bf 8f4f 	dsb	sy
1a004f70:	e7fe      	b.n	1a004f70 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a004f72:	4a04      	ldr	r2, [pc, #16]	; (1a004f84 <prvSwitchTimerLists+0x74>)
1a004f74:	6810      	ldr	r0, [r2, #0]
1a004f76:	4902      	ldr	r1, [pc, #8]	; (1a004f80 <prvSwitchTimerLists+0x70>)
1a004f78:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a004f7a:	6013      	str	r3, [r2, #0]
}
1a004f7c:	b002      	add	sp, #8
1a004f7e:	bd70      	pop	{r4, r5, r6, pc}
1a004f80:	1000334c 	.word	0x1000334c
1a004f84:	10003350 	.word	0x10003350

1a004f88 <prvSampleTimeNow>:
{
1a004f88:	b538      	push	{r3, r4, r5, lr}
1a004f8a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a004f8c:	f7ff fc22 	bl	1a0047d4 <xTaskGetTickCount>
1a004f90:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a004f92:	4b07      	ldr	r3, [pc, #28]	; (1a004fb0 <prvSampleTimeNow+0x28>)
1a004f94:	681b      	ldr	r3, [r3, #0]
1a004f96:	4283      	cmp	r3, r0
1a004f98:	d805      	bhi.n	1a004fa6 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a004f9a:	2300      	movs	r3, #0
1a004f9c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a004f9e:	4b04      	ldr	r3, [pc, #16]	; (1a004fb0 <prvSampleTimeNow+0x28>)
1a004fa0:	601c      	str	r4, [r3, #0]
}
1a004fa2:	4620      	mov	r0, r4
1a004fa4:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a004fa6:	f7ff ffb3 	bl	1a004f10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a004faa:	2301      	movs	r3, #1
1a004fac:	602b      	str	r3, [r5, #0]
1a004fae:	e7f6      	b.n	1a004f9e <prvSampleTimeNow+0x16>
1a004fb0:	1000341c 	.word	0x1000341c

1a004fb4 <prvProcessExpiredTimer>:
{
1a004fb4:	b570      	push	{r4, r5, r6, lr}
1a004fb6:	b082      	sub	sp, #8
1a004fb8:	4605      	mov	r5, r0
1a004fba:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a004fbc:	4b14      	ldr	r3, [pc, #80]	; (1a005010 <prvProcessExpiredTimer+0x5c>)
1a004fbe:	681b      	ldr	r3, [r3, #0]
1a004fc0:	68db      	ldr	r3, [r3, #12]
1a004fc2:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a004fc4:	1d20      	adds	r0, r4, #4
1a004fc6:	f7ff f98c 	bl	1a0042e2 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a004fca:	69e3      	ldr	r3, [r4, #28]
1a004fcc:	2b01      	cmp	r3, #1
1a004fce:	d004      	beq.n	1a004fda <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a004fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a004fd2:	4620      	mov	r0, r4
1a004fd4:	4798      	blx	r3
}
1a004fd6:	b002      	add	sp, #8
1a004fd8:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a004fda:	69a1      	ldr	r1, [r4, #24]
1a004fdc:	462b      	mov	r3, r5
1a004fde:	4632      	mov	r2, r6
1a004fe0:	4429      	add	r1, r5
1a004fe2:	4620      	mov	r0, r4
1a004fe4:	f7ff fed0 	bl	1a004d88 <prvInsertTimerInActiveList>
1a004fe8:	2800      	cmp	r0, #0
1a004fea:	d0f1      	beq.n	1a004fd0 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a004fec:	2100      	movs	r1, #0
1a004fee:	9100      	str	r1, [sp, #0]
1a004ff0:	460b      	mov	r3, r1
1a004ff2:	462a      	mov	r2, r5
1a004ff4:	4620      	mov	r0, r4
1a004ff6:	f7ff ff55 	bl	1a004ea4 <xTimerGenericCommand>
			configASSERT( xResult );
1a004ffa:	2800      	cmp	r0, #0
1a004ffc:	d1e8      	bne.n	1a004fd0 <prvProcessExpiredTimer+0x1c>
1a004ffe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a005002:	f383 8811 	msr	BASEPRI, r3
1a005006:	f3bf 8f6f 	isb	sy
1a00500a:	f3bf 8f4f 	dsb	sy
1a00500e:	e7fe      	b.n	1a00500e <prvProcessExpiredTimer+0x5a>
1a005010:	1000334c 	.word	0x1000334c

1a005014 <prvProcessTimerOrBlockTask>:
{
1a005014:	b570      	push	{r4, r5, r6, lr}
1a005016:	b082      	sub	sp, #8
1a005018:	4606      	mov	r6, r0
1a00501a:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a00501c:	f7ff fbd2 	bl	1a0047c4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a005020:	a801      	add	r0, sp, #4
1a005022:	f7ff ffb1 	bl	1a004f88 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a005026:	9b01      	ldr	r3, [sp, #4]
1a005028:	bb1b      	cbnz	r3, 1a005072 <prvProcessTimerOrBlockTask+0x5e>
1a00502a:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a00502c:	b90c      	cbnz	r4, 1a005032 <prvProcessTimerOrBlockTask+0x1e>
1a00502e:	42b0      	cmp	r0, r6
1a005030:	d218      	bcs.n	1a005064 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a005032:	b12c      	cbz	r4, 1a005040 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a005034:	4b11      	ldr	r3, [pc, #68]	; (1a00507c <prvProcessTimerOrBlockTask+0x68>)
1a005036:	681b      	ldr	r3, [r3, #0]
1a005038:	681c      	ldr	r4, [r3, #0]
1a00503a:	fab4 f484 	clz	r4, r4
1a00503e:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a005040:	4622      	mov	r2, r4
1a005042:	1b71      	subs	r1, r6, r5
1a005044:	4b0e      	ldr	r3, [pc, #56]	; (1a005080 <prvProcessTimerOrBlockTask+0x6c>)
1a005046:	6818      	ldr	r0, [r3, #0]
1a005048:	f7ff f8ee 	bl	1a004228 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a00504c:	f7ff fc54 	bl	1a0048f8 <xTaskResumeAll>
1a005050:	b988      	cbnz	r0, 1a005076 <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a005052:	4b0c      	ldr	r3, [pc, #48]	; (1a005084 <prvProcessTimerOrBlockTask+0x70>)
1a005054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a005058:	601a      	str	r2, [r3, #0]
1a00505a:	f3bf 8f4f 	dsb	sy
1a00505e:	f3bf 8f6f 	isb	sy
1a005062:	e008      	b.n	1a005076 <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a005064:	f7ff fc48 	bl	1a0048f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a005068:	4629      	mov	r1, r5
1a00506a:	4630      	mov	r0, r6
1a00506c:	f7ff ffa2 	bl	1a004fb4 <prvProcessExpiredTimer>
1a005070:	e001      	b.n	1a005076 <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a005072:	f7ff fc41 	bl	1a0048f8 <xTaskResumeAll>
}
1a005076:	b002      	add	sp, #8
1a005078:	bd70      	pop	{r4, r5, r6, pc}
1a00507a:	bf00      	nop
1a00507c:	10003350 	.word	0x10003350
1a005080:	10003470 	.word	0x10003470
1a005084:	e000ed04 	.word	0xe000ed04

1a005088 <prvProcessReceivedCommands>:
{
1a005088:	b530      	push	{r4, r5, lr}
1a00508a:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a00508c:	e002      	b.n	1a005094 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a00508e:	9b04      	ldr	r3, [sp, #16]
1a005090:	2b00      	cmp	r3, #0
1a005092:	da0f      	bge.n	1a0050b4 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a005094:	2200      	movs	r2, #0
1a005096:	a904      	add	r1, sp, #16
1a005098:	4b39      	ldr	r3, [pc, #228]	; (1a005180 <prvProcessReceivedCommands+0xf8>)
1a00509a:	6818      	ldr	r0, [r3, #0]
1a00509c:	f7fe fff0 	bl	1a004080 <xQueueReceive>
1a0050a0:	2800      	cmp	r0, #0
1a0050a2:	d06a      	beq.n	1a00517a <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a0050a4:	9b04      	ldr	r3, [sp, #16]
1a0050a6:	2b00      	cmp	r3, #0
1a0050a8:	daf1      	bge.n	1a00508e <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a0050aa:	9907      	ldr	r1, [sp, #28]
1a0050ac:	9806      	ldr	r0, [sp, #24]
1a0050ae:	9b05      	ldr	r3, [sp, #20]
1a0050b0:	4798      	blx	r3
1a0050b2:	e7ec      	b.n	1a00508e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a0050b4:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a0050b6:	6963      	ldr	r3, [r4, #20]
1a0050b8:	b113      	cbz	r3, 1a0050c0 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0050ba:	1d20      	adds	r0, r4, #4
1a0050bc:	f7ff f911 	bl	1a0042e2 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a0050c0:	a803      	add	r0, sp, #12
1a0050c2:	f7ff ff61 	bl	1a004f88 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a0050c6:	9b04      	ldr	r3, [sp, #16]
1a0050c8:	2b09      	cmp	r3, #9
1a0050ca:	d8e3      	bhi.n	1a005094 <prvProcessReceivedCommands+0xc>
1a0050cc:	a201      	add	r2, pc, #4	; (adr r2, 1a0050d4 <prvProcessReceivedCommands+0x4c>)
1a0050ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0050d2:	bf00      	nop
1a0050d4:	1a0050fd 	.word	0x1a0050fd
1a0050d8:	1a0050fd 	.word	0x1a0050fd
1a0050dc:	1a0050fd 	.word	0x1a0050fd
1a0050e0:	1a005095 	.word	0x1a005095
1a0050e4:	1a005145 	.word	0x1a005145
1a0050e8:	1a00516b 	.word	0x1a00516b
1a0050ec:	1a0050fd 	.word	0x1a0050fd
1a0050f0:	1a0050fd 	.word	0x1a0050fd
1a0050f4:	1a005095 	.word	0x1a005095
1a0050f8:	1a005145 	.word	0x1a005145
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a0050fc:	9905      	ldr	r1, [sp, #20]
1a0050fe:	69a5      	ldr	r5, [r4, #24]
1a005100:	460b      	mov	r3, r1
1a005102:	4602      	mov	r2, r0
1a005104:	4429      	add	r1, r5
1a005106:	4620      	mov	r0, r4
1a005108:	f7ff fe3e 	bl	1a004d88 <prvInsertTimerInActiveList>
1a00510c:	2800      	cmp	r0, #0
1a00510e:	d0c1      	beq.n	1a005094 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a005110:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a005112:	4620      	mov	r0, r4
1a005114:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a005116:	69e3      	ldr	r3, [r4, #28]
1a005118:	2b01      	cmp	r3, #1
1a00511a:	d1bb      	bne.n	1a005094 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a00511c:	69a2      	ldr	r2, [r4, #24]
1a00511e:	2100      	movs	r1, #0
1a005120:	9100      	str	r1, [sp, #0]
1a005122:	460b      	mov	r3, r1
1a005124:	9805      	ldr	r0, [sp, #20]
1a005126:	4402      	add	r2, r0
1a005128:	4620      	mov	r0, r4
1a00512a:	f7ff febb 	bl	1a004ea4 <xTimerGenericCommand>
							configASSERT( xResult );
1a00512e:	2800      	cmp	r0, #0
1a005130:	d1b0      	bne.n	1a005094 <prvProcessReceivedCommands+0xc>
1a005132:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a005136:	f383 8811 	msr	BASEPRI, r3
1a00513a:	f3bf 8f6f 	isb	sy
1a00513e:	f3bf 8f4f 	dsb	sy
1a005142:	e7fe      	b.n	1a005142 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a005144:	9905      	ldr	r1, [sp, #20]
1a005146:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a005148:	b131      	cbz	r1, 1a005158 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a00514a:	4603      	mov	r3, r0
1a00514c:	4602      	mov	r2, r0
1a00514e:	4401      	add	r1, r0
1a005150:	4620      	mov	r0, r4
1a005152:	f7ff fe19 	bl	1a004d88 <prvInsertTimerInActiveList>
					break;
1a005156:	e79d      	b.n	1a005094 <prvProcessReceivedCommands+0xc>
1a005158:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00515c:	f383 8811 	msr	BASEPRI, r3
1a005160:	f3bf 8f6f 	isb	sy
1a005164:	f3bf 8f4f 	dsb	sy
1a005168:	e7fe      	b.n	1a005168 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a00516a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a00516e:	2b00      	cmp	r3, #0
1a005170:	d190      	bne.n	1a005094 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a005172:	4620      	mov	r0, r4
1a005174:	f7fe fcf2 	bl	1a003b5c <vPortFree>
1a005178:	e78c      	b.n	1a005094 <prvProcessReceivedCommands+0xc>
}
1a00517a:	b009      	add	sp, #36	; 0x24
1a00517c:	bd30      	pop	{r4, r5, pc}
1a00517e:	bf00      	nop
1a005180:	10003470 	.word	0x10003470

1a005184 <prvTimerTask>:
{
1a005184:	b500      	push	{lr}
1a005186:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a005188:	a801      	add	r0, sp, #4
1a00518a:	f7ff fded 	bl	1a004d68 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a00518e:	9901      	ldr	r1, [sp, #4]
1a005190:	f7ff ff40 	bl	1a005014 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a005194:	f7ff ff78 	bl	1a005088 <prvProcessReceivedCommands>
1a005198:	e7f6      	b.n	1a005188 <prvTimerTask+0x4>
1a00519a:	Address 0x000000001a00519a is out of bounds.


1a00519c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a00519c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a00519e:	2300      	movs	r3, #0
1a0051a0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a0051a2:	4b0d      	ldr	r3, [pc, #52]	; (1a0051d8 <prvTaskExitError+0x3c>)
1a0051a4:	681b      	ldr	r3, [r3, #0]
1a0051a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0051aa:	d008      	beq.n	1a0051be <prvTaskExitError+0x22>
1a0051ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0051b0:	f383 8811 	msr	BASEPRI, r3
1a0051b4:	f3bf 8f6f 	isb	sy
1a0051b8:	f3bf 8f4f 	dsb	sy
1a0051bc:	e7fe      	b.n	1a0051bc <prvTaskExitError+0x20>
1a0051be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0051c2:	f383 8811 	msr	BASEPRI, r3
1a0051c6:	f3bf 8f6f 	isb	sy
1a0051ca:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a0051ce:	9b01      	ldr	r3, [sp, #4]
1a0051d0:	2b00      	cmp	r3, #0
1a0051d2:	d0fc      	beq.n	1a0051ce <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a0051d4:	b002      	add	sp, #8
1a0051d6:	4770      	bx	lr
1a0051d8:	10000008 	.word	0x10000008

1a0051dc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a0051dc:	4808      	ldr	r0, [pc, #32]	; (1a005200 <prvPortStartFirstTask+0x24>)
1a0051de:	6800      	ldr	r0, [r0, #0]
1a0051e0:	6800      	ldr	r0, [r0, #0]
1a0051e2:	f380 8808 	msr	MSP, r0
1a0051e6:	f04f 0000 	mov.w	r0, #0
1a0051ea:	f380 8814 	msr	CONTROL, r0
1a0051ee:	b662      	cpsie	i
1a0051f0:	b661      	cpsie	f
1a0051f2:	f3bf 8f4f 	dsb	sy
1a0051f6:	f3bf 8f6f 	isb	sy
1a0051fa:	df00      	svc	0
1a0051fc:	bf00      	nop
1a0051fe:	0000      	.short	0x0000
1a005200:	e000ed08 	.word	0xe000ed08

1a005204 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a005204:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a005214 <vPortEnableVFP+0x10>
1a005208:	6801      	ldr	r1, [r0, #0]
1a00520a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a00520e:	6001      	str	r1, [r0, #0]
1a005210:	4770      	bx	lr
1a005212:	0000      	.short	0x0000
1a005214:	e000ed88 	.word	0xe000ed88

1a005218 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a005218:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a00521c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a005220:	f021 0101 	bic.w	r1, r1, #1
1a005224:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a005228:	4b05      	ldr	r3, [pc, #20]	; (1a005240 <pxPortInitialiseStack+0x28>)
1a00522a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a00522e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a005232:	f06f 0302 	mvn.w	r3, #2
1a005236:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a00523a:	3844      	subs	r0, #68	; 0x44
1a00523c:	4770      	bx	lr
1a00523e:	bf00      	nop
1a005240:	1a00519d 	.word	0x1a00519d
1a005244:	ffffffff 	.word	0xffffffff
1a005248:	ffffffff 	.word	0xffffffff
1a00524c:	ffffffff 	.word	0xffffffff

1a005250 <SVC_Handler>:
	__asm volatile (
1a005250:	4b07      	ldr	r3, [pc, #28]	; (1a005270 <pxCurrentTCBConst2>)
1a005252:	6819      	ldr	r1, [r3, #0]
1a005254:	6808      	ldr	r0, [r1, #0]
1a005256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00525a:	f380 8809 	msr	PSP, r0
1a00525e:	f3bf 8f6f 	isb	sy
1a005262:	f04f 0000 	mov.w	r0, #0
1a005266:	f380 8811 	msr	BASEPRI, r0
1a00526a:	4770      	bx	lr
1a00526c:	f3af 8000 	nop.w

1a005270 <pxCurrentTCBConst2>:
1a005270:	10003224 	.word	0x10003224

1a005274 <vPortEnterCritical>:
1a005274:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a005278:	f383 8811 	msr	BASEPRI, r3
1a00527c:	f3bf 8f6f 	isb	sy
1a005280:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a005284:	4a0a      	ldr	r2, [pc, #40]	; (1a0052b0 <vPortEnterCritical+0x3c>)
1a005286:	6813      	ldr	r3, [r2, #0]
1a005288:	3301      	adds	r3, #1
1a00528a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a00528c:	2b01      	cmp	r3, #1
1a00528e:	d000      	beq.n	1a005292 <vPortEnterCritical+0x1e>
}
1a005290:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a005292:	4b08      	ldr	r3, [pc, #32]	; (1a0052b4 <vPortEnterCritical+0x40>)
1a005294:	681b      	ldr	r3, [r3, #0]
1a005296:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00529a:	d0f9      	beq.n	1a005290 <vPortEnterCritical+0x1c>
1a00529c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0052a0:	f383 8811 	msr	BASEPRI, r3
1a0052a4:	f3bf 8f6f 	isb	sy
1a0052a8:	f3bf 8f4f 	dsb	sy
1a0052ac:	e7fe      	b.n	1a0052ac <vPortEnterCritical+0x38>
1a0052ae:	bf00      	nop
1a0052b0:	10000008 	.word	0x10000008
1a0052b4:	e000ed04 	.word	0xe000ed04

1a0052b8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a0052b8:	4b09      	ldr	r3, [pc, #36]	; (1a0052e0 <vPortExitCritical+0x28>)
1a0052ba:	681b      	ldr	r3, [r3, #0]
1a0052bc:	b943      	cbnz	r3, 1a0052d0 <vPortExitCritical+0x18>
1a0052be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0052c2:	f383 8811 	msr	BASEPRI, r3
1a0052c6:	f3bf 8f6f 	isb	sy
1a0052ca:	f3bf 8f4f 	dsb	sy
1a0052ce:	e7fe      	b.n	1a0052ce <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a0052d0:	3b01      	subs	r3, #1
1a0052d2:	4a03      	ldr	r2, [pc, #12]	; (1a0052e0 <vPortExitCritical+0x28>)
1a0052d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a0052d6:	b90b      	cbnz	r3, 1a0052dc <vPortExitCritical+0x24>
	__asm volatile
1a0052d8:	f383 8811 	msr	BASEPRI, r3
}
1a0052dc:	4770      	bx	lr
1a0052de:	bf00      	nop
1a0052e0:	10000008 	.word	0x10000008
1a0052e4:	ffffffff 	.word	0xffffffff
1a0052e8:	ffffffff 	.word	0xffffffff
1a0052ec:	ffffffff 	.word	0xffffffff

1a0052f0 <PendSV_Handler>:
	__asm volatile
1a0052f0:	f3ef 8009 	mrs	r0, PSP
1a0052f4:	f3bf 8f6f 	isb	sy
1a0052f8:	4b15      	ldr	r3, [pc, #84]	; (1a005350 <pxCurrentTCBConst>)
1a0052fa:	681a      	ldr	r2, [r3, #0]
1a0052fc:	f01e 0f10 	tst.w	lr, #16
1a005300:	bf08      	it	eq
1a005302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a005306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00530a:	6010      	str	r0, [r2, #0]
1a00530c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a005310:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a005314:	f380 8811 	msr	BASEPRI, r0
1a005318:	f3bf 8f4f 	dsb	sy
1a00531c:	f3bf 8f6f 	isb	sy
1a005320:	f7ff fb8a 	bl	1a004a38 <vTaskSwitchContext>
1a005324:	f04f 0000 	mov.w	r0, #0
1a005328:	f380 8811 	msr	BASEPRI, r0
1a00532c:	bc09      	pop	{r0, r3}
1a00532e:	6819      	ldr	r1, [r3, #0]
1a005330:	6808      	ldr	r0, [r1, #0]
1a005332:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a005336:	f01e 0f10 	tst.w	lr, #16
1a00533a:	bf08      	it	eq
1a00533c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a005340:	f380 8809 	msr	PSP, r0
1a005344:	f3bf 8f6f 	isb	sy
1a005348:	4770      	bx	lr
1a00534a:	bf00      	nop
1a00534c:	f3af 8000 	nop.w

1a005350 <pxCurrentTCBConst>:
1a005350:	10003224 	.word	0x10003224

1a005354 <SysTick_Handler>:
{
1a005354:	b508      	push	{r3, lr}
	__asm volatile
1a005356:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00535a:	f383 8811 	msr	BASEPRI, r3
1a00535e:	f3bf 8f6f 	isb	sy
1a005362:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a005366:	f7ff fa3b 	bl	1a0047e0 <xTaskIncrementTick>
1a00536a:	b118      	cbz	r0, 1a005374 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a00536c:	4b03      	ldr	r3, [pc, #12]	; (1a00537c <SysTick_Handler+0x28>)
1a00536e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a005372:	601a      	str	r2, [r3, #0]
	__asm volatile
1a005374:	2300      	movs	r3, #0
1a005376:	f383 8811 	msr	BASEPRI, r3
}
1a00537a:	bd08      	pop	{r3, pc}
1a00537c:	e000ed04 	.word	0xe000ed04

1a005380 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a005380:	4a08      	ldr	r2, [pc, #32]	; (1a0053a4 <vPortSetupTimerInterrupt+0x24>)
1a005382:	2300      	movs	r3, #0
1a005384:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a005386:	4908      	ldr	r1, [pc, #32]	; (1a0053a8 <vPortSetupTimerInterrupt+0x28>)
1a005388:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a00538a:	4b08      	ldr	r3, [pc, #32]	; (1a0053ac <vPortSetupTimerInterrupt+0x2c>)
1a00538c:	681b      	ldr	r3, [r3, #0]
1a00538e:	4908      	ldr	r1, [pc, #32]	; (1a0053b0 <vPortSetupTimerInterrupt+0x30>)
1a005390:	fba1 1303 	umull	r1, r3, r1, r3
1a005394:	099b      	lsrs	r3, r3, #6
1a005396:	3b01      	subs	r3, #1
1a005398:	4906      	ldr	r1, [pc, #24]	; (1a0053b4 <vPortSetupTimerInterrupt+0x34>)
1a00539a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a00539c:	2307      	movs	r3, #7
1a00539e:	6013      	str	r3, [r2, #0]
}
1a0053a0:	4770      	bx	lr
1a0053a2:	bf00      	nop
1a0053a4:	e000e010 	.word	0xe000e010
1a0053a8:	e000e018 	.word	0xe000e018
1a0053ac:	10003584 	.word	0x10003584
1a0053b0:	10624dd3 	.word	0x10624dd3
1a0053b4:	e000e014 	.word	0xe000e014

1a0053b8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a0053b8:	4b3a      	ldr	r3, [pc, #232]	; (1a0054a4 <xPortStartScheduler+0xec>)
1a0053ba:	681a      	ldr	r2, [r3, #0]
1a0053bc:	4b3a      	ldr	r3, [pc, #232]	; (1a0054a8 <xPortStartScheduler+0xf0>)
1a0053be:	429a      	cmp	r2, r3
1a0053c0:	d00d      	beq.n	1a0053de <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a0053c2:	4b38      	ldr	r3, [pc, #224]	; (1a0054a4 <xPortStartScheduler+0xec>)
1a0053c4:	681a      	ldr	r2, [r3, #0]
1a0053c6:	4b39      	ldr	r3, [pc, #228]	; (1a0054ac <xPortStartScheduler+0xf4>)
1a0053c8:	429a      	cmp	r2, r3
1a0053ca:	d111      	bne.n	1a0053f0 <xPortStartScheduler+0x38>
	__asm volatile
1a0053cc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0053d0:	f383 8811 	msr	BASEPRI, r3
1a0053d4:	f3bf 8f6f 	isb	sy
1a0053d8:	f3bf 8f4f 	dsb	sy
1a0053dc:	e7fe      	b.n	1a0053dc <xPortStartScheduler+0x24>
1a0053de:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0053e2:	f383 8811 	msr	BASEPRI, r3
1a0053e6:	f3bf 8f6f 	isb	sy
1a0053ea:	f3bf 8f4f 	dsb	sy
1a0053ee:	e7fe      	b.n	1a0053ee <xPortStartScheduler+0x36>
{
1a0053f0:	b510      	push	{r4, lr}
1a0053f2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a0053f4:	4b2e      	ldr	r3, [pc, #184]	; (1a0054b0 <xPortStartScheduler+0xf8>)
1a0053f6:	781a      	ldrb	r2, [r3, #0]
1a0053f8:	b2d2      	uxtb	r2, r2
1a0053fa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a0053fc:	22ff      	movs	r2, #255	; 0xff
1a0053fe:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a005400:	781b      	ldrb	r3, [r3, #0]
1a005402:	b2db      	uxtb	r3, r3
1a005404:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a005408:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00540c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a005410:	4a28      	ldr	r2, [pc, #160]	; (1a0054b4 <xPortStartScheduler+0xfc>)
1a005412:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a005414:	4b28      	ldr	r3, [pc, #160]	; (1a0054b8 <xPortStartScheduler+0x100>)
1a005416:	2207      	movs	r2, #7
1a005418:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a00541a:	e009      	b.n	1a005430 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a00541c:	4a26      	ldr	r2, [pc, #152]	; (1a0054b8 <xPortStartScheduler+0x100>)
1a00541e:	6813      	ldr	r3, [r2, #0]
1a005420:	3b01      	subs	r3, #1
1a005422:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a005424:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a005428:	005b      	lsls	r3, r3, #1
1a00542a:	b2db      	uxtb	r3, r3
1a00542c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a005430:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a005434:	f013 0f80 	tst.w	r3, #128	; 0x80
1a005438:	d1f0      	bne.n	1a00541c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a00543a:	4b1f      	ldr	r3, [pc, #124]	; (1a0054b8 <xPortStartScheduler+0x100>)
1a00543c:	681b      	ldr	r3, [r3, #0]
1a00543e:	2b04      	cmp	r3, #4
1a005440:	d008      	beq.n	1a005454 <xPortStartScheduler+0x9c>
1a005442:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a005446:	f383 8811 	msr	BASEPRI, r3
1a00544a:	f3bf 8f6f 	isb	sy
1a00544e:	f3bf 8f4f 	dsb	sy
1a005452:	e7fe      	b.n	1a005452 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a005454:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a005456:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a00545a:	4a17      	ldr	r2, [pc, #92]	; (1a0054b8 <xPortStartScheduler+0x100>)
1a00545c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a00545e:	9b01      	ldr	r3, [sp, #4]
1a005460:	b2db      	uxtb	r3, r3
1a005462:	4a13      	ldr	r2, [pc, #76]	; (1a0054b0 <xPortStartScheduler+0xf8>)
1a005464:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a005466:	4b15      	ldr	r3, [pc, #84]	; (1a0054bc <xPortStartScheduler+0x104>)
1a005468:	681a      	ldr	r2, [r3, #0]
1a00546a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a00546e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a005470:	681a      	ldr	r2, [r3, #0]
1a005472:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a005476:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a005478:	f7ff ff82 	bl	1a005380 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a00547c:	2400      	movs	r4, #0
1a00547e:	4b10      	ldr	r3, [pc, #64]	; (1a0054c0 <xPortStartScheduler+0x108>)
1a005480:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a005482:	f7ff febf 	bl	1a005204 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a005486:	4a0f      	ldr	r2, [pc, #60]	; (1a0054c4 <xPortStartScheduler+0x10c>)
1a005488:	6813      	ldr	r3, [r2, #0]
1a00548a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a00548e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a005490:	f7ff fea4 	bl	1a0051dc <prvPortStartFirstTask>
	vTaskSwitchContext();
1a005494:	f7ff fad0 	bl	1a004a38 <vTaskSwitchContext>
	prvTaskExitError();
1a005498:	f7ff fe80 	bl	1a00519c <prvTaskExitError>
}
1a00549c:	4620      	mov	r0, r4
1a00549e:	b002      	add	sp, #8
1a0054a0:	bd10      	pop	{r4, pc}
1a0054a2:	bf00      	nop
1a0054a4:	e000ed00 	.word	0xe000ed00
1a0054a8:	410fc271 	.word	0x410fc271
1a0054ac:	410fc270 	.word	0x410fc270
1a0054b0:	e000e400 	.word	0xe000e400
1a0054b4:	10003478 	.word	0x10003478
1a0054b8:	1000347c 	.word	0x1000347c
1a0054bc:	e000ed20 	.word	0xe000ed20
1a0054c0:	10000008 	.word	0x10000008
1a0054c4:	e000ef34 	.word	0xe000ef34

1a0054c8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a0054c8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a0054cc:	2b0f      	cmp	r3, #15
1a0054ce:	d90f      	bls.n	1a0054f0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a0054d0:	4a10      	ldr	r2, [pc, #64]	; (1a005514 <vPortValidateInterruptPriority+0x4c>)
1a0054d2:	5c9b      	ldrb	r3, [r3, r2]
1a0054d4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a0054d6:	4a10      	ldr	r2, [pc, #64]	; (1a005518 <vPortValidateInterruptPriority+0x50>)
1a0054d8:	7812      	ldrb	r2, [r2, #0]
1a0054da:	429a      	cmp	r2, r3
1a0054dc:	d908      	bls.n	1a0054f0 <vPortValidateInterruptPriority+0x28>
1a0054de:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0054e2:	f383 8811 	msr	BASEPRI, r3
1a0054e6:	f3bf 8f6f 	isb	sy
1a0054ea:	f3bf 8f4f 	dsb	sy
1a0054ee:	e7fe      	b.n	1a0054ee <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a0054f0:	4b0a      	ldr	r3, [pc, #40]	; (1a00551c <vPortValidateInterruptPriority+0x54>)
1a0054f2:	681b      	ldr	r3, [r3, #0]
1a0054f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a0054f8:	4a09      	ldr	r2, [pc, #36]	; (1a005520 <vPortValidateInterruptPriority+0x58>)
1a0054fa:	6812      	ldr	r2, [r2, #0]
1a0054fc:	4293      	cmp	r3, r2
1a0054fe:	d908      	bls.n	1a005512 <vPortValidateInterruptPriority+0x4a>
1a005500:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a005504:	f383 8811 	msr	BASEPRI, r3
1a005508:	f3bf 8f6f 	isb	sy
1a00550c:	f3bf 8f4f 	dsb	sy
1a005510:	e7fe      	b.n	1a005510 <vPortValidateInterruptPriority+0x48>
	}
1a005512:	4770      	bx	lr
1a005514:	e000e3f0 	.word	0xe000e3f0
1a005518:	10003478 	.word	0x10003478
1a00551c:	e000ed0c 	.word	0xe000ed0c
1a005520:	1000347c 	.word	0x1000347c

1a005524 <newCardStatus>:
static FSSDC_StatusUpdateCallback_Func  g_statusUpdateCallback = NULL;
static enum FSSDC_CardStatus            g_cardStatus = FSSDC_CardStatus_Removed;


static void newCardStatus (enum FSSDC_CardStatus cardStatus)
{
1a005524:	b508      	push	{r3, lr}
    g_cardStatus = cardStatus;
1a005526:	4b03      	ldr	r3, [pc, #12]	; (1a005534 <newCardStatus+0x10>)
1a005528:	7018      	strb	r0, [r3, #0]
    if (g_statusUpdateCallback)
1a00552a:	4b03      	ldr	r3, [pc, #12]	; (1a005538 <newCardStatus+0x14>)
1a00552c:	681b      	ldr	r3, [r3, #0]
1a00552e:	b103      	cbz	r3, 1a005532 <newCardStatus+0xe>
    {
        g_statusUpdateCallback (g_cardStatus);
1a005530:	4798      	blx	r3
    }
}
1a005532:	bd08      	pop	{r3, pc}
1a005534:	1000000c 	.word	0x1000000c
1a005538:	10003484 	.word	0x10003484

1a00553c <chk_power>:

static
int chk_power(void)		/* Socket power state: 0=off, 1=on */
{
	return 1;
}
1a00553c:	2001      	movs	r0, #1
1a00553e:	4770      	bx	lr

1a005540 <SSPSend>:
{
1a005540:	b500      	push	{lr}
1a005542:	b087      	sub	sp, #28
	xferConfig.tx_data = buf;
1a005544:	9001      	str	r0, [sp, #4]
	xferConfig.tx_cnt  = 0;
1a005546:	2300      	movs	r3, #0
1a005548:	9302      	str	r3, [sp, #8]
	xferConfig.rx_data = NULL;
1a00554a:	9303      	str	r3, [sp, #12]
	xferConfig.rx_cnt  = 0;
1a00554c:	9304      	str	r3, [sp, #16]
	xferConfig.length  = Length;
1a00554e:	9105      	str	r1, [sp, #20]
	Chip_SSP_RWFrames_Blocking(LPC_SSP1, &xferConfig);
1a005550:	a901      	add	r1, sp, #4
1a005552:	4803      	ldr	r0, [pc, #12]	; (1a005560 <SSPSend+0x20>)
1a005554:	f001 fafd 	bl	1a006b52 <Chip_SSP_RWFrames_Blocking>
}
1a005558:	b007      	add	sp, #28
1a00555a:	f85d fb04 	ldr.w	pc, [sp], #4
1a00555e:	bf00      	nop
1a005560:	400c5000 	.word	0x400c5000

1a005564 <xmit_spi>:
{
1a005564:	b500      	push	{lr}
1a005566:	b083      	sub	sp, #12
1a005568:	ab02      	add	r3, sp, #8
1a00556a:	f803 0d01 	strb.w	r0, [r3, #-1]!
    SSPSend((uint8_t*) &dat, 1);
1a00556e:	2101      	movs	r1, #1
1a005570:	4618      	mov	r0, r3
1a005572:	f7ff ffe5 	bl	1a005540 <SSPSend>
}
1a005576:	b003      	add	sp, #12
1a005578:	f85d fb04 	ldr.w	pc, [sp], #4

1a00557c <SSPReceive>:
{
1a00557c:	b500      	push	{lr}
1a00557e:	b087      	sub	sp, #28
	xferConfig.tx_data = NULL;
1a005580:	2300      	movs	r3, #0
1a005582:	9301      	str	r3, [sp, #4]
	xferConfig.tx_cnt  = 0;
1a005584:	9302      	str	r3, [sp, #8]
	xferConfig.rx_data = buf;
1a005586:	9003      	str	r0, [sp, #12]
	xferConfig.rx_cnt  = 0;
1a005588:	9304      	str	r3, [sp, #16]
	xferConfig.length  = Length;
1a00558a:	9105      	str	r1, [sp, #20]
	Chip_SSP_RWFrames_Blocking(LPC_SSP1, &xferConfig);
1a00558c:	a901      	add	r1, sp, #4
1a00558e:	4803      	ldr	r0, [pc, #12]	; (1a00559c <SSPReceive+0x20>)
1a005590:	f001 fadf 	bl	1a006b52 <Chip_SSP_RWFrames_Blocking>
}
1a005594:	b007      	add	sp, #28
1a005596:	f85d fb04 	ldr.w	pc, [sp], #4
1a00559a:	bf00      	nop
1a00559c:	400c5000 	.word	0x400c5000

1a0055a0 <rcvr_spi>:
{
1a0055a0:	b500      	push	{lr}
1a0055a2:	b083      	sub	sp, #12
    BYTE data = 0;
1a0055a4:	a802      	add	r0, sp, #8
1a0055a6:	2300      	movs	r3, #0
1a0055a8:	f800 3d01 	strb.w	r3, [r0, #-1]!
    SSPReceive(&data, 1);
1a0055ac:	2101      	movs	r1, #1
1a0055ae:	f7ff ffe5 	bl	1a00557c <SSPReceive>
}
1a0055b2:	f89d 0007 	ldrb.w	r0, [sp, #7]
1a0055b6:	b003      	add	sp, #12
1a0055b8:	f85d fb04 	ldr.w	pc, [sp], #4

1a0055bc <wait_ready>:
{
1a0055bc:	b508      	push	{r3, lr}
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
1a0055be:	4b07      	ldr	r3, [pc, #28]	; (1a0055dc <wait_ready+0x20>)
1a0055c0:	2232      	movs	r2, #50	; 0x32
1a0055c2:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
1a0055c4:	f7ff ffec 	bl	1a0055a0 <rcvr_spi>
		res = rcvr_spi();
1a0055c8:	f7ff ffea 	bl	1a0055a0 <rcvr_spi>
	while ((res != 0xFF) && Timer2);
1a0055cc:	28ff      	cmp	r0, #255	; 0xff
1a0055ce:	d003      	beq.n	1a0055d8 <wait_ready+0x1c>
1a0055d0:	4b02      	ldr	r3, [pc, #8]	; (1a0055dc <wait_ready+0x20>)
1a0055d2:	781b      	ldrb	r3, [r3, #0]
1a0055d4:	2b00      	cmp	r3, #0
1a0055d6:	d1f7      	bne.n	1a0055c8 <wait_ready+0xc>
}
1a0055d8:	bd08      	pop	{r3, pc}
1a0055da:	bf00      	nop
1a0055dc:	10003482 	.word	0x10003482

1a0055e0 <deselect>:
{
1a0055e0:	b508      	push	{r3, lr}
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutHigh(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->SET[port] = (1 << pin);
1a0055e2:	4a04      	ldr	r2, [pc, #16]	; (1a0055f4 <deselect+0x14>)
1a0055e4:	f242 230c 	movw	r3, #8716	; 0x220c
1a0055e8:	2101      	movs	r1, #1
1a0055ea:	50d1      	str	r1, [r2, r3]
	rcvr_spi();
1a0055ec:	f7ff ffd8 	bl	1a0055a0 <rcvr_spi>
}
1a0055f0:	bd08      	pop	{r3, pc}
1a0055f2:	bf00      	nop
1a0055f4:	400f4000 	.word	0x400f4000

1a0055f8 <select_>:
{
1a0055f8:	b508      	push	{r3, lr}
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutLow(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->CLR[port] = (1 << pin);
1a0055fa:	4a07      	ldr	r2, [pc, #28]	; (1a005618 <select_+0x20>)
1a0055fc:	f242 238c 	movw	r3, #8844	; 0x228c
1a005600:	2101      	movs	r1, #1
1a005602:	50d1      	str	r1, [r2, r3]
	if (wait_ready() != 0xFF) {
1a005604:	f7ff ffda 	bl	1a0055bc <wait_ready>
1a005608:	28ff      	cmp	r0, #255	; 0xff
1a00560a:	d003      	beq.n	1a005614 <select_+0x1c>
		deselect();
1a00560c:	f7ff ffe8 	bl	1a0055e0 <deselect>
		return FALSE;
1a005610:	2000      	movs	r0, #0
}
1a005612:	bd08      	pop	{r3, pc}
	return TRUE;
1a005614:	2001      	movs	r0, #1
1a005616:	e7fc      	b.n	1a005612 <select_+0x1a>
1a005618:	400f4000 	.word	0x400f4000

1a00561c <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
1a00561c:	b538      	push	{r3, r4, r5, lr}
1a00561e:	4604      	mov	r4, r0
1a005620:	460d      	mov	r5, r1
	BYTE n, res;


    if (cmd & 0x80)                     /* ACMD<n> is the command sequense of CMD55-CMD<n> */
1a005622:	f010 0f80 	tst.w	r0, #128	; 0x80
1a005626:	d129      	bne.n	1a00567c <send_cmd+0x60>
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
1a005628:	f7ff ffda 	bl	1a0055e0 <deselect>
	if (!select_()) 
1a00562c:	f7ff ffe4 	bl	1a0055f8 <select_>
1a005630:	b3a0      	cbz	r0, 1a00569c <send_cmd+0x80>
    {
        return 0xFF;
    }

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
1a005632:	4620      	mov	r0, r4
1a005634:	f7ff ff96 	bl	1a005564 <xmit_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
1a005638:	0e28      	lsrs	r0, r5, #24
1a00563a:	f7ff ff93 	bl	1a005564 <xmit_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
1a00563e:	f3c5 4007 	ubfx	r0, r5, #16, #8
1a005642:	f7ff ff8f 	bl	1a005564 <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
1a005646:	f3c5 2007 	ubfx	r0, r5, #8, #8
1a00564a:	f7ff ff8b 	bl	1a005564 <xmit_spi>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
1a00564e:	b2e8      	uxtb	r0, r5
1a005650:	f7ff ff88 	bl	1a005564 <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
    
	if (cmd == CMD0_) 
1a005654:	2c40      	cmp	r4, #64	; 0x40
1a005656:	d01a      	beq.n	1a00568e <send_cmd+0x72>
	n = 0x01;							/* Dummy CRC + Stop */
1a005658:	2001      	movs	r0, #1
    {
        n = 0x95;                       /* Valid CRC for CMD0_(0) */
    }
    
	if (cmd == CMD8)
1a00565a:	2c48      	cmp	r4, #72	; 0x48
1a00565c:	d019      	beq.n	1a005692 <send_cmd+0x76>
    {
        n = 0x87;                       /* Valid CRC for CMD8(0x1AA) */
    }
    
	xmit_spi(n);
1a00565e:	f7ff ff81 	bl	1a005564 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12) 
1a005662:	2c4c      	cmp	r4, #76	; 0x4c
1a005664:	d017      	beq.n	1a005696 <send_cmd+0x7a>
        n = 0x87;                       /* Valid CRC for CMD8(0x1AA) */
1a005666:	240a      	movs	r4, #10
    }
    
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
    {
		res = rcvr_spi();
1a005668:	f7ff ff9a 	bl	1a0055a0 <rcvr_spi>
    }
	while ((res & 0x80) && --n);
1a00566c:	f010 0f80 	tst.w	r0, #128	; 0x80
1a005670:	d015      	beq.n	1a00569e <send_cmd+0x82>
1a005672:	1e63      	subs	r3, r4, #1
1a005674:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
1a005678:	d1f6      	bne.n	1a005668 <send_cmd+0x4c>
1a00567a:	e010      	b.n	1a00569e <send_cmd+0x82>
		cmd &= 0x7F;
1a00567c:	f000 047f 	and.w	r4, r0, #127	; 0x7f
		res = send_cmd(CMD55, 0);
1a005680:	2100      	movs	r1, #0
1a005682:	2077      	movs	r0, #119	; 0x77
1a005684:	f7ff ffca 	bl	1a00561c <send_cmd>
		if (res > 1) return res;
1a005688:	2801      	cmp	r0, #1
1a00568a:	d808      	bhi.n	1a00569e <send_cmd+0x82>
1a00568c:	e7cc      	b.n	1a005628 <send_cmd+0xc>
        n = 0x95;                       /* Valid CRC for CMD0_(0) */
1a00568e:	2095      	movs	r0, #149	; 0x95
1a005690:	e7e3      	b.n	1a00565a <send_cmd+0x3e>
        n = 0x87;                       /* Valid CRC for CMD8(0x1AA) */
1a005692:	2087      	movs	r0, #135	; 0x87
1a005694:	e7e3      	b.n	1a00565e <send_cmd+0x42>
        rcvr_spi();                     /* Skip a stuff byte when stop reading */
1a005696:	f7ff ff83 	bl	1a0055a0 <rcvr_spi>
1a00569a:	e7e4      	b.n	1a005666 <send_cmd+0x4a>
        return 0xFF;
1a00569c:	20ff      	movs	r0, #255	; 0xff

	return res;			/* Return with the response value */
}
1a00569e:	bd38      	pop	{r3, r4, r5, pc}

1a0056a0 <xmit_datablock>:
{
1a0056a0:	b570      	push	{r4, r5, r6, lr}
1a0056a2:	4606      	mov	r6, r0
1a0056a4:	460c      	mov	r4, r1
	if (wait_ready() != 0xFF) 
1a0056a6:	f7ff ff89 	bl	1a0055bc <wait_ready>
1a0056aa:	28ff      	cmp	r0, #255	; 0xff
1a0056ac:	d001      	beq.n	1a0056b2 <xmit_datablock+0x12>
        return FALSE;
1a0056ae:	2000      	movs	r0, #0
}
1a0056b0:	bd70      	pop	{r4, r5, r6, pc}
	xmit_spi(token);					/* Xmit data token */
1a0056b2:	4620      	mov	r0, r4
1a0056b4:	f7ff ff56 	bl	1a005564 <xmit_spi>
	if (token != 0xFD)                  /* Is data token */
1a0056b8:	2cfd      	cmp	r4, #253	; 0xfd
1a0056ba:	d01b      	beq.n	1a0056f4 <xmit_datablock+0x54>
		wc = 0;
1a0056bc:	2400      	movs	r4, #0
			xmit_spi(*buff++);
1a0056be:	4635      	mov	r5, r6
1a0056c0:	f815 0b02 	ldrb.w	r0, [r5], #2
1a0056c4:	f7ff ff4e 	bl	1a005564 <xmit_spi>
			xmit_spi(*buff++);
1a0056c8:	7870      	ldrb	r0, [r6, #1]
1a0056ca:	f7ff ff4b 	bl	1a005564 <xmit_spi>
        while (--wc);
1a0056ce:	1e63      	subs	r3, r4, #1
			xmit_spi(*buff++);
1a0056d0:	462e      	mov	r6, r5
        while (--wc);
1a0056d2:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
1a0056d6:	d1f2      	bne.n	1a0056be <xmit_datablock+0x1e>
		xmit_spi(0xFF);					/* CRC (Dummy) */
1a0056d8:	20ff      	movs	r0, #255	; 0xff
1a0056da:	f7ff ff43 	bl	1a005564 <xmit_spi>
		xmit_spi(0xFF);
1a0056de:	20ff      	movs	r0, #255	; 0xff
1a0056e0:	f7ff ff40 	bl	1a005564 <xmit_spi>
		resp = rcvr_spi();				/* Reveive data response */
1a0056e4:	f7ff ff5c 	bl	1a0055a0 <rcvr_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
1a0056e8:	f000 001f 	and.w	r0, r0, #31
1a0056ec:	2805      	cmp	r0, #5
1a0056ee:	d003      	beq.n	1a0056f8 <xmit_datablock+0x58>
			return FALSE;
1a0056f0:	2000      	movs	r0, #0
1a0056f2:	e7dd      	b.n	1a0056b0 <xmit_datablock+0x10>
	return TRUE;
1a0056f4:	2001      	movs	r0, #1
1a0056f6:	e7db      	b.n	1a0056b0 <xmit_datablock+0x10>
1a0056f8:	2001      	movs	r0, #1
1a0056fa:	e7d9      	b.n	1a0056b0 <xmit_datablock+0x10>

1a0056fc <rcvr_datablock>:
{
1a0056fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0056fe:	4604      	mov	r4, r0
1a005700:	460e      	mov	r6, r1
	Timer1 = 20;
1a005702:	4b15      	ldr	r3, [pc, #84]	; (1a005758 <rcvr_datablock+0x5c>)
1a005704:	2214      	movs	r2, #20
1a005706:	701a      	strb	r2, [r3, #0]
		token = rcvr_spi();
1a005708:	f7ff ff4a 	bl	1a0055a0 <rcvr_spi>
    while ((token == 0xFF) && Timer1);
1a00570c:	28ff      	cmp	r0, #255	; 0xff
1a00570e:	d103      	bne.n	1a005718 <rcvr_datablock+0x1c>
1a005710:	4b11      	ldr	r3, [pc, #68]	; (1a005758 <rcvr_datablock+0x5c>)
1a005712:	781b      	ldrb	r3, [r3, #0]
1a005714:	2b00      	cmp	r3, #0
1a005716:	d1f7      	bne.n	1a005708 <rcvr_datablock+0xc>
	if (token != 0xFE) 
1a005718:	28fe      	cmp	r0, #254	; 0xfe
1a00571a:	d001      	beq.n	1a005720 <rcvr_datablock+0x24>
        return FALSE;               /* If not valid data token, retutn with error */
1a00571c:	2000      	movs	r0, #0
}
1a00571e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rcvr_spi_m(buff++);
1a005720:	1c65      	adds	r5, r4, #1
1a005722:	2101      	movs	r1, #1
1a005724:	4620      	mov	r0, r4
1a005726:	f7ff ff29 	bl	1a00557c <SSPReceive>
		rcvr_spi_m(buff++);
1a00572a:	1ca7      	adds	r7, r4, #2
1a00572c:	2101      	movs	r1, #1
1a00572e:	4628      	mov	r0, r5
1a005730:	f7ff ff24 	bl	1a00557c <SSPReceive>
		rcvr_spi_m(buff++);
1a005734:	1ce5      	adds	r5, r4, #3
1a005736:	2101      	movs	r1, #1
1a005738:	4638      	mov	r0, r7
1a00573a:	f7ff ff1f 	bl	1a00557c <SSPReceive>
		rcvr_spi_m(buff++);
1a00573e:	2101      	movs	r1, #1
1a005740:	4628      	mov	r0, r5
1a005742:	3404      	adds	r4, #4
1a005744:	f7ff ff1a 	bl	1a00557c <SSPReceive>
    while (btr -= 4);
1a005748:	3e04      	subs	r6, #4
1a00574a:	d1e9      	bne.n	1a005720 <rcvr_datablock+0x24>
	rcvr_spi();						/* Discard CRC */
1a00574c:	f7ff ff28 	bl	1a0055a0 <rcvr_spi>
	rcvr_spi();
1a005750:	f7ff ff26 	bl	1a0055a0 <rcvr_spi>
	return TRUE;					/* Return with success */
1a005754:	2001      	movs	r0, #1
1a005756:	e7e2      	b.n	1a00571e <rcvr_datablock+0x22>
1a005758:	10003481 	.word	0x10003481

1a00575c <FSSDC_FatFs_DiskStatus>:
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS FSSDC_FatFs_DiskStatus ()
{
	return g_diskStats;
1a00575c:	4b01      	ldr	r3, [pc, #4]	; (1a005764 <FSSDC_FatFs_DiskStatus+0x8>)
1a00575e:	7818      	ldrb	r0, [r3, #0]
}
1a005760:	4770      	bx	lr
1a005762:	bf00      	nop
1a005764:	1000000d 	.word	0x1000000d

1a005768 <FSSDC_FatFs_DiskInitialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS FSSDC_FatFs_DiskInitialize ()
{
1a005768:	b570      	push	{r4, r5, r6, lr}
1a00576a:	b082      	sub	sp, #8
	BYTE n, cmd, ty, ocr[4];

    if (g_diskStats & STA_NODISK)
1a00576c:	4b5f      	ldr	r3, [pc, #380]	; (1a0058ec <FSSDC_FatFs_DiskInitialize+0x184>)
1a00576e:	781b      	ldrb	r3, [r3, #0]
1a005770:	f013 0f02 	tst.w	r3, #2
1a005774:	d109      	bne.n	1a00578a <FSSDC_FatFs_DiskInitialize+0x22>
    {
        Board_UARTPutSTR ("FSSDC: [Init] No card in socket.\r\n");
        return g_diskStats;                 /* No card in the socket */
    }
    
    if (!(g_diskStats & STA_NOINIT))        /* Already initialized */
1a005776:	4b5d      	ldr	r3, [pc, #372]	; (1a0058ec <FSSDC_FatFs_DiskInitialize+0x184>)
1a005778:	781b      	ldrb	r3, [r3, #0]
1a00577a:	f013 0f01 	tst.w	r3, #1
1a00577e:	d10b      	bne.n	1a005798 <FSSDC_FatFs_DiskInitialize+0x30>
    {
        return g_diskStats;
1a005780:	4b5a      	ldr	r3, [pc, #360]	; (1a0058ec <FSSDC_FatFs_DiskInitialize+0x184>)
1a005782:	7818      	ldrb	r0, [r3, #0]
1a005784:	b2c0      	uxtb	r0, r0
        Board_UARTPutSTR ("FSSDC: [Init] New card status: Error (Not Initialized).\r\n");        
        newCardStatus (FSSDC_CardStatus_Error); 
	}

	return g_diskStats;
}
1a005786:	b002      	add	sp, #8
1a005788:	bd70      	pop	{r4, r5, r6, pc}
        Board_UARTPutSTR ("FSSDC: [Init] No card in socket.\r\n");
1a00578a:	4859      	ldr	r0, [pc, #356]	; (1a0058f0 <FSSDC_FatFs_DiskInitialize+0x188>)
1a00578c:	f000 fc20 	bl	1a005fd0 <Board_UARTPutSTR>
        return g_diskStats;                 /* No card in the socket */
1a005790:	4b56      	ldr	r3, [pc, #344]	; (1a0058ec <FSSDC_FatFs_DiskInitialize+0x184>)
1a005792:	7818      	ldrb	r0, [r3, #0]
1a005794:	b2c0      	uxtb	r0, r0
1a005796:	e7f6      	b.n	1a005786 <FSSDC_FatFs_DiskInitialize+0x1e>
    Board_UARTPutSTR ("FSSDC: [Init] Initialization begins.\r\n");
1a005798:	4856      	ldr	r0, [pc, #344]	; (1a0058f4 <FSSDC_FatFs_DiskInitialize+0x18c>)
1a00579a:	f000 fc19 	bl	1a005fd0 <Board_UARTPutSTR>
	FCLK_SLOW();
1a00579e:	4b56      	ldr	r3, [pc, #344]	; (1a0058f8 <FSSDC_FatFs_DiskInitialize+0x190>)
1a0057a0:	6819      	ldr	r1, [r3, #0]
1a0057a2:	4856      	ldr	r0, [pc, #344]	; (1a0058fc <FSSDC_FatFs_DiskInitialize+0x194>)
1a0057a4:	f001 fa2a 	bl	1a006bfc <Chip_SSP_SetBitRate>
	for (n = 10; n; n--) 
1a0057a8:	240a      	movs	r4, #10
1a0057aa:	e003      	b.n	1a0057b4 <FSSDC_FatFs_DiskInitialize+0x4c>
        rcvr_spi();	/* 80 dummy clocks */
1a0057ac:	f7ff fef8 	bl	1a0055a0 <rcvr_spi>
	for (n = 10; n; n--) 
1a0057b0:	3c01      	subs	r4, #1
1a0057b2:	b2e4      	uxtb	r4, r4
1a0057b4:	2c00      	cmp	r4, #0
1a0057b6:	d1f9      	bne.n	1a0057ac <FSSDC_FatFs_DiskInitialize+0x44>
    Board_UARTPutSTR ("FSSDC: [Init] New card status: Native Mode.\r\n");
1a0057b8:	4851      	ldr	r0, [pc, #324]	; (1a005900 <FSSDC_FatFs_DiskInitialize+0x198>)
1a0057ba:	f000 fc09 	bl	1a005fd0 <Board_UARTPutSTR>
    newCardStatus (FSSDC_CardStatus_NativeMode);    
1a0057be:	2003      	movs	r0, #3
1a0057c0:	f7ff feb0 	bl	1a005524 <newCardStatus>
	if (send_cmd(CMD0_, 0) == 1)                                /* Enter Idle state */
1a0057c4:	2100      	movs	r1, #0
1a0057c6:	2040      	movs	r0, #64	; 0x40
1a0057c8:	f7ff ff28 	bl	1a00561c <send_cmd>
1a0057cc:	4605      	mov	r5, r0
1a0057ce:	2801      	cmp	r0, #1
1a0057d0:	d019      	beq.n	1a005806 <FSSDC_FatFs_DiskInitialize+0x9e>
	CardType = ty;
1a0057d2:	4b4c      	ldr	r3, [pc, #304]	; (1a005904 <FSSDC_FatFs_DiskInitialize+0x19c>)
1a0057d4:	701c      	strb	r4, [r3, #0]
	deselect();
1a0057d6:	f7ff ff03 	bl	1a0055e0 <deselect>
    if (ty)                                             /* Initialization succeded */
1a0057da:	2c00      	cmp	r4, #0
1a0057dc:	d07f      	beq.n	1a0058de <FSSDC_FatFs_DiskInitialize+0x176>
		g_diskStats &= ~STA_NOINIT;                     /* Clear STA_NOINIT */
1a0057de:	4a43      	ldr	r2, [pc, #268]	; (1a0058ec <FSSDC_FatFs_DiskInitialize+0x184>)
1a0057e0:	7813      	ldrb	r3, [r2, #0]
1a0057e2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
1a0057e6:	7013      	strb	r3, [r2, #0]
		FCLK_FAST();
1a0057e8:	4b47      	ldr	r3, [pc, #284]	; (1a005908 <FSSDC_FatFs_DiskInitialize+0x1a0>)
1a0057ea:	6819      	ldr	r1, [r3, #0]
1a0057ec:	4843      	ldr	r0, [pc, #268]	; (1a0058fc <FSSDC_FatFs_DiskInitialize+0x194>)
1a0057ee:	f001 fa05 	bl	1a006bfc <Chip_SSP_SetBitRate>
        Board_UARTPutSTR ("FSSDC: [Init] New card status: Ready (Fast Clock).\r\n");        
1a0057f2:	4846      	ldr	r0, [pc, #280]	; (1a00590c <FSSDC_FatFs_DiskInitialize+0x1a4>)
1a0057f4:	f000 fbec 	bl	1a005fd0 <Board_UARTPutSTR>
        newCardStatus (FSSDC_CardStatus_Ready);        
1a0057f8:	2005      	movs	r0, #5
1a0057fa:	f7ff fe93 	bl	1a005524 <newCardStatus>
	return g_diskStats;
1a0057fe:	4b3b      	ldr	r3, [pc, #236]	; (1a0058ec <FSSDC_FatFs_DiskInitialize+0x184>)
1a005800:	7818      	ldrb	r0, [r3, #0]
1a005802:	b2c0      	uxtb	r0, r0
1a005804:	e7bf      	b.n	1a005786 <FSSDC_FatFs_DiskInitialize+0x1e>
        Board_UARTPutSTR ("FSSDC: [Init] New card status: Initializing.\r\n");        
1a005806:	4842      	ldr	r0, [pc, #264]	; (1a005910 <FSSDC_FatFs_DiskInitialize+0x1a8>)
1a005808:	f000 fbe2 	bl	1a005fd0 <Board_UARTPutSTR>
        newCardStatus (FSSDC_CardStatus_Initializing);
1a00580c:	2004      	movs	r0, #4
1a00580e:	f7ff fe89 	bl	1a005524 <newCardStatus>
		Timer1 = 100;                                           /* Initialization timeout of 1000 msec */
1a005812:	4b40      	ldr	r3, [pc, #256]	; (1a005914 <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a005814:	2264      	movs	r2, #100	; 0x64
1a005816:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1)                         /* SDHC */
1a005818:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
1a00581c:	2048      	movs	r0, #72	; 0x48
1a00581e:	f7ff fefd 	bl	1a00561c <send_cmd>
1a005822:	2801      	cmp	r0, #1
1a005824:	d139      	bne.n	1a00589a <FSSDC_FatFs_DiskInitialize+0x132>
			for (n = 0; n < 4; n++) 
1a005826:	4625      	mov	r5, r4
1a005828:	e007      	b.n	1a00583a <FSSDC_FatFs_DiskInitialize+0xd2>
                ocr[n] = rcvr_spi();                            /* Get trailing return value of R7 resp */
1a00582a:	f7ff feb9 	bl	1a0055a0 <rcvr_spi>
1a00582e:	ab02      	add	r3, sp, #8
1a005830:	442b      	add	r3, r5
1a005832:	f803 0c04 	strb.w	r0, [r3, #-4]
			for (n = 0; n < 4; n++) 
1a005836:	3501      	adds	r5, #1
1a005838:	b2ed      	uxtb	r5, r5
1a00583a:	2d03      	cmp	r5, #3
1a00583c:	d9f5      	bls.n	1a00582a <FSSDC_FatFs_DiskInitialize+0xc2>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)               /* The card can work at vdd range of 2.7-3.6V */ 
1a00583e:	f89d 3006 	ldrb.w	r3, [sp, #6]
1a005842:	2b01      	cmp	r3, #1
1a005844:	d1c5      	bne.n	1a0057d2 <FSSDC_FatFs_DiskInitialize+0x6a>
1a005846:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a00584a:	2baa      	cmp	r3, #170	; 0xaa
1a00584c:	d1c1      	bne.n	1a0057d2 <FSSDC_FatFs_DiskInitialize+0x6a>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
1a00584e:	4b31      	ldr	r3, [pc, #196]	; (1a005914 <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a005850:	781b      	ldrb	r3, [r3, #0]
1a005852:	b133      	cbz	r3, 1a005862 <FSSDC_FatFs_DiskInitialize+0xfa>
1a005854:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
1a005858:	20e9      	movs	r0, #233	; 0xe9
1a00585a:	f7ff fedf 	bl	1a00561c <send_cmd>
1a00585e:	2800      	cmp	r0, #0
1a005860:	d1f5      	bne.n	1a00584e <FSSDC_FatFs_DiskInitialize+0xe6>
                if (Timer1 && send_cmd(CMD58, 0) == 0) 
1a005862:	4b2c      	ldr	r3, [pc, #176]	; (1a005914 <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a005864:	781b      	ldrb	r3, [r3, #0]
1a005866:	2b00      	cmp	r3, #0
1a005868:	d0b3      	beq.n	1a0057d2 <FSSDC_FatFs_DiskInitialize+0x6a>
1a00586a:	2100      	movs	r1, #0
1a00586c:	207a      	movs	r0, #122	; 0x7a
1a00586e:	f7ff fed5 	bl	1a00561c <send_cmd>
1a005872:	4605      	mov	r5, r0
1a005874:	b140      	cbz	r0, 1a005888 <FSSDC_FatFs_DiskInitialize+0x120>
1a005876:	e7ac      	b.n	1a0057d2 <FSSDC_FatFs_DiskInitialize+0x6a>
                        ocr[n] = rcvr_spi();
1a005878:	f7ff fe92 	bl	1a0055a0 <rcvr_spi>
1a00587c:	ab02      	add	r3, sp, #8
1a00587e:	442b      	add	r3, r5
1a005880:	f803 0c04 	strb.w	r0, [r3, #-4]
					for (n = 0; n < 4; n++)                     /* Check CCS bit in the OCR */
1a005884:	3501      	adds	r5, #1
1a005886:	b2ed      	uxtb	r5, r5
1a005888:	2d03      	cmp	r5, #3
1a00588a:	d9f5      	bls.n	1a005878 <FSSDC_FatFs_DiskInitialize+0x110>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
1a00588c:	f89d 3004 	ldrb.w	r3, [sp, #4]
1a005890:	f013 0f40 	tst.w	r3, #64	; 0x40
1a005894:	d021      	beq.n	1a0058da <FSSDC_FatFs_DiskInitialize+0x172>
1a005896:	240c      	movs	r4, #12
1a005898:	e79b      	b.n	1a0057d2 <FSSDC_FatFs_DiskInitialize+0x6a>
			if (send_cmd(ACMD41, 0) <= 1)
1a00589a:	2100      	movs	r1, #0
1a00589c:	20e9      	movs	r0, #233	; 0xe9
1a00589e:	f7ff febd 	bl	1a00561c <send_cmd>
1a0058a2:	2801      	cmp	r0, #1
1a0058a4:	d916      	bls.n	1a0058d4 <FSSDC_FatFs_DiskInitialize+0x16c>
				ty = CT_MMC; cmd = CMD1;                        /* MMCv3 */
1a0058a6:	2641      	movs	r6, #65	; 0x41
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
1a0058a8:	4b1a      	ldr	r3, [pc, #104]	; (1a005914 <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a0058aa:	781b      	ldrb	r3, [r3, #0]
1a0058ac:	b12b      	cbz	r3, 1a0058ba <FSSDC_FatFs_DiskInitialize+0x152>
1a0058ae:	2100      	movs	r1, #0
1a0058b0:	4630      	mov	r0, r6
1a0058b2:	f7ff feb3 	bl	1a00561c <send_cmd>
1a0058b6:	2800      	cmp	r0, #0
1a0058b8:	d1f6      	bne.n	1a0058a8 <FSSDC_FatFs_DiskInitialize+0x140>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
1a0058ba:	4b16      	ldr	r3, [pc, #88]	; (1a005914 <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a0058bc:	781b      	ldrb	r3, [r3, #0]
1a0058be:	2b00      	cmp	r3, #0
1a0058c0:	d087      	beq.n	1a0057d2 <FSSDC_FatFs_DiskInitialize+0x6a>
1a0058c2:	f44f 7100 	mov.w	r1, #512	; 0x200
1a0058c6:	2050      	movs	r0, #80	; 0x50
1a0058c8:	f7ff fea8 	bl	1a00561c <send_cmd>
1a0058cc:	2800      	cmp	r0, #0
1a0058ce:	d180      	bne.n	1a0057d2 <FSSDC_FatFs_DiskInitialize+0x6a>
1a0058d0:	462c      	mov	r4, r5
1a0058d2:	e77e      	b.n	1a0057d2 <FSSDC_FatFs_DiskInitialize+0x6a>
				ty = CT_SD1; cmd = ACMD41;                      /* SDv1 */
1a0058d4:	2502      	movs	r5, #2
1a0058d6:	26e9      	movs	r6, #233	; 0xe9
1a0058d8:	e7e6      	b.n	1a0058a8 <FSSDC_FatFs_DiskInitialize+0x140>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
1a0058da:	2404      	movs	r4, #4
1a0058dc:	e779      	b.n	1a0057d2 <FSSDC_FatFs_DiskInitialize+0x6a>
        Board_UARTPutSTR ("FSSDC: [Init] New card status: Error (Not Initialized).\r\n");        
1a0058de:	480e      	ldr	r0, [pc, #56]	; (1a005918 <FSSDC_FatFs_DiskInitialize+0x1b0>)
1a0058e0:	f000 fb76 	bl	1a005fd0 <Board_UARTPutSTR>
        newCardStatus (FSSDC_CardStatus_Error); 
1a0058e4:	2000      	movs	r0, #0
1a0058e6:	f7ff fe1d 	bl	1a005524 <newCardStatus>
1a0058ea:	e788      	b.n	1a0057fe <FSSDC_FatFs_DiskInitialize+0x96>
1a0058ec:	1000000d 	.word	0x1000000d
1a0058f0:	1a00842c 	.word	0x1a00842c
1a0058f4:	1a008450 	.word	0x1a008450
1a0058f8:	10000014 	.word	0x10000014
1a0058fc:	400c5000 	.word	0x400c5000
1a005900:	1a008478 	.word	0x1a008478
1a005904:	10003480 	.word	0x10003480
1a005908:	10000010 	.word	0x10000010
1a00590c:	1a0084d8 	.word	0x1a0084d8
1a005910:	1a0084a8 	.word	0x1a0084a8
1a005914:	10003481 	.word	0x10003481
1a005918:	1a008510 	.word	0x1a008510

1a00591c <FSSDC_FatFs_DiskRead>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/
DRESULT FSSDC_FatFs_DiskRead (BYTE *buff, DWORD sector, UINT count)
{   
1a00591c:	b538      	push	{r3, r4, r5, lr}
	if (g_diskStats & STA_NOINIT)
1a00591e:	4b1d      	ldr	r3, [pc, #116]	; (1a005994 <FSSDC_FatFs_DiskRead+0x78>)
1a005920:	781b      	ldrb	r3, [r3, #0]
1a005922:	f013 0f01 	tst.w	r3, #1
1a005926:	d121      	bne.n	1a00596c <FSSDC_FatFs_DiskRead+0x50>
1a005928:	4605      	mov	r5, r0
1a00592a:	4614      	mov	r4, r2
    {
        Board_UARTPutSTR ("FSSDC: [Read] Card not initialized.\r\n");
        return RES_NOTRDY;
    }

	if (!(CardType & CT_BLOCK)) 
1a00592c:	4b1a      	ldr	r3, [pc, #104]	; (1a005998 <FSSDC_FatFs_DiskRead+0x7c>)
1a00592e:	781b      	ldrb	r3, [r3, #0]
1a005930:	f013 0f08 	tst.w	r3, #8
1a005934:	d100      	bne.n	1a005938 <FSSDC_FatFs_DiskRead+0x1c>
    {
        sector *= 512;                      /* Convert to byte address if needed */
1a005936:	0249      	lsls	r1, r1, #9
    }

	if (count == 1) 
1a005938:	2c01      	cmp	r4, #1
1a00593a:	d01c      	beq.n	1a005976 <FSSDC_FatFs_DiskRead+0x5a>
			&& rcvr_datablock(buff, 512))
			count = 0;
	}
	else 
    {                                       /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) 
1a00593c:	2052      	movs	r0, #82	; 0x52
1a00593e:	f7ff fe6d 	bl	1a00561c <send_cmd>
1a005942:	b968      	cbnz	r0, 1a005960 <FSSDC_FatFs_DiskRead+0x44>
        {                                   /* READ_MULTIPLE_BLOCK */
			do 
            {
				if (!rcvr_datablock(buff, 512)) 
1a005944:	f44f 7100 	mov.w	r1, #512	; 0x200
1a005948:	4628      	mov	r0, r5
1a00594a:	f7ff fed7 	bl	1a0056fc <rcvr_datablock>
1a00594e:	b118      	cbz	r0, 1a005958 <FSSDC_FatFs_DiskRead+0x3c>
                {
                    break;
                }
				buff += 512;
1a005950:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} 
            while (--count);
1a005954:	3c01      	subs	r4, #1
1a005956:	d1f5      	bne.n	1a005944 <FSSDC_FatFs_DiskRead+0x28>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
1a005958:	2100      	movs	r1, #0
1a00595a:	204c      	movs	r0, #76	; 0x4c
1a00595c:	f7ff fe5e 	bl	1a00561c <send_cmd>
		}
	}
	deselect();
1a005960:	f7ff fe3e 	bl	1a0055e0 <deselect>

	return count ? RES_ERROR : RES_OK;
1a005964:	1c20      	adds	r0, r4, #0
1a005966:	bf18      	it	ne
1a005968:	2001      	movne	r0, #1
}
1a00596a:	bd38      	pop	{r3, r4, r5, pc}
        Board_UARTPutSTR ("FSSDC: [Read] Card not initialized.\r\n");
1a00596c:	480b      	ldr	r0, [pc, #44]	; (1a00599c <FSSDC_FatFs_DiskRead+0x80>)
1a00596e:	f000 fb2f 	bl	1a005fd0 <Board_UARTPutSTR>
        return RES_NOTRDY;
1a005972:	2003      	movs	r0, #3
1a005974:	e7f9      	b.n	1a00596a <FSSDC_FatFs_DiskRead+0x4e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
1a005976:	2051      	movs	r0, #81	; 0x51
1a005978:	f7ff fe50 	bl	1a00561c <send_cmd>
1a00597c:	2800      	cmp	r0, #0
1a00597e:	d1ef      	bne.n	1a005960 <FSSDC_FatFs_DiskRead+0x44>
			&& rcvr_datablock(buff, 512))
1a005980:	f44f 7100 	mov.w	r1, #512	; 0x200
1a005984:	4628      	mov	r0, r5
1a005986:	f7ff feb9 	bl	1a0056fc <rcvr_datablock>
1a00598a:	2800      	cmp	r0, #0
1a00598c:	d0e8      	beq.n	1a005960 <FSSDC_FatFs_DiskRead+0x44>
			count = 0;
1a00598e:	2400      	movs	r4, #0
1a005990:	e7e6      	b.n	1a005960 <FSSDC_FatFs_DiskRead+0x44>
1a005992:	bf00      	nop
1a005994:	1000000d 	.word	0x1000000d
1a005998:	10003480 	.word	0x10003480
1a00599c:	1a008598 	.word	0x1a008598

1a0059a0 <FSSDC_FatFs_DiskWrite>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
DRESULT FSSDC_FatFs_DiskWrite (const BYTE *buff, DWORD sector, UINT count)
{
1a0059a0:	b570      	push	{r4, r5, r6, lr}
	if (g_diskStats & STA_NOINIT)
1a0059a2:	4b28      	ldr	r3, [pc, #160]	; (1a005a44 <FSSDC_FatFs_DiskWrite+0xa4>)
1a0059a4:	781b      	ldrb	r3, [r3, #0]
1a0059a6:	f013 0f01 	tst.w	r3, #1
1a0059aa:	d12b      	bne.n	1a005a04 <FSSDC_FatFs_DiskWrite+0x64>
1a0059ac:	4605      	mov	r5, r0
1a0059ae:	460e      	mov	r6, r1
1a0059b0:	4614      	mov	r4, r2
    {
        Board_UARTPutSTR ("FSSDC: [Write] Card not initialized.\r\n");
        return RES_NOTRDY;
    }
    
	if (g_diskStats & STA_PROTECT)
1a0059b2:	4b24      	ldr	r3, [pc, #144]	; (1a005a44 <FSSDC_FatFs_DiskWrite+0xa4>)
1a0059b4:	781b      	ldrb	r3, [r3, #0]
1a0059b6:	f013 0f04 	tst.w	r3, #4
1a0059ba:	d128      	bne.n	1a005a0e <FSSDC_FatFs_DiskWrite+0x6e>
    {
        Board_UARTPutSTR ("FSSDC: [Write] Card is write protected.\r\n");
        return RES_WRPRT;
    }

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
1a0059bc:	4b22      	ldr	r3, [pc, #136]	; (1a005a48 <FSSDC_FatFs_DiskWrite+0xa8>)
1a0059be:	781b      	ldrb	r3, [r3, #0]
1a0059c0:	f013 0f08 	tst.w	r3, #8
1a0059c4:	d100      	bne.n	1a0059c8 <FSSDC_FatFs_DiskWrite+0x28>
1a0059c6:	024e      	lsls	r6, r1, #9

	if (count == 1) 
1a0059c8:	2c01      	cmp	r4, #1
1a0059ca:	d025      	beq.n	1a005a18 <FSSDC_FatFs_DiskWrite+0x78>
			count = 0;
        }
	}
	else 
    {                                           /* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
1a0059cc:	f013 0f06 	tst.w	r3, #6
1a0059d0:	d130      	bne.n	1a005a34 <FSSDC_FatFs_DiskWrite+0x94>
		if (send_cmd(CMD25, sector) == 0) 
1a0059d2:	4631      	mov	r1, r6
1a0059d4:	2059      	movs	r0, #89	; 0x59
1a0059d6:	f7ff fe21 	bl	1a00561c <send_cmd>
1a0059da:	b968      	cbnz	r0, 1a0059f8 <FSSDC_FatFs_DiskWrite+0x58>
        {                                       /* WRITE_MULTIPLE_BLOCK */
			do 
            {
				if (!xmit_datablock(buff, 0xFC))
1a0059dc:	21fc      	movs	r1, #252	; 0xfc
1a0059de:	4628      	mov	r0, r5
1a0059e0:	f7ff fe5e 	bl	1a0056a0 <xmit_datablock>
1a0059e4:	b118      	cbz	r0, 1a0059ee <FSSDC_FatFs_DiskWrite+0x4e>
                {
                    break;
                }
				buff += 512;
1a0059e6:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} 
            while (--count);
1a0059ea:	3c01      	subs	r4, #1
1a0059ec:	d1f6      	bne.n	1a0059dc <FSSDC_FatFs_DiskWrite+0x3c>
			if (!xmit_datablock(0, 0xFD))       /* STOP_TRAN token */
1a0059ee:	21fd      	movs	r1, #253	; 0xfd
1a0059f0:	2000      	movs	r0, #0
1a0059f2:	f7ff fe55 	bl	1a0056a0 <xmit_datablock>
1a0059f6:	b310      	cbz	r0, 1a005a3e <FSSDC_FatFs_DiskWrite+0x9e>
            {
				count = 1;
            }
		}
	}
	deselect();
1a0059f8:	f7ff fdf2 	bl	1a0055e0 <deselect>

	return count ? RES_ERROR : RES_OK;
1a0059fc:	1c20      	adds	r0, r4, #0
1a0059fe:	bf18      	it	ne
1a005a00:	2001      	movne	r0, #1
}
1a005a02:	bd70      	pop	{r4, r5, r6, pc}
        Board_UARTPutSTR ("FSSDC: [Write] Card not initialized.\r\n");
1a005a04:	4811      	ldr	r0, [pc, #68]	; (1a005a4c <FSSDC_FatFs_DiskWrite+0xac>)
1a005a06:	f000 fae3 	bl	1a005fd0 <Board_UARTPutSTR>
        return RES_NOTRDY;
1a005a0a:	2003      	movs	r0, #3
1a005a0c:	e7f9      	b.n	1a005a02 <FSSDC_FatFs_DiskWrite+0x62>
        Board_UARTPutSTR ("FSSDC: [Write] Card is write protected.\r\n");
1a005a0e:	4810      	ldr	r0, [pc, #64]	; (1a005a50 <FSSDC_FatFs_DiskWrite+0xb0>)
1a005a10:	f000 fade 	bl	1a005fd0 <Board_UARTPutSTR>
        return RES_WRPRT;
1a005a14:	2002      	movs	r0, #2
1a005a16:	e7f4      	b.n	1a005a02 <FSSDC_FatFs_DiskWrite+0x62>
		if ((send_cmd(CMD24, sector) == 0)      /* WRITE_BLOCK */
1a005a18:	4631      	mov	r1, r6
1a005a1a:	2058      	movs	r0, #88	; 0x58
1a005a1c:	f7ff fdfe 	bl	1a00561c <send_cmd>
1a005a20:	2800      	cmp	r0, #0
1a005a22:	d1e9      	bne.n	1a0059f8 <FSSDC_FatFs_DiskWrite+0x58>
                    && xmit_datablock(buff, 0xFE))
1a005a24:	21fe      	movs	r1, #254	; 0xfe
1a005a26:	4628      	mov	r0, r5
1a005a28:	f7ff fe3a 	bl	1a0056a0 <xmit_datablock>
1a005a2c:	2800      	cmp	r0, #0
1a005a2e:	d0e3      	beq.n	1a0059f8 <FSSDC_FatFs_DiskWrite+0x58>
			count = 0;
1a005a30:	2400      	movs	r4, #0
1a005a32:	e7e1      	b.n	1a0059f8 <FSSDC_FatFs_DiskWrite+0x58>
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
1a005a34:	4621      	mov	r1, r4
1a005a36:	20d7      	movs	r0, #215	; 0xd7
1a005a38:	f7ff fdf0 	bl	1a00561c <send_cmd>
1a005a3c:	e7c9      	b.n	1a0059d2 <FSSDC_FatFs_DiskWrite+0x32>
				count = 1;
1a005a3e:	2401      	movs	r4, #1
1a005a40:	e7da      	b.n	1a0059f8 <FSSDC_FatFs_DiskWrite+0x58>
1a005a42:	bf00      	nop
1a005a44:	1000000d 	.word	0x1000000d
1a005a48:	10003480 	.word	0x10003480
1a005a4c:	1a0085c0 	.word	0x1a0085c0
1a005a50:	1a0085e8 	.word	0x1a0085e8

1a005a54 <FSSDC_FatFs_DiskIoCtl>:

/*-----------------------------------------------------------------------*/
/* Miscellaneous Functions                                               */
/*-----------------------------------------------------------------------*/
DRESULT FSSDC_FatFs_DiskIoCtl (BYTE cmd, void *buff)
{
1a005a54:	b570      	push	{r4, r5, r6, lr}
1a005a56:	b084      	sub	sp, #16
1a005a58:	460d      	mov	r5, r1
	BYTE n, csd[16], *ptr = buff;
	WORD csize;

	res = RES_ERROR;

	if (cmd == CTRL_POWER)
1a005a5a:	2805      	cmp	r0, #5
1a005a5c:	d018      	beq.n	1a005a90 <FSSDC_FatFs_DiskIoCtl+0x3c>
			res = RES_PARERR;
		}
	}
	else 
    {
		if (g_diskStats & STA_NOINIT)
1a005a5e:	4bb3      	ldr	r3, [pc, #716]	; (1a005d2c <FSSDC_FatFs_DiskIoCtl+0x2d8>)
1a005a60:	781b      	ldrb	r3, [r3, #0]
1a005a62:	f013 0f01 	tst.w	r3, #1
1a005a66:	d11f      	bne.n	1a005aa8 <FSSDC_FatFs_DiskIoCtl+0x54>
        {
            Board_UARTPutSTR ("FSSDC: [IOCtl] Card not initialized.\r\n");
            return RES_NOTRDY;
        }

		switch (cmd) {
1a005a68:	280e      	cmp	r0, #14
1a005a6a:	f200 814a 	bhi.w	1a005d02 <FSSDC_FatFs_DiskIoCtl+0x2ae>
1a005a6e:	e8df f010 	tbh	[pc, r0, lsl #1]
1a005a72:	0020      	.short	0x0020
1a005a74:	006f002d 	.word	0x006f002d
1a005a78:	01480076 	.word	0x01480076
1a005a7c:	01480148 	.word	0x01480148
1a005a80:	01480148 	.word	0x01480148
1a005a84:	00d30148 	.word	0x00d30148
1a005a88:	00ea00da 	.word	0x00ea00da
1a005a8c:	010c00f8 	.word	0x010c00f8
		switch (*ptr) {
1a005a90:	780b      	ldrb	r3, [r1, #0]
1a005a92:	2b01      	cmp	r3, #1
1a005a94:	f240 8148 	bls.w	1a005d28 <FSSDC_FatFs_DiskIoCtl+0x2d4>
1a005a98:	2b02      	cmp	r3, #2
1a005a9a:	f040 813e 	bne.w	1a005d1a <FSSDC_FatFs_DiskIoCtl+0x2c6>
			*(ptr+1) = (BYTE)chk_power();
1a005a9e:	f7ff fd4d 	bl	1a00553c <chk_power>
1a005aa2:	7068      	strb	r0, [r5, #1]
			res = RES_OK;
1a005aa4:	2400      	movs	r4, #0
1a005aa6:	e13c      	b.n	1a005d22 <FSSDC_FatFs_DiskIoCtl+0x2ce>
            Board_UARTPutSTR ("FSSDC: [IOCtl] Card not initialized.\r\n");
1a005aa8:	48a1      	ldr	r0, [pc, #644]	; (1a005d30 <FSSDC_FatFs_DiskIoCtl+0x2dc>)
1a005aaa:	f000 fa91 	bl	1a005fd0 <Board_UARTPutSTR>
            return RES_NOTRDY;
1a005aae:	2403      	movs	r4, #3
1a005ab0:	e137      	b.n	1a005d22 <FSSDC_FatFs_DiskIoCtl+0x2ce>
		case CTRL_SYNC :                    /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select_()) 
1a005ab2:	f7ff fda1 	bl	1a0055f8 <select_>
1a005ab6:	b918      	cbnz	r0, 1a005ac0 <FSSDC_FatFs_DiskIoCtl+0x6c>

		default:
			res = RES_PARERR;
		}

		deselect();
1a005ab8:	f7ff fd92 	bl	1a0055e0 <deselect>
	res = RES_ERROR;
1a005abc:	2401      	movs	r4, #1
1a005abe:	e12d      	b.n	1a005d1c <FSSDC_FatFs_DiskIoCtl+0x2c8>
				deselect();
1a005ac0:	f7ff fd8e 	bl	1a0055e0 <deselect>
		deselect();
1a005ac4:	f7ff fd8c 	bl	1a0055e0 <deselect>
				res = RES_OK;
1a005ac8:	2400      	movs	r4, #0
1a005aca:	e12a      	b.n	1a005d22 <FSSDC_FatFs_DiskIoCtl+0x2ce>
			if ((send_cmd(CMD9, 0) == 0) 
1a005acc:	2100      	movs	r1, #0
1a005ace:	2049      	movs	r0, #73	; 0x49
1a005ad0:	f7ff fda4 	bl	1a00561c <send_cmd>
1a005ad4:	2800      	cmp	r0, #0
1a005ad6:	f040 8110 	bne.w	1a005cfa <FSSDC_FatFs_DiskIoCtl+0x2a6>
                    && rcvr_datablock(csd, 16))
1a005ada:	2110      	movs	r1, #16
1a005adc:	4668      	mov	r0, sp
1a005ade:	f7ff fe0d 	bl	1a0056fc <rcvr_datablock>
1a005ae2:	2800      	cmp	r0, #0
1a005ae4:	f000 8115 	beq.w	1a005d12 <FSSDC_FatFs_DiskIoCtl+0x2be>
				if ((csd[0] >> 6) == 1) 
1a005ae8:	f89d 3000 	ldrb.w	r3, [sp]
1a005aec:	099b      	lsrs	r3, r3, #6
1a005aee:	2b01      	cmp	r3, #1
1a005af0:	d022      	beq.n	1a005b38 <FSSDC_FatFs_DiskIoCtl+0xe4>
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
1a005af2:	f89d 2005 	ldrb.w	r2, [sp, #5]
1a005af6:	f002 020f 	and.w	r2, r2, #15
1a005afa:	f89d 300a 	ldrb.w	r3, [sp, #10]
1a005afe:	eb02 12d3 	add.w	r2, r2, r3, lsr #7
1a005b02:	f89d 3009 	ldrb.w	r3, [sp, #9]
1a005b06:	005b      	lsls	r3, r3, #1
1a005b08:	f003 0306 	and.w	r3, r3, #6
1a005b0c:	441a      	add	r2, r3
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
1a005b0e:	f89d 3008 	ldrb.w	r3, [sp, #8]
1a005b12:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a005b16:	099b      	lsrs	r3, r3, #6
1a005b18:	eb03 0381 	add.w	r3, r3, r1, lsl #2
1a005b1c:	f89d 1006 	ldrb.w	r1, [sp, #6]
1a005b20:	0289      	lsls	r1, r1, #10
1a005b22:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
1a005b26:	440b      	add	r3, r1
1a005b28:	3301      	adds	r3, #1
					*(DWORD*)buff = (DWORD)csize << (n - 9);
1a005b2a:	3a07      	subs	r2, #7
1a005b2c:	4093      	lsls	r3, r2
1a005b2e:	602b      	str	r3, [r5, #0]
		deselect();
1a005b30:	f7ff fd56 	bl	1a0055e0 <deselect>
				res = RES_OK;
1a005b34:	2400      	movs	r4, #0
1a005b36:	e0f4      	b.n	1a005d22 <FSSDC_FatFs_DiskIoCtl+0x2ce>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
1a005b38:	f89d 3009 	ldrb.w	r3, [sp, #9]
1a005b3c:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a005b40:	eb03 2302 	add.w	r3, r3, r2, lsl #8
1a005b44:	b29b      	uxth	r3, r3
1a005b46:	3301      	adds	r3, #1
1a005b48:	b29b      	uxth	r3, r3
					*(DWORD*)buff = (DWORD)csize << 10;
1a005b4a:	029b      	lsls	r3, r3, #10
1a005b4c:	602b      	str	r3, [r5, #0]
1a005b4e:	e7ef      	b.n	1a005b30 <FSSDC_FatFs_DiskIoCtl+0xdc>
			*(WORD*)buff = 512;
1a005b50:	f44f 7300 	mov.w	r3, #512	; 0x200
1a005b54:	800b      	strh	r3, [r1, #0]
		deselect();
1a005b56:	f7ff fd43 	bl	1a0055e0 <deselect>
			res = RES_OK;
1a005b5a:	2400      	movs	r4, #0
1a005b5c:	e0e1      	b.n	1a005d22 <FSSDC_FatFs_DiskIoCtl+0x2ce>
			if (CardType & CT_SD2) {                            /* SDC ver 2.00 */
1a005b5e:	4b75      	ldr	r3, [pc, #468]	; (1a005d34 <FSSDC_FatFs_DiskIoCtl+0x2e0>)
1a005b60:	781b      	ldrb	r3, [r3, #0]
1a005b62:	f013 0f04 	tst.w	r3, #4
1a005b66:	d020      	beq.n	1a005baa <FSSDC_FatFs_DiskIoCtl+0x156>
				if (send_cmd(ACMD13, 0) == 0)                   /* Read SD status */
1a005b68:	2100      	movs	r1, #0
1a005b6a:	20cd      	movs	r0, #205	; 0xcd
1a005b6c:	f7ff fd56 	bl	1a00561c <send_cmd>
1a005b70:	2800      	cmp	r0, #0
1a005b72:	f040 80ba 	bne.w	1a005cea <FSSDC_FatFs_DiskIoCtl+0x296>
					rcvr_spi();
1a005b76:	f7ff fd13 	bl	1a0055a0 <rcvr_spi>
					if (rcvr_datablock(csd, 16))                /* Read partial block */
1a005b7a:	2110      	movs	r1, #16
1a005b7c:	4668      	mov	r0, sp
1a005b7e:	f7ff fdbd 	bl	1a0056fc <rcvr_datablock>
1a005b82:	2800      	cmp	r0, #0
1a005b84:	f000 80b5 	beq.w	1a005cf2 <FSSDC_FatFs_DiskIoCtl+0x29e>
						for (n = 64 - 16; n; n--) 
1a005b88:	2430      	movs	r4, #48	; 0x30
1a005b8a:	e003      	b.n	1a005b94 <FSSDC_FatFs_DiskIoCtl+0x140>
                            rcvr_spi();                         /* Purge trailing data */
1a005b8c:	f7ff fd08 	bl	1a0055a0 <rcvr_spi>
						for (n = 64 - 16; n; n--) 
1a005b90:	3c01      	subs	r4, #1
1a005b92:	b2e4      	uxtb	r4, r4
1a005b94:	2c00      	cmp	r4, #0
1a005b96:	d1f9      	bne.n	1a005b8c <FSSDC_FatFs_DiskIoCtl+0x138>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
1a005b98:	f89d 300a 	ldrb.w	r3, [sp, #10]
1a005b9c:	091a      	lsrs	r2, r3, #4
1a005b9e:	2310      	movs	r3, #16
1a005ba0:	4093      	lsls	r3, r2
1a005ba2:	602b      	str	r3, [r5, #0]
		deselect();
1a005ba4:	f7ff fd1c 	bl	1a0055e0 <deselect>
1a005ba8:	e0bb      	b.n	1a005d22 <FSSDC_FatFs_DiskIoCtl+0x2ce>
				if ((send_cmd(CMD9, 0) == 0) 
1a005baa:	2100      	movs	r1, #0
1a005bac:	2049      	movs	r0, #73	; 0x49
1a005bae:	f7ff fd35 	bl	1a00561c <send_cmd>
1a005bb2:	2800      	cmp	r0, #0
1a005bb4:	f040 80a9 	bne.w	1a005d0a <FSSDC_FatFs_DiskIoCtl+0x2b6>
                        && rcvr_datablock(csd, 16)) 
1a005bb8:	2110      	movs	r1, #16
1a005bba:	4668      	mov	r0, sp
1a005bbc:	f7ff fd9e 	bl	1a0056fc <rcvr_datablock>
1a005bc0:	2800      	cmp	r0, #0
1a005bc2:	f000 808e 	beq.w	1a005ce2 <FSSDC_FatFs_DiskIoCtl+0x28e>
					if (CardType & CT_SD1)
1a005bc6:	4b5b      	ldr	r3, [pc, #364]	; (1a005d34 <FSSDC_FatFs_DiskIoCtl+0x2e0>)
1a005bc8:	781b      	ldrb	r3, [r3, #0]
1a005bca:	f013 0f02 	tst.w	r3, #2
1a005bce:	d013      	beq.n	1a005bf8 <FSSDC_FatFs_DiskIoCtl+0x1a4>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
1a005bd0:	f89d 300a 	ldrb.w	r3, [sp, #10]
1a005bd4:	005b      	lsls	r3, r3, #1
1a005bd6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
1a005bda:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a005bde:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
1a005be2:	3301      	adds	r3, #1
1a005be4:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a005be8:	0992      	lsrs	r2, r2, #6
1a005bea:	3a01      	subs	r2, #1
1a005bec:	4093      	lsls	r3, r2
1a005bee:	602b      	str	r3, [r5, #0]
		deselect();
1a005bf0:	f7ff fcf6 	bl	1a0055e0 <deselect>
					res = RES_OK;
1a005bf4:	2400      	movs	r4, #0
1a005bf6:	e094      	b.n	1a005d22 <FSSDC_FatFs_DiskIoCtl+0x2ce>
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
1a005bf8:	f89d 300a 	ldrb.w	r3, [sp, #10]
1a005bfc:	f3c3 0284 	ubfx	r2, r3, #2, #5
1a005c00:	f89d 100b 	ldrb.w	r1, [sp, #11]
1a005c04:	00cb      	lsls	r3, r1, #3
1a005c06:	f003 0318 	and.w	r3, r3, #24
1a005c0a:	eb03 1351 	add.w	r3, r3, r1, lsr #5
1a005c0e:	3301      	adds	r3, #1
1a005c10:	fb02 3303 	mla	r3, r2, r3, r3
1a005c14:	602b      	str	r3, [r5, #0]
1a005c16:	e7eb      	b.n	1a005bf0 <FSSDC_FatFs_DiskIoCtl+0x19c>
			*ptr = CardType;
1a005c18:	4b46      	ldr	r3, [pc, #280]	; (1a005d34 <FSSDC_FatFs_DiskIoCtl+0x2e0>)
1a005c1a:	781b      	ldrb	r3, [r3, #0]
1a005c1c:	700b      	strb	r3, [r1, #0]
		deselect();
1a005c1e:	f7ff fcdf 	bl	1a0055e0 <deselect>
			res = RES_OK;
1a005c22:	2400      	movs	r4, #0
1a005c24:	e07d      	b.n	1a005d22 <FSSDC_FatFs_DiskIoCtl+0x2ce>
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
1a005c26:	2100      	movs	r1, #0
1a005c28:	2049      	movs	r0, #73	; 0x49
1a005c2a:	f7ff fcf7 	bl	1a00561c <send_cmd>
1a005c2e:	2800      	cmp	r0, #0
1a005c30:	d153      	bne.n	1a005cda <FSSDC_FatFs_DiskIoCtl+0x286>
                    && rcvr_datablock(ptr, 16))
1a005c32:	2110      	movs	r1, #16
1a005c34:	4628      	mov	r0, r5
1a005c36:	f7ff fd61 	bl	1a0056fc <rcvr_datablock>
1a005c3a:	2800      	cmp	r0, #0
1a005c3c:	d149      	bne.n	1a005cd2 <FSSDC_FatFs_DiskIoCtl+0x27e>
		deselect();
1a005c3e:	f7ff fccf 	bl	1a0055e0 <deselect>
	res = RES_ERROR;
1a005c42:	2401      	movs	r4, #1
1a005c44:	e06a      	b.n	1a005d1c <FSSDC_FatFs_DiskIoCtl+0x2c8>
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
1a005c46:	2100      	movs	r1, #0
1a005c48:	204a      	movs	r0, #74	; 0x4a
1a005c4a:	f7ff fce7 	bl	1a00561c <send_cmd>
1a005c4e:	bbe0      	cbnz	r0, 1a005cca <FSSDC_FatFs_DiskIoCtl+0x276>
                    && rcvr_datablock(ptr, 16))
1a005c50:	2110      	movs	r1, #16
1a005c52:	4628      	mov	r0, r5
1a005c54:	f7ff fd52 	bl	1a0056fc <rcvr_datablock>
1a005c58:	bb98      	cbnz	r0, 1a005cc2 <FSSDC_FatFs_DiskIoCtl+0x26e>
		deselect();
1a005c5a:	f7ff fcc1 	bl	1a0055e0 <deselect>
	res = RES_ERROR;
1a005c5e:	2401      	movs	r4, #1
1a005c60:	e05c      	b.n	1a005d1c <FSSDC_FatFs_DiskIoCtl+0x2c8>
			if (send_cmd(CMD58, 0) == 0) 
1a005c62:	2100      	movs	r1, #0
1a005c64:	207a      	movs	r0, #122	; 0x7a
1a005c66:	f7ff fcd9 	bl	1a00561c <send_cmd>
1a005c6a:	bb30      	cbnz	r0, 1a005cba <FSSDC_FatFs_DiskIoCtl+0x266>
				for (n = 4; n; n--) 
1a005c6c:	2404      	movs	r4, #4
1a005c6e:	e006      	b.n	1a005c7e <FSSDC_FatFs_DiskIoCtl+0x22a>
                    *ptr++ = rcvr_spi();
1a005c70:	1c6e      	adds	r6, r5, #1
1a005c72:	f7ff fc95 	bl	1a0055a0 <rcvr_spi>
1a005c76:	7028      	strb	r0, [r5, #0]
				for (n = 4; n; n--) 
1a005c78:	3c01      	subs	r4, #1
1a005c7a:	b2e4      	uxtb	r4, r4
                    *ptr++ = rcvr_spi();
1a005c7c:	4635      	mov	r5, r6
				for (n = 4; n; n--) 
1a005c7e:	2c00      	cmp	r4, #0
1a005c80:	d1f6      	bne.n	1a005c70 <FSSDC_FatFs_DiskIoCtl+0x21c>
		deselect();
1a005c82:	f7ff fcad 	bl	1a0055e0 <deselect>
				res = RES_OK;
1a005c86:	2400      	movs	r4, #0
1a005c88:	e04b      	b.n	1a005d22 <FSSDC_FatFs_DiskIoCtl+0x2ce>
			if (send_cmd(ACMD13, 0) == 0) 
1a005c8a:	2100      	movs	r1, #0
1a005c8c:	20cd      	movs	r0, #205	; 0xcd
1a005c8e:	f7ff fcc5 	bl	1a00561c <send_cmd>
1a005c92:	b970      	cbnz	r0, 1a005cb2 <FSSDC_FatFs_DiskIoCtl+0x25e>
				rcvr_spi();
1a005c94:	f7ff fc84 	bl	1a0055a0 <rcvr_spi>
				if (rcvr_datablock(ptr, 64))
1a005c98:	2140      	movs	r1, #64	; 0x40
1a005c9a:	4628      	mov	r0, r5
1a005c9c:	f7ff fd2e 	bl	1a0056fc <rcvr_datablock>
1a005ca0:	b918      	cbnz	r0, 1a005caa <FSSDC_FatFs_DiskIoCtl+0x256>
		deselect();
1a005ca2:	f7ff fc9d 	bl	1a0055e0 <deselect>
	res = RES_ERROR;
1a005ca6:	2401      	movs	r4, #1
1a005ca8:	e038      	b.n	1a005d1c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a005caa:	f7ff fc99 	bl	1a0055e0 <deselect>
					res = RES_OK;
1a005cae:	2400      	movs	r4, #0
1a005cb0:	e037      	b.n	1a005d22 <FSSDC_FatFs_DiskIoCtl+0x2ce>
		deselect();
1a005cb2:	f7ff fc95 	bl	1a0055e0 <deselect>
	res = RES_ERROR;
1a005cb6:	2401      	movs	r4, #1
1a005cb8:	e030      	b.n	1a005d1c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a005cba:	f7ff fc91 	bl	1a0055e0 <deselect>
	res = RES_ERROR;
1a005cbe:	2401      	movs	r4, #1
1a005cc0:	e02c      	b.n	1a005d1c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a005cc2:	f7ff fc8d 	bl	1a0055e0 <deselect>
				res = RES_OK;
1a005cc6:	2400      	movs	r4, #0
1a005cc8:	e02b      	b.n	1a005d22 <FSSDC_FatFs_DiskIoCtl+0x2ce>
		deselect();
1a005cca:	f7ff fc89 	bl	1a0055e0 <deselect>
	res = RES_ERROR;
1a005cce:	2401      	movs	r4, #1
1a005cd0:	e024      	b.n	1a005d1c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a005cd2:	f7ff fc85 	bl	1a0055e0 <deselect>
				res = RES_OK;
1a005cd6:	2400      	movs	r4, #0
1a005cd8:	e023      	b.n	1a005d22 <FSSDC_FatFs_DiskIoCtl+0x2ce>
		deselect();
1a005cda:	f7ff fc81 	bl	1a0055e0 <deselect>
	res = RES_ERROR;
1a005cde:	2401      	movs	r4, #1
1a005ce0:	e01c      	b.n	1a005d1c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a005ce2:	f7ff fc7d 	bl	1a0055e0 <deselect>
	res = RES_ERROR;
1a005ce6:	2401      	movs	r4, #1
1a005ce8:	e018      	b.n	1a005d1c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a005cea:	f7ff fc79 	bl	1a0055e0 <deselect>
	res = RES_ERROR;
1a005cee:	2401      	movs	r4, #1
1a005cf0:	e014      	b.n	1a005d1c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a005cf2:	f7ff fc75 	bl	1a0055e0 <deselect>
	res = RES_ERROR;
1a005cf6:	2401      	movs	r4, #1
1a005cf8:	e010      	b.n	1a005d1c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a005cfa:	f7ff fc71 	bl	1a0055e0 <deselect>
	res = RES_ERROR;
1a005cfe:	2401      	movs	r4, #1
1a005d00:	e00c      	b.n	1a005d1c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a005d02:	f7ff fc6d 	bl	1a0055e0 <deselect>
			res = RES_PARERR;
1a005d06:	2404      	movs	r4, #4
1a005d08:	e008      	b.n	1a005d1c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a005d0a:	f7ff fc69 	bl	1a0055e0 <deselect>
	res = RES_ERROR;
1a005d0e:	2401      	movs	r4, #1
1a005d10:	e004      	b.n	1a005d1c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a005d12:	f7ff fc65 	bl	1a0055e0 <deselect>
	res = RES_ERROR;
1a005d16:	2401      	movs	r4, #1
1a005d18:	e000      	b.n	1a005d1c <FSSDC_FatFs_DiskIoCtl+0x2c8>
			res = RES_PARERR;
1a005d1a:	2404      	movs	r4, #4
	}
    
    if (res != RES_OK)
    {
        Board_UARTPutSTR ("FSSDC: [IOCtl] Returning Error.\r\n");        
1a005d1c:	4806      	ldr	r0, [pc, #24]	; (1a005d38 <FSSDC_FatFs_DiskIoCtl+0x2e4>)
1a005d1e:	f000 f957 	bl	1a005fd0 <Board_UARTPutSTR>
    }

	return res;
}
1a005d22:	4620      	mov	r0, r4
1a005d24:	b004      	add	sp, #16
1a005d26:	bd70      	pop	{r4, r5, r6, pc}
			res = RES_OK;
1a005d28:	2400      	movs	r4, #0
1a005d2a:	e7fa      	b.n	1a005d22 <FSSDC_FatFs_DiskIoCtl+0x2ce>
1a005d2c:	1000000d 	.word	0x1000000d
1a005d30:	1a00854c 	.word	0x1a00854c
1a005d34:	10003480 	.word	0x10003480
1a005d38:	1a008574 	.word	0x1a008574

1a005d3c <FSSDC_InitSPI>:
    WARNING: for card connectors without presence detection
    >>>> Only call this function when the card is inserted!
--------------------------------------------------------------------------------
*/
void FSSDC_InitSPI ()
{
1a005d3c:	b510      	push	{r4, lr}
        seems to work at mode 0 at the SPI mode. Thus the SPI mode 0 (CPHA=0, CPOL=0)
        is the proper setting to control MMC/SDC
        
        http://elm-chan.org/docs/mmc/mmc_e.html#spimode
    */
    Chip_SSP_Init       (LPC_SSP1);
1a005d3e:	4c13      	ldr	r4, [pc, #76]	; (1a005d8c <FSSDC_InitSPI+0x50>)
1a005d40:	4620      	mov	r0, r4
1a005d42:	f000 ff7b 	bl	1a006c3c <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a005d46:	6863      	ldr	r3, [r4, #4]
1a005d48:	f023 0304 	bic.w	r3, r3, #4
1a005d4c:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a005d4e:	6823      	ldr	r3, [r4, #0]
1a005d50:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a005d54:	f043 0307 	orr.w	r3, r3, #7
1a005d58:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode   (LPC_SSP1, SSP_MODE_MASTER);
    Chip_SSP_SetFormat  (LPC_SSP1, SSP_BITS_8, SSP_FRAMEFORMAT_SPI,
                         SSP_CLOCK_CPHA0_CPOL0);
    FCLK_SLOW           ();
1a005d5a:	4b0d      	ldr	r3, [pc, #52]	; (1a005d90 <FSSDC_InitSPI+0x54>)
1a005d5c:	6819      	ldr	r1, [r3, #0]
1a005d5e:	4620      	mov	r0, r4
1a005d60:	f000 ff4c 	bl	1a006bfc <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a005d64:	6863      	ldr	r3, [r4, #4]
1a005d66:	f043 0302 	orr.w	r3, r3, #2
1a005d6a:	6063      	str	r3, [r4, #4]
    Chip_SSP_Enable     (LPC_SSP1);
    
    // PLEASE NOTE: muxing and direction of CS signal on FSSDC_CS_{PIN/PORT}
    //              must be configured beforehand!
    deselect ();    
1a005d6c:	f7ff fc38 	bl	1a0055e0 <deselect>
    
#ifndef FSSDC_SUPPORTS_HOT_INSERTION
    g_diskStats &= ~STA_NODISK;
1a005d70:	4a08      	ldr	r2, [pc, #32]	; (1a005d94 <FSSDC_InitSPI+0x58>)
1a005d72:	7813      	ldrb	r3, [r2, #0]
1a005d74:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
1a005d78:	7013      	strb	r3, [r2, #0]
    Board_UARTPutSTR ("FSSDC: [InitSPI] New card status: Inserted.\r\n");
1a005d7a:	4807      	ldr	r0, [pc, #28]	; (1a005d98 <FSSDC_InitSPI+0x5c>)
1a005d7c:	f000 f928 	bl	1a005fd0 <Board_UARTPutSTR>
    newCardStatus (FSSDC_CardStatus_Inserted);
1a005d80:	2002      	movs	r0, #2
1a005d82:	f7ff fbcf 	bl	1a005524 <newCardStatus>
    FSSDC_FatFs_DiskInitialize ();
1a005d86:	f7ff fcef 	bl	1a005768 <FSSDC_FatFs_DiskInitialize>
#endif
}
1a005d8a:	bd10      	pop	{r4, pc}
1a005d8c:	400c5000 	.word	0x400c5000
1a005d90:	10000014 	.word	0x10000014
1a005d94:	1000000d 	.word	0x1000000d
1a005d98:	1a008614 	.word	0x1a008614

1a005d9c <get_fattime>:


// Definitions required by FatFs according to ffconf.h
#if !FF_FS_READONLY && !FF_FS_NORTC
DWORD get_fattime (void)
{
1a005d9c:	b500      	push	{lr}
1a005d9e:	b089      	sub	sp, #36	; 0x24
	/* Get local time */
    RTC_TIME_T rtcTime;
	Chip_RTC_GetFullTime (LPC_RTC, &rtcTime);
1a005da0:	4669      	mov	r1, sp
1a005da2:	480c      	ldr	r0, [pc, #48]	; (1a005dd4 <get_fattime+0x38>)
1a005da4:	f000 fe44 	bl	1a006a30 <Chip_RTC_GetFullTime>

	/* Pack date and time into a DWORD variable */
	return (  (DWORD) (rtcTime.time[RTC_TIMETYPE_YEAR] - 1980)  << 25)
1a005da8:	9b07      	ldr	r3, [sp, #28]
1a005daa:	f2a3 70bc 	subw	r0, r3, #1980	; 0x7bc
		   | ((DWORD)  rtcTime.time[RTC_TIMETYPE_MONTH]         << 21)
1a005dae:	9b06      	ldr	r3, [sp, #24]
1a005db0:	055b      	lsls	r3, r3, #21
1a005db2:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
		   | ((DWORD)  rtcTime.time[RTC_TIMETYPE_DAYOFMONTH]    << 16)
1a005db6:	9803      	ldr	r0, [sp, #12]
1a005db8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
		   | ((DWORD)  rtcTime.time[RTC_TIMETYPE_HOUR]          << 11)
1a005dbc:	9802      	ldr	r0, [sp, #8]
1a005dbe:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
		   | ((DWORD)  rtcTime.time[RTC_TIMETYPE_MINUTE]        << 5)
1a005dc2:	9801      	ldr	r0, [sp, #4]
1a005dc4:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
		   | ((DWORD)  rtcTime.time[RTC_TIMETYPE_SECOND]        >> 1);
}
1a005dc8:	9800      	ldr	r0, [sp, #0]
1a005dca:	ea43 0050 	orr.w	r0, r3, r0, lsr #1
1a005dce:	b009      	add	sp, #36	; 0x24
1a005dd0:	f85d fb04 	ldr.w	pc, [sp], #4
1a005dd4:	40046000 	.word	0x40046000

1a005dd8 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{    
    switch (pdrv)
1a005dd8:	b108      	cbz	r0, 1a005dde <disk_status+0x6>
            #else
            break;
            #endif
    }

    return STA_NOINIT;
1a005dda:	2001      	movs	r0, #1
}
1a005ddc:	4770      	bx	lr
{    
1a005dde:	b508      	push	{r3, lr}
            return FSSDC_FatFs_DiskStatus ();
1a005de0:	f7ff fcbc 	bl	1a00575c <FSSDC_FatFs_DiskStatus>
}
1a005de4:	bd08      	pop	{r3, pc}

1a005de6 <disk_initialize>:

DSTATUS disk_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv)
1a005de6:	b108      	cbz	r0, 1a005dec <disk_initialize+0x6>
            #else
            break;
            #endif
    }
    
    return STA_NOINIT;
1a005de8:	2001      	movs	r0, #1
}
1a005dea:	4770      	bx	lr
{
1a005dec:	b508      	push	{r3, lr}
            return FSSDC_FatFs_DiskInitialize ();
1a005dee:	f7ff fcbb 	bl	1a005768 <FSSDC_FatFs_DiskInitialize>
}
1a005df2:	bd08      	pop	{r3, pc}

1a005df4 <disk_read>:
	BYTE *buff,         /* Data buffer to store read data */
	DWORD sector,       /* Start sector in LBA */
	UINT count          /* Number of sectors to read */
)
{
	if (!buff || !count) 
1a005df4:	b141      	cbz	r1, 1a005e08 <disk_read+0x14>
{
1a005df6:	b510      	push	{r4, lr}
	if (!buff || !count) 
1a005df8:	b143      	cbz	r3, 1a005e0c <disk_read+0x18>
    {
		return RES_PARERR;
	}
    
    switch (pdrv)
1a005dfa:	b948      	cbnz	r0, 1a005e10 <disk_read+0x1c>
1a005dfc:	4608      	mov	r0, r1
1a005dfe:	4611      	mov	r1, r2
    {
        case FATFS_DISK_DRIVE_FSSDC:
            return FSSDC_FatFs_DiskRead (buff, sector, count);
1a005e00:	461a      	mov	r2, r3
1a005e02:	f7ff fd8b 	bl	1a00591c <FSSDC_FatFs_DiskRead>
            break;
            #endif
    }
    
    return RES_PARERR;
}
1a005e06:	bd10      	pop	{r4, pc}
		return RES_PARERR;
1a005e08:	2004      	movs	r0, #4
}
1a005e0a:	4770      	bx	lr
		return RES_PARERR;
1a005e0c:	2004      	movs	r0, #4
1a005e0e:	e7fa      	b.n	1a005e06 <disk_read+0x12>
    return RES_PARERR;
1a005e10:	2004      	movs	r0, #4
1a005e12:	e7f8      	b.n	1a005e06 <disk_read+0x12>

1a005e14 <disk_write>:
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
	if (!buff || !count)
1a005e14:	b141      	cbz	r1, 1a005e28 <disk_write+0x14>
{
1a005e16:	b510      	push	{r4, lr}
	if (!buff || !count)
1a005e18:	b143      	cbz	r3, 1a005e2c <disk_write+0x18>
    {
		return RES_PARERR;
	}
    
    switch (pdrv)
1a005e1a:	b948      	cbnz	r0, 1a005e30 <disk_write+0x1c>
1a005e1c:	4608      	mov	r0, r1
1a005e1e:	4611      	mov	r1, r2
    {
        case FATFS_DISK_DRIVE_FSSDC:
            return FSSDC_FatFs_DiskWrite (buff, sector, count);
1a005e20:	461a      	mov	r2, r3
1a005e22:	f7ff fdbd 	bl	1a0059a0 <FSSDC_FatFs_DiskWrite>
            break;
            #endif
    }
    
	return RES_PARERR;
}
1a005e26:	bd10      	pop	{r4, pc}
		return RES_PARERR;
1a005e28:	2004      	movs	r0, #4
}
1a005e2a:	4770      	bx	lr
		return RES_PARERR;
1a005e2c:	2004      	movs	r0, #4
1a005e2e:	e7fa      	b.n	1a005e26 <disk_write+0x12>
	return RES_PARERR;
1a005e30:	2004      	movs	r0, #4
1a005e32:	e7f8      	b.n	1a005e26 <disk_write+0x12>

1a005e34 <disk_ioctl>:
	BYTE pdrv,          /* Physical drive nmuber (0..) */
	BYTE cmd,           /* Control code */
	void *buff          /* Buffer to send/receive control data */
)
{   
    switch (pdrv)
1a005e34:	b928      	cbnz	r0, 1a005e42 <disk_ioctl+0xe>
{   
1a005e36:	b508      	push	{r3, lr}
1a005e38:	4608      	mov	r0, r1
    {
        case FATFS_DISK_DRIVE_FSSDC:
            return FSSDC_FatFs_DiskIoCtl (cmd, buff);
1a005e3a:	4611      	mov	r1, r2
1a005e3c:	f7ff fe0a 	bl	1a005a54 <FSSDC_FatFs_DiskIoCtl>
            break;
            #endif
    }

	return RES_PARERR;
}
1a005e40:	bd08      	pop	{r3, pc}
	return RES_PARERR;
1a005e42:	2004      	movs	r0, #4
}
1a005e44:	4770      	bx	lr
1a005e46:	Address 0x000000001a005e46 is out of bounds.


1a005e48 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a005e48:	2200      	movs	r2, #0
1a005e4a:	2a05      	cmp	r2, #5
1a005e4c:	d819      	bhi.n	1a005e82 <Board_LED_Init+0x3a>
{
1a005e4e:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a005e50:	490c      	ldr	r1, [pc, #48]	; (1a005e84 <Board_LED_Init+0x3c>)
1a005e52:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a005e56:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a005e5a:	784c      	ldrb	r4, [r1, #1]
	pGPIO->DIR[port] |= 1UL << pin;
1a005e5c:	4b0a      	ldr	r3, [pc, #40]	; (1a005e88 <Board_LED_Init+0x40>)
1a005e5e:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a005e62:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a005e66:	2001      	movs	r0, #1
1a005e68:	40a0      	lsls	r0, r4
1a005e6a:	4301      	orrs	r1, r0
1a005e6c:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a005e70:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a005e74:	2100      	movs	r1, #0
1a005e76:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a005e78:	3201      	adds	r2, #1
1a005e7a:	2a05      	cmp	r2, #5
1a005e7c:	d9e8      	bls.n	1a005e50 <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a005e7e:	bc70      	pop	{r4, r5, r6}
1a005e80:	4770      	bx	lr
1a005e82:	4770      	bx	lr
1a005e84:	1a008650 	.word	0x1a008650
1a005e88:	400f4000 	.word	0x400f4000

1a005e8c <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a005e8c:	2300      	movs	r3, #0
1a005e8e:	2b03      	cmp	r3, #3
1a005e90:	d816      	bhi.n	1a005ec0 <Board_TEC_Init+0x34>
{
1a005e92:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a005e94:	490b      	ldr	r1, [pc, #44]	; (1a005ec4 <Board_TEC_Init+0x38>)
1a005e96:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a005e9a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a005e9e:	784d      	ldrb	r5, [r1, #1]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a005ea0:	4c09      	ldr	r4, [pc, #36]	; (1a005ec8 <Board_TEC_Init+0x3c>)
1a005ea2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a005ea6:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a005eaa:	2001      	movs	r0, #1
1a005eac:	40a8      	lsls	r0, r5
1a005eae:	ea21 0100 	bic.w	r1, r1, r0
1a005eb2:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a005eb6:	3301      	adds	r3, #1
1a005eb8:	2b03      	cmp	r3, #3
1a005eba:	d9eb      	bls.n	1a005e94 <Board_TEC_Init+0x8>
    }
}
1a005ebc:	bc30      	pop	{r4, r5}
1a005ebe:	4770      	bx	lr
1a005ec0:	4770      	bx	lr
1a005ec2:	bf00      	nop
1a005ec4:	1a008648 	.word	0x1a008648
1a005ec8:	400f4000 	.word	0x400f4000

1a005ecc <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a005ecc:	2300      	movs	r3, #0
1a005ece:	2b08      	cmp	r3, #8
1a005ed0:	d816      	bhi.n	1a005f00 <Board_GPIO_Init+0x34>
{
1a005ed2:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a005ed4:	490b      	ldr	r1, [pc, #44]	; (1a005f04 <Board_GPIO_Init+0x38>)
1a005ed6:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a005eda:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a005ede:	784d      	ldrb	r5, [r1, #1]
1a005ee0:	4c09      	ldr	r4, [pc, #36]	; (1a005f08 <Board_GPIO_Init+0x3c>)
1a005ee2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a005ee6:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a005eea:	2001      	movs	r0, #1
1a005eec:	40a8      	lsls	r0, r5
1a005eee:	ea21 0100 	bic.w	r1, r1, r0
1a005ef2:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a005ef6:	3301      	adds	r3, #1
1a005ef8:	2b08      	cmp	r3, #8
1a005efa:	d9eb      	bls.n	1a005ed4 <Board_GPIO_Init+0x8>
    }
}
1a005efc:	bc30      	pop	{r4, r5}
1a005efe:	4770      	bx	lr
1a005f00:	4770      	bx	lr
1a005f02:	bf00      	nop
1a005f04:	1a00865c 	.word	0x1a00865c
1a005f08:	400f4000 	.word	0x400f4000

1a005f0c <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a005f0c:	b510      	push	{r4, lr}
1a005f0e:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a005f10:	4c08      	ldr	r4, [pc, #32]	; (1a005f34 <Board_ADC_Init+0x28>)
1a005f12:	4669      	mov	r1, sp
1a005f14:	4620      	mov	r0, r4
1a005f16:	f000 f9cf 	bl	1a0062b8 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a005f1a:	4a07      	ldr	r2, [pc, #28]	; (1a005f38 <Board_ADC_Init+0x2c>)
1a005f1c:	4669      	mov	r1, sp
1a005f1e:	4620      	mov	r0, r4
1a005f20:	f000 f9ea 	bl	1a0062f8 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a005f24:	2200      	movs	r2, #0
1a005f26:	4669      	mov	r1, sp
1a005f28:	4620      	mov	r0, r4
1a005f2a:	f000 f9fe 	bl	1a00632a <Chip_ADC_SetResolution>
}
1a005f2e:	b002      	add	sp, #8
1a005f30:	bd10      	pop	{r4, pc}
1a005f32:	bf00      	nop
1a005f34:	400e3000 	.word	0x400e3000
1a005f38:	00061a80 	.word	0x00061a80

1a005f3c <Board_SPI_Init>:
{
1a005f3c:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a005f3e:	4c0b      	ldr	r4, [pc, #44]	; (1a005f6c <Board_SPI_Init+0x30>)
1a005f40:	4620      	mov	r0, r4
1a005f42:	f000 fe7b 	bl	1a006c3c <Chip_SSP_Init>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a005f46:	6863      	ldr	r3, [r4, #4]
1a005f48:	f023 0304 	bic.w	r3, r3, #4
1a005f4c:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a005f4e:	6823      	ldr	r3, [r4, #0]
1a005f50:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a005f54:	f043 0307 	orr.w	r3, r3, #7
1a005f58:	6023      	str	r3, [r4, #0]
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a005f5a:	4905      	ldr	r1, [pc, #20]	; (1a005f70 <Board_SPI_Init+0x34>)
1a005f5c:	4620      	mov	r0, r4
1a005f5e:	f000 fe4d 	bl	1a006bfc <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a005f62:	6863      	ldr	r3, [r4, #4]
1a005f64:	f043 0302 	orr.w	r3, r3, #2
1a005f68:	6063      	str	r3, [r4, #4]
}
1a005f6a:	bd10      	pop	{r4, pc}
1a005f6c:	400c5000 	.word	0x400c5000
1a005f70:	000186a0 	.word	0x000186a0

1a005f74 <Board_I2C_Init>:
{
1a005f74:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a005f76:	2000      	movs	r0, #0
1a005f78:	f000 fe8c 	bl	1a006c94 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a005f7c:	4b04      	ldr	r3, [pc, #16]	; (1a005f90 <Board_I2C_Init+0x1c>)
1a005f7e:	f640 0208 	movw	r2, #2056	; 0x808
1a005f82:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a005f86:	4903      	ldr	r1, [pc, #12]	; (1a005f94 <Board_I2C_Init+0x20>)
1a005f88:	2000      	movs	r0, #0
1a005f8a:	f000 fe95 	bl	1a006cb8 <Chip_I2C_SetClockRate>
}
1a005f8e:	bd08      	pop	{r3, pc}
1a005f90:	40086000 	.word	0x40086000
1a005f94:	000f4240 	.word	0x000f4240

1a005f98 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a005f98:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a005f9a:	4c07      	ldr	r4, [pc, #28]	; (1a005fb8 <Board_Debug_Init+0x20>)
1a005f9c:	4620      	mov	r0, r4
1a005f9e:	f000 f8a9 	bl	1a0060f4 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a005fa2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a005fa6:	4620      	mov	r0, r4
1a005fa8:	f000 f8ee 	bl	1a006188 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a005fac:	2303      	movs	r3, #3
1a005fae:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a005fb0:	2301      	movs	r3, #1
1a005fb2:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a005fb4:	bd10      	pop	{r4, pc}
1a005fb6:	bf00      	nop
1a005fb8:	400c1000 	.word	0x400c1000

1a005fbc <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a005fbc:	4b03      	ldr	r3, [pc, #12]	; (1a005fcc <Board_UARTPutChar+0x10>)
1a005fbe:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
    while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a005fc0:	f013 0f20 	tst.w	r3, #32
1a005fc4:	d0fa      	beq.n	1a005fbc <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a005fc6:	4b01      	ldr	r3, [pc, #4]	; (1a005fcc <Board_UARTPutChar+0x10>)
1a005fc8:	6018      	str	r0, [r3, #0]
    Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a005fca:	4770      	bx	lr
1a005fcc:	400c1000 	.word	0x400c1000

1a005fd0 <Board_UARTPutSTR>:
    return EOF;
}


void Board_UARTPutSTR(const char *str)
{
1a005fd0:	b510      	push	{r4, lr}
1a005fd2:	4604      	mov	r4, r0
    while (*str != '\0') {
1a005fd4:	e002      	b.n	1a005fdc <Board_UARTPutSTR+0xc>
        Board_UARTPutChar(*str++);
1a005fd6:	3401      	adds	r4, #1
1a005fd8:	f7ff fff0 	bl	1a005fbc <Board_UARTPutChar>
    while (*str != '\0') {
1a005fdc:	7820      	ldrb	r0, [r4, #0]
1a005fde:	2800      	cmp	r0, #0
1a005fe0:	d1f9      	bne.n	1a005fd6 <Board_UARTPutSTR+0x6>
    }
}
1a005fe2:	bd10      	pop	{r4, pc}

1a005fe4 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a005fe4:	b508      	push	{r3, lr}
   DEBUGINIT();
1a005fe6:	f7ff ffd7 	bl	1a005f98 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a005fea:	4808      	ldr	r0, [pc, #32]	; (1a00600c <Board_Init+0x28>)
1a005fec:	f000 fd37 	bl	1a006a5e <Chip_GPIO_Init>
   
   Board_GPIO_Init();
1a005ff0:	f7ff ff6c 	bl	1a005ecc <Board_GPIO_Init>
   Board_ADC_Init();
1a005ff4:	f7ff ff8a 	bl	1a005f0c <Board_ADC_Init>
   Board_SPI_Init();
1a005ff8:	f7ff ffa0 	bl	1a005f3c <Board_SPI_Init>
   Board_I2C_Init();
1a005ffc:	f7ff ffba 	bl	1a005f74 <Board_I2C_Init>

   Board_LED_Init();
1a006000:	f7ff ff22 	bl	1a005e48 <Board_LED_Init>
   Board_TEC_Init();
1a006004:	f7ff ff42 	bl	1a005e8c <Board_TEC_Init>

   #ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
   #endif
}
1a006008:	bd08      	pop	{r3, pc}
1a00600a:	bf00      	nop
1a00600c:	400f4000 	.word	0x400f4000

1a006010 <__stdio_init>:

int __stdio_getchar() {
   return Board_UARTGetChar();;
}

void __stdio_init() {
1a006010:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a006012:	f7ff ffc1 	bl	1a005f98 <Board_Debug_Init>
1a006016:	bd08      	pop	{r3, pc}

1a006018 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a006018:	2300      	movs	r3, #0
1a00601a:	2b1c      	cmp	r3, #28
1a00601c:	d812      	bhi.n	1a006044 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a00601e:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a006020:	4a09      	ldr	r2, [pc, #36]	; (1a006048 <Board_SetupMuxing+0x30>)
1a006022:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a006026:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a00602a:	784a      	ldrb	r2, [r1, #1]
1a00602c:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00602e:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a006032:	4906      	ldr	r1, [pc, #24]	; (1a00604c <Board_SetupMuxing+0x34>)
1a006034:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a006038:	3301      	adds	r3, #1
1a00603a:	2b1c      	cmp	r3, #28
1a00603c:	d9f0      	bls.n	1a006020 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a00603e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a006042:	4770      	bx	lr
1a006044:	4770      	bx	lr
1a006046:	bf00      	nop
1a006048:	1a008678 	.word	0x1a008678
1a00604c:	40086000 	.word	0x40086000

1a006050 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a006050:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a006052:	4a17      	ldr	r2, [pc, #92]	; (1a0060b0 <Board_SetupClocking+0x60>)
1a006054:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a006058:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a00605c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a006060:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a006064:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a006068:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a00606c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a006070:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a006074:	2201      	movs	r2, #1
1a006076:	490f      	ldr	r1, [pc, #60]	; (1a0060b4 <Board_SetupClocking+0x64>)
1a006078:	2006      	movs	r0, #6
1a00607a:	f000 fc2f 	bl	1a0068dc <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00607e:	2400      	movs	r4, #0
1a006080:	b14c      	cbz	r4, 1a006096 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a006082:	4b0b      	ldr	r3, [pc, #44]	; (1a0060b0 <Board_SetupClocking+0x60>)
1a006084:	685a      	ldr	r2, [r3, #4]
1a006086:	f022 020c 	bic.w	r2, r2, #12
1a00608a:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a00608c:	685a      	ldr	r2, [r3, #4]
1a00608e:	f042 0203 	orr.w	r2, r2, #3
1a006092:	605a      	str	r2, [r3, #4]
}
1a006094:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a006096:	4808      	ldr	r0, [pc, #32]	; (1a0060b8 <Board_SetupClocking+0x68>)
1a006098:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00609c:	2301      	movs	r3, #1
1a00609e:	788a      	ldrb	r2, [r1, #2]
1a0060a0:	7849      	ldrb	r1, [r1, #1]
1a0060a2:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0060a6:	f000 fb6b 	bl	1a006780 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0060aa:	3401      	adds	r4, #1
1a0060ac:	e7e8      	b.n	1a006080 <Board_SetupClocking+0x30>
1a0060ae:	bf00      	nop
1a0060b0:	40043000 	.word	0x40043000
1a0060b4:	0c28cb00 	.word	0x0c28cb00
1a0060b8:	1a008674 	.word	0x1a008674

1a0060bc <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0060bc:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0060be:	f7ff ffab 	bl	1a006018 <Board_SetupMuxing>
    Board_SetupClocking();
1a0060c2:	f7ff ffc5 	bl	1a006050 <Board_SetupClocking>
}
1a0060c6:	bd08      	pop	{r3, pc}

1a0060c8 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0060c8:	4b09      	ldr	r3, [pc, #36]	; (1a0060f0 <Chip_UART_GetIndex+0x28>)
1a0060ca:	4298      	cmp	r0, r3
1a0060cc:	d009      	beq.n	1a0060e2 <Chip_UART_GetIndex+0x1a>
1a0060ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0060d2:	4298      	cmp	r0, r3
1a0060d4:	d007      	beq.n	1a0060e6 <Chip_UART_GetIndex+0x1e>
1a0060d6:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0060da:	4298      	cmp	r0, r3
1a0060dc:	d005      	beq.n	1a0060ea <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a0060de:	2000      	movs	r0, #0
1a0060e0:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a0060e2:	2002      	movs	r0, #2
1a0060e4:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a0060e6:	2003      	movs	r0, #3
1a0060e8:	4770      	bx	lr
			return 1;
1a0060ea:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a0060ec:	4770      	bx	lr
1a0060ee:	bf00      	nop
1a0060f0:	400c1000 	.word	0x400c1000

1a0060f4 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0060f4:	b530      	push	{r4, r5, lr}
1a0060f6:	b083      	sub	sp, #12
1a0060f8:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0060fa:	f7ff ffe5 	bl	1a0060c8 <Chip_UART_GetIndex>
1a0060fe:	2301      	movs	r3, #1
1a006100:	461a      	mov	r2, r3
1a006102:	4619      	mov	r1, r3
1a006104:	4d0e      	ldr	r5, [pc, #56]	; (1a006140 <Chip_UART_Init+0x4c>)
1a006106:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a00610a:	f000 fb7f 	bl	1a00680c <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a00610e:	2307      	movs	r3, #7
1a006110:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a006112:	2300      	movs	r3, #0
1a006114:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a006116:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a006118:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a00611a:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a00611c:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a00611e:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a006120:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a006122:	4b08      	ldr	r3, [pc, #32]	; (1a006144 <Chip_UART_Init+0x50>)
1a006124:	429c      	cmp	r4, r3
1a006126:	d006      	beq.n	1a006136 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a006128:	2303      	movs	r3, #3
1a00612a:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a00612c:	2310      	movs	r3, #16
1a00612e:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a006130:	9b01      	ldr	r3, [sp, #4]
}
1a006132:	b003      	add	sp, #12
1a006134:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a006136:	2300      	movs	r3, #0
1a006138:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a00613a:	69a3      	ldr	r3, [r4, #24]
1a00613c:	9301      	str	r3, [sp, #4]
1a00613e:	e7f3      	b.n	1a006128 <Chip_UART_Init+0x34>
1a006140:	1a0086f4 	.word	0x1a0086f4
1a006144:	40082000 	.word	0x40082000

1a006148 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a006148:	b538      	push	{r3, r4, r5, lr}
1a00614a:	4605      	mov	r5, r0
1a00614c:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00614e:	f7ff ffbb 	bl	1a0060c8 <Chip_UART_GetIndex>
1a006152:	4b0c      	ldr	r3, [pc, #48]	; (1a006184 <Chip_UART_SetBaud+0x3c>)
1a006154:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a006158:	f000 fb90 	bl	1a00687c <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a00615c:	0123      	lsls	r3, r4, #4
1a00615e:	fbb0 f3f3 	udiv	r3, r0, r3
1a006162:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a006164:	68ea      	ldr	r2, [r5, #12]
1a006166:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a00616a:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a00616c:	6029      	str	r1, [r5, #0]
1a00616e:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a006172:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a006174:	68ea      	ldr	r2, [r5, #12]
1a006176:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a00617a:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a00617c:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a006180:	0900      	lsrs	r0, r0, #4
1a006182:	bd38      	pop	{r3, r4, r5, pc}
1a006184:	1a0086ec 	.word	0x1a0086ec

1a006188 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a006188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00618c:	b083      	sub	sp, #12
1a00618e:	4683      	mov	fp, r0
1a006190:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a006192:	f7ff ff99 	bl	1a0060c8 <Chip_UART_GetIndex>
1a006196:	4b35      	ldr	r3, [pc, #212]	; (1a00626c <Chip_UART_SetBaudFDR+0xe4>)
1a006198:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a00619c:	f000 fb6e 	bl	1a00687c <Chip_Clock_GetRate>
1a0061a0:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0061a2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0061a6:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0061a8:	2300      	movs	r3, #0
1a0061aa:	9301      	str	r3, [sp, #4]
1a0061ac:	46a2      	mov	sl, r4
1a0061ae:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0061b0:	e02a      	b.n	1a006208 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a0061b2:	4242      	negs	r2, r0
				div ++;
1a0061b4:	1c4b      	adds	r3, r1, #1
1a0061b6:	e017      	b.n	1a0061e8 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0061b8:	b30a      	cbz	r2, 1a0061fe <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a0061ba:	4617      	mov	r7, r2
			sd = d;
1a0061bc:	9501      	str	r5, [sp, #4]
			sm = m;
1a0061be:	46a2      	mov	sl, r4
			sdiv = div;
1a0061c0:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a0061c2:	3501      	adds	r5, #1
1a0061c4:	42ac      	cmp	r4, r5
1a0061c6:	d91e      	bls.n	1a006206 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0061c8:	0933      	lsrs	r3, r6, #4
1a0061ca:	0730      	lsls	r0, r6, #28
1a0061cc:	fba4 0100 	umull	r0, r1, r4, r0
1a0061d0:	fb04 1103 	mla	r1, r4, r3, r1
1a0061d4:	1962      	adds	r2, r4, r5
1a0061d6:	fb08 f202 	mul.w	r2, r8, r2
1a0061da:	2300      	movs	r3, #0
1a0061dc:	f001 f9ce 	bl	1a00757c <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a0061e0:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a0061e2:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a0061e4:	2800      	cmp	r0, #0
1a0061e6:	dbe4      	blt.n	1a0061b2 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0061e8:	4297      	cmp	r7, r2
1a0061ea:	d3ea      	bcc.n	1a0061c2 <Chip_UART_SetBaudFDR+0x3a>
1a0061ec:	2b00      	cmp	r3, #0
1a0061ee:	d0e8      	beq.n	1a0061c2 <Chip_UART_SetBaudFDR+0x3a>
1a0061f0:	0c19      	lsrs	r1, r3, #16
1a0061f2:	d1e6      	bne.n	1a0061c2 <Chip_UART_SetBaudFDR+0x3a>
1a0061f4:	2b02      	cmp	r3, #2
1a0061f6:	d8df      	bhi.n	1a0061b8 <Chip_UART_SetBaudFDR+0x30>
1a0061f8:	2d00      	cmp	r5, #0
1a0061fa:	d0dd      	beq.n	1a0061b8 <Chip_UART_SetBaudFDR+0x30>
1a0061fc:	e7e1      	b.n	1a0061c2 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a0061fe:	4617      	mov	r7, r2
			sd = d;
1a006200:	9501      	str	r5, [sp, #4]
			sm = m;
1a006202:	46a2      	mov	sl, r4
			sdiv = div;
1a006204:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a006206:	3401      	adds	r4, #1
1a006208:	b11f      	cbz	r7, 1a006212 <Chip_UART_SetBaudFDR+0x8a>
1a00620a:	2c0f      	cmp	r4, #15
1a00620c:	d801      	bhi.n	1a006212 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a00620e:	2500      	movs	r5, #0
1a006210:	e7d8      	b.n	1a0061c4 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a006212:	f1b9 0f00 	cmp.w	r9, #0
1a006216:	d024      	beq.n	1a006262 <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a006218:	f8db 300c 	ldr.w	r3, [fp, #12]
1a00621c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a006220:	f8cb 300c 	str.w	r3, [fp, #12]
1a006224:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a006228:	f8cb 3000 	str.w	r3, [fp]
1a00622c:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a006230:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a006234:	f8db 300c 	ldr.w	r3, [fp, #12]
1a006238:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00623c:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a006240:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a006244:	b2db      	uxtb	r3, r3
1a006246:	9901      	ldr	r1, [sp, #4]
1a006248:	f001 020f 	and.w	r2, r1, #15
1a00624c:	4313      	orrs	r3, r2
1a00624e:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a006252:	0933      	lsrs	r3, r6, #4
1a006254:	fb0a f303 	mul.w	r3, sl, r3
1a006258:	448a      	add	sl, r1
1a00625a:	fb09 f90a 	mul.w	r9, r9, sl
1a00625e:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a006262:	4648      	mov	r0, r9
1a006264:	b003      	add	sp, #12
1a006266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00626a:	bf00      	nop
1a00626c:	1a0086ec 	.word	0x1a0086ec

1a006270 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a006270:	4b03      	ldr	r3, [pc, #12]	; (1a006280 <Chip_ADC_GetClockIndex+0x10>)
1a006272:	4298      	cmp	r0, r3
1a006274:	d001      	beq.n	1a00627a <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a006276:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a006278:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a00627a:	2004      	movs	r0, #4
1a00627c:	4770      	bx	lr
1a00627e:	bf00      	nop
1a006280:	400e4000 	.word	0x400e4000

1a006284 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a006284:	b570      	push	{r4, r5, r6, lr}
1a006286:	460d      	mov	r5, r1
1a006288:	4614      	mov	r4, r2
1a00628a:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a00628c:	f7ff fff0 	bl	1a006270 <Chip_ADC_GetClockIndex>
1a006290:	f000 faf4 	bl	1a00687c <Chip_Clock_GetRate>
	if (burstMode) {
1a006294:	b965      	cbnz	r5, 1a0062b0 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a006296:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a00629a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a00629e:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a0062a2:	0064      	lsls	r4, r4, #1
1a0062a4:	fbb0 f0f4 	udiv	r0, r0, r4
1a0062a8:	b2c0      	uxtb	r0, r0
1a0062aa:	3801      	subs	r0, #1
	return div;
}
1a0062ac:	b2c0      	uxtb	r0, r0
1a0062ae:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a0062b0:	fb04 f406 	mul.w	r4, r4, r6
1a0062b4:	e7f3      	b.n	1a00629e <getClkDiv+0x1a>
1a0062b6:	Address 0x000000001a0062b6 is out of bounds.


1a0062b8 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a0062b8:	b538      	push	{r3, r4, r5, lr}
1a0062ba:	4605      	mov	r5, r0
1a0062bc:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a0062be:	f7ff ffd7 	bl	1a006270 <Chip_ADC_GetClockIndex>
1a0062c2:	2301      	movs	r3, #1
1a0062c4:	461a      	mov	r2, r3
1a0062c6:	4619      	mov	r1, r3
1a0062c8:	f000 faa0 	bl	1a00680c <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a0062cc:	2100      	movs	r1, #0
1a0062ce:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a0062d0:	4a08      	ldr	r2, [pc, #32]	; (1a0062f4 <Chip_ADC_Init+0x3c>)
1a0062d2:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a0062d4:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a0062d6:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a0062d8:	230b      	movs	r3, #11
1a0062da:	4628      	mov	r0, r5
1a0062dc:	f7ff ffd2 	bl	1a006284 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0062e0:	0200      	lsls	r0, r0, #8
1a0062e2:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0062e6:	7920      	ldrb	r0, [r4, #4]
1a0062e8:	0440      	lsls	r0, r0, #17
1a0062ea:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a0062ee:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a0062f0:	6028      	str	r0, [r5, #0]
}
1a0062f2:	bd38      	pop	{r3, r4, r5, pc}
1a0062f4:	00061a80 	.word	0x00061a80

1a0062f8 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a0062f8:	b570      	push	{r4, r5, r6, lr}
1a0062fa:	4605      	mov	r5, r0
1a0062fc:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a0062fe:	6804      	ldr	r4, [r0, #0]
1a006300:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a006304:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a006308:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a00630a:	790b      	ldrb	r3, [r1, #4]
1a00630c:	f1c3 030b 	rsb	r3, r3, #11
1a006310:	b2db      	uxtb	r3, r3
1a006312:	7949      	ldrb	r1, [r1, #5]
1a006314:	f7ff ffb6 	bl	1a006284 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a006318:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00631c:	7930      	ldrb	r0, [r6, #4]
1a00631e:	0440      	lsls	r0, r0, #17
1a006320:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a006324:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a006326:	6028      	str	r0, [r5, #0]
}
1a006328:	bd70      	pop	{r4, r5, r6, pc}

1a00632a <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a00632a:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a00632c:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a00632e:	680a      	ldr	r2, [r1, #0]
1a006330:	f7ff ffe2 	bl	1a0062f8 <Chip_ADC_SetSampleRate>
}
1a006334:	bd08      	pop	{r3, pc}
1a006336:	Address 0x000000001a006336 is out of bounds.


1a006338 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a006338:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a00633a:	680b      	ldr	r3, [r1, #0]
1a00633c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a006340:	d002      	beq.n	1a006348 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a006342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a006346:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a006348:	4607      	mov	r7, r0
1a00634a:	2501      	movs	r5, #1
1a00634c:	e03b      	b.n	1a0063c6 <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a00634e:	694b      	ldr	r3, [r1, #20]
1a006350:	fb03 f302 	mul.w	r3, r3, r2
1a006354:	fbb3 f3f5 	udiv	r3, r3, r5
1a006358:	e014      	b.n	1a006384 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a00635a:	461c      	mov	r4, r3
1a00635c:	e020      	b.n	1a0063a0 <pll_calc_divs+0x68>
		return -val;
1a00635e:	f1cc 0c00 	rsb	ip, ip, #0
1a006362:	e020      	b.n	1a0063a6 <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a006364:	3201      	adds	r2, #1
1a006366:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a00636a:	dc26      	bgt.n	1a0063ba <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a00636c:	680c      	ldr	r4, [r1, #0]
1a00636e:	f014 0f40 	tst.w	r4, #64	; 0x40
1a006372:	d0ec      	beq.n	1a00634e <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a006374:	1c73      	adds	r3, r6, #1
1a006376:	fa02 fc03 	lsl.w	ip, r2, r3
1a00637a:	694b      	ldr	r3, [r1, #20]
1a00637c:	fb03 f30c 	mul.w	r3, r3, ip
1a006380:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a006384:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a0063d4 <pll_calc_divs+0x9c>
1a006388:	4563      	cmp	r3, ip
1a00638a:	d9eb      	bls.n	1a006364 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a00638c:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a0063d8 <pll_calc_divs+0xa0>
1a006390:	4563      	cmp	r3, ip
1a006392:	d812      	bhi.n	1a0063ba <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a006394:	f014 0f80 	tst.w	r4, #128	; 0x80
1a006398:	d1df      	bne.n	1a00635a <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a00639a:	1c74      	adds	r4, r6, #1
1a00639c:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a0063a0:	ebb0 0c04 	subs.w	ip, r0, r4
1a0063a4:	d4db      	bmi.n	1a00635e <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a0063a6:	4567      	cmp	r7, ip
1a0063a8:	d9dc      	bls.n	1a006364 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a0063aa:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a0063ac:	1c77      	adds	r7, r6, #1
1a0063ae:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a0063b0:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a0063b2:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a0063b4:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a0063b6:	4667      	mov	r7, ip
1a0063b8:	e7d4      	b.n	1a006364 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a0063ba:	3601      	adds	r6, #1
1a0063bc:	2e03      	cmp	r6, #3
1a0063be:	dc01      	bgt.n	1a0063c4 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a0063c0:	2201      	movs	r2, #1
1a0063c2:	e7d0      	b.n	1a006366 <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a0063c4:	3501      	adds	r5, #1
1a0063c6:	2d04      	cmp	r5, #4
1a0063c8:	dc01      	bgt.n	1a0063ce <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a0063ca:	2600      	movs	r6, #0
1a0063cc:	e7f6      	b.n	1a0063bc <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a0063ce:	bcf0      	pop	{r4, r5, r6, r7}
1a0063d0:	4770      	bx	lr
1a0063d2:	bf00      	nop
1a0063d4:	094c5eff 	.word	0x094c5eff
1a0063d8:	1312d000 	.word	0x1312d000

1a0063dc <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0063dc:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0063de:	b099      	sub	sp, #100	; 0x64
1a0063e0:	4605      	mov	r5, r0
1a0063e2:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a0063e4:	225c      	movs	r2, #92	; 0x5c
1a0063e6:	2100      	movs	r1, #0
1a0063e8:	a801      	add	r0, sp, #4
1a0063ea:	f001 fa76 	bl	1a0078da <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a0063ee:	2380      	movs	r3, #128	; 0x80
1a0063f0:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a0063f2:	6963      	ldr	r3, [r4, #20]
1a0063f4:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a0063f6:	7923      	ldrb	r3, [r4, #4]
1a0063f8:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a0063fc:	4669      	mov	r1, sp
1a0063fe:	4628      	mov	r0, r5
1a006400:	f7ff ff9a 	bl	1a006338 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a006404:	9b06      	ldr	r3, [sp, #24]
1a006406:	42ab      	cmp	r3, r5
1a006408:	d027      	beq.n	1a00645a <pll_get_frac+0x7e>
	if (val < 0)
1a00640a:	1aeb      	subs	r3, r5, r3
1a00640c:	d42e      	bmi.n	1a00646c <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a00640e:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a006410:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a006412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a006416:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a006418:	6963      	ldr	r3, [r4, #20]
1a00641a:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a00641c:	7923      	ldrb	r3, [r4, #4]
1a00641e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a006422:	a910      	add	r1, sp, #64	; 0x40
1a006424:	4628      	mov	r0, r5
1a006426:	f7ff ff87 	bl	1a006338 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a00642a:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a00642c:	42ab      	cmp	r3, r5
1a00642e:	d01f      	beq.n	1a006470 <pll_get_frac+0x94>
	if (val < 0)
1a006430:	1aeb      	subs	r3, r5, r3
1a006432:	d425      	bmi.n	1a006480 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a006434:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a006436:	4b2b      	ldr	r3, [pc, #172]	; (1a0064e4 <pll_get_frac+0x108>)
1a006438:	429d      	cmp	r5, r3
1a00643a:	d923      	bls.n	1a006484 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a00643c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a00643e:	1aed      	subs	r5, r5, r3
1a006440:	d433      	bmi.n	1a0064aa <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a006442:	42ae      	cmp	r6, r5
1a006444:	dc3b      	bgt.n	1a0064be <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a006446:	42be      	cmp	r6, r7
1a006448:	dc31      	bgt.n	1a0064ae <pll_get_frac+0xd2>
			*ppll = pll[0];
1a00644a:	466d      	mov	r5, sp
1a00644c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00644e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a006450:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a006454:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a006458:	e006      	b.n	1a006468 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a00645a:	466d      	mov	r5, sp
1a00645c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00645e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a006460:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a006464:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a006468:	b019      	add	sp, #100	; 0x64
1a00646a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a00646c:	425b      	negs	r3, r3
1a00646e:	e7ce      	b.n	1a00640e <pll_get_frac+0x32>
		*ppll = pll[2];
1a006470:	ad10      	add	r5, sp, #64	; 0x40
1a006472:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a006474:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a006476:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00647a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a00647e:	e7f3      	b.n	1a006468 <pll_get_frac+0x8c>
		return -val;
1a006480:	425b      	negs	r3, r3
1a006482:	e7d7      	b.n	1a006434 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a006484:	2340      	movs	r3, #64	; 0x40
1a006486:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a006488:	6963      	ldr	r3, [r4, #20]
1a00648a:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a00648c:	a908      	add	r1, sp, #32
1a00648e:	4628      	mov	r0, r5
1a006490:	f7ff ff52 	bl	1a006338 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a006494:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a006496:	42ab      	cmp	r3, r5
1a006498:	d1d0      	bne.n	1a00643c <pll_get_frac+0x60>
			*ppll = pll[1];
1a00649a:	ad08      	add	r5, sp, #32
1a00649c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00649e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0064a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0064a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a0064a8:	e7de      	b.n	1a006468 <pll_get_frac+0x8c>
		return -val;
1a0064aa:	426d      	negs	r5, r5
1a0064ac:	e7c9      	b.n	1a006442 <pll_get_frac+0x66>
			*ppll = pll[2];
1a0064ae:	ad10      	add	r5, sp, #64	; 0x40
1a0064b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0064b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0064b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0064b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0064bc:	e7d4      	b.n	1a006468 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a0064be:	42af      	cmp	r7, r5
1a0064c0:	db07      	blt.n	1a0064d2 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a0064c2:	ad08      	add	r5, sp, #32
1a0064c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0064c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0064c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0064cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0064d0:	e7ca      	b.n	1a006468 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a0064d2:	ad10      	add	r5, sp, #64	; 0x40
1a0064d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0064d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0064d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0064dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0064e0:	e7c2      	b.n	1a006468 <pll_get_frac+0x8c>
1a0064e2:	bf00      	nop
1a0064e4:	068e7780 	.word	0x068e7780

1a0064e8 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a0064e8:	b430      	push	{r4, r5}
1a0064ea:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a0064ec:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a0064ee:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0064f0:	e000      	b.n	1a0064f4 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a0064f2:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0064f4:	281c      	cmp	r0, #28
1a0064f6:	d118      	bne.n	1a00652a <Chip_Clock_FindBaseClock+0x42>
1a0064f8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0064fc:	0051      	lsls	r1, r2, #1
1a0064fe:	4a0c      	ldr	r2, [pc, #48]	; (1a006530 <Chip_Clock_FindBaseClock+0x48>)
1a006500:	440a      	add	r2, r1
1a006502:	7914      	ldrb	r4, [r2, #4]
1a006504:	4284      	cmp	r4, r0
1a006506:	d010      	beq.n	1a00652a <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a006508:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a00650c:	004a      	lsls	r2, r1, #1
1a00650e:	4908      	ldr	r1, [pc, #32]	; (1a006530 <Chip_Clock_FindBaseClock+0x48>)
1a006510:	5a8a      	ldrh	r2, [r1, r2]
1a006512:	42aa      	cmp	r2, r5
1a006514:	d8ed      	bhi.n	1a0064f2 <Chip_Clock_FindBaseClock+0xa>
1a006516:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00651a:	0051      	lsls	r1, r2, #1
1a00651c:	4a04      	ldr	r2, [pc, #16]	; (1a006530 <Chip_Clock_FindBaseClock+0x48>)
1a00651e:	440a      	add	r2, r1
1a006520:	8852      	ldrh	r2, [r2, #2]
1a006522:	42aa      	cmp	r2, r5
1a006524:	d3e5      	bcc.n	1a0064f2 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a006526:	4620      	mov	r0, r4
1a006528:	e7e4      	b.n	1a0064f4 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a00652a:	bc30      	pop	{r4, r5}
1a00652c:	4770      	bx	lr
1a00652e:	bf00      	nop
1a006530:	1a008708 	.word	0x1a008708

1a006534 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a006534:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a006536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a00653a:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a00653c:	4a0d      	ldr	r2, [pc, #52]	; (1a006574 <Chip_Clock_EnableCrystal+0x40>)
1a00653e:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a006540:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a006544:	6992      	ldr	r2, [r2, #24]
1a006546:	428a      	cmp	r2, r1
1a006548:	d001      	beq.n	1a00654e <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00654a:	4a0a      	ldr	r2, [pc, #40]	; (1a006574 <Chip_Clock_EnableCrystal+0x40>)
1a00654c:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a00654e:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a006552:	4a09      	ldr	r2, [pc, #36]	; (1a006578 <Chip_Clock_EnableCrystal+0x44>)
1a006554:	6811      	ldr	r1, [r2, #0]
1a006556:	4a09      	ldr	r2, [pc, #36]	; (1a00657c <Chip_Clock_EnableCrystal+0x48>)
1a006558:	4291      	cmp	r1, r2
1a00655a:	d901      	bls.n	1a006560 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a00655c:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a006560:	4a04      	ldr	r2, [pc, #16]	; (1a006574 <Chip_Clock_EnableCrystal+0x40>)
1a006562:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a006564:	9b01      	ldr	r3, [sp, #4]
1a006566:	1e5a      	subs	r2, r3, #1
1a006568:	9201      	str	r2, [sp, #4]
1a00656a:	2b00      	cmp	r3, #0
1a00656c:	d1fa      	bne.n	1a006564 <Chip_Clock_EnableCrystal+0x30>
}
1a00656e:	b002      	add	sp, #8
1a006570:	4770      	bx	lr
1a006572:	bf00      	nop
1a006574:	40050000 	.word	0x40050000
1a006578:	1a008670 	.word	0x1a008670
1a00657c:	01312cff 	.word	0x01312cff

1a006580 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a006580:	3012      	adds	r0, #18
1a006582:	4b05      	ldr	r3, [pc, #20]	; (1a006598 <Chip_Clock_GetDividerSource+0x18>)
1a006584:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a006588:	f010 0f01 	tst.w	r0, #1
1a00658c:	d102      	bne.n	1a006594 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00658e:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a006592:	4770      	bx	lr
		return CLKINPUT_PD;
1a006594:	2011      	movs	r0, #17
}
1a006596:	4770      	bx	lr
1a006598:	40050000 	.word	0x40050000

1a00659c <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a00659c:	f100 0212 	add.w	r2, r0, #18
1a0065a0:	4b03      	ldr	r3, [pc, #12]	; (1a0065b0 <Chip_Clock_GetDividerDivisor+0x14>)
1a0065a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a0065a6:	4b03      	ldr	r3, [pc, #12]	; (1a0065b4 <Chip_Clock_GetDividerDivisor+0x18>)
1a0065a8:	5c18      	ldrb	r0, [r3, r0]
}
1a0065aa:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a0065ae:	4770      	bx	lr
1a0065b0:	40050000 	.word	0x40050000
1a0065b4:	1a008700 	.word	0x1a008700

1a0065b8 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a0065b8:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a0065ba:	2810      	cmp	r0, #16
1a0065bc:	d80a      	bhi.n	1a0065d4 <Chip_Clock_GetClockInputHz+0x1c>
1a0065be:	e8df f000 	tbb	[pc, r0]
1a0065c2:	0b42      	.short	0x0b42
1a0065c4:	091f160d 	.word	0x091f160d
1a0065c8:	2b282522 	.word	0x2b282522
1a0065cc:	322e0909 	.word	0x322e0909
1a0065d0:	3a36      	.short	0x3a36
1a0065d2:	3e          	.byte	0x3e
1a0065d3:	00          	.byte	0x00
	uint32_t rate = 0;
1a0065d4:	2000      	movs	r0, #0
1a0065d6:	e038      	b.n	1a00664a <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a0065d8:	481e      	ldr	r0, [pc, #120]	; (1a006654 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a0065da:	e036      	b.n	1a00664a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0065dc:	4b1e      	ldr	r3, [pc, #120]	; (1a006658 <Chip_Clock_GetClockInputHz+0xa0>)
1a0065de:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0065e2:	f003 0307 	and.w	r3, r3, #7
1a0065e6:	2b04      	cmp	r3, #4
1a0065e8:	d130      	bne.n	1a00664c <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a0065ea:	2000      	movs	r0, #0
1a0065ec:	e02d      	b.n	1a00664a <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0065ee:	4b1a      	ldr	r3, [pc, #104]	; (1a006658 <Chip_Clock_GetClockInputHz+0xa0>)
1a0065f0:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0065f4:	f003 0307 	and.w	r3, r3, #7
1a0065f8:	2b04      	cmp	r3, #4
1a0065fa:	d029      	beq.n	1a006650 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a0065fc:	4817      	ldr	r0, [pc, #92]	; (1a00665c <Chip_Clock_GetClockInputHz+0xa4>)
1a0065fe:	e024      	b.n	1a00664a <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a006600:	4b17      	ldr	r3, [pc, #92]	; (1a006660 <Chip_Clock_GetClockInputHz+0xa8>)
1a006602:	6818      	ldr	r0, [r3, #0]
		break;
1a006604:	e021      	b.n	1a00664a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a006606:	4b17      	ldr	r3, [pc, #92]	; (1a006664 <Chip_Clock_GetClockInputHz+0xac>)
1a006608:	6818      	ldr	r0, [r3, #0]
		break;
1a00660a:	e01e      	b.n	1a00664a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a00660c:	4b16      	ldr	r3, [pc, #88]	; (1a006668 <Chip_Clock_GetClockInputHz+0xb0>)
1a00660e:	6818      	ldr	r0, [r3, #0]
		break;
1a006610:	e01b      	b.n	1a00664a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a006612:	4b15      	ldr	r3, [pc, #84]	; (1a006668 <Chip_Clock_GetClockInputHz+0xb0>)
1a006614:	6858      	ldr	r0, [r3, #4]
		break;
1a006616:	e018      	b.n	1a00664a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a006618:	f000 f86a 	bl	1a0066f0 <Chip_Clock_GetMainPLLHz>
		break;
1a00661c:	e015      	b.n	1a00664a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a00661e:	2100      	movs	r1, #0
1a006620:	f000 f89c 	bl	1a00675c <Chip_Clock_GetDivRate>
		break;
1a006624:	e011      	b.n	1a00664a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a006626:	2101      	movs	r1, #1
1a006628:	f000 f898 	bl	1a00675c <Chip_Clock_GetDivRate>
		break;
1a00662c:	e00d      	b.n	1a00664a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a00662e:	2102      	movs	r1, #2
1a006630:	f000 f894 	bl	1a00675c <Chip_Clock_GetDivRate>
		break;
1a006634:	e009      	b.n	1a00664a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a006636:	2103      	movs	r1, #3
1a006638:	f000 f890 	bl	1a00675c <Chip_Clock_GetDivRate>
		break;
1a00663c:	e005      	b.n	1a00664a <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a00663e:	2104      	movs	r1, #4
1a006640:	f000 f88c 	bl	1a00675c <Chip_Clock_GetDivRate>
		break;
1a006644:	e001      	b.n	1a00664a <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a006646:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a00664a:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a00664c:	4803      	ldr	r0, [pc, #12]	; (1a00665c <Chip_Clock_GetClockInputHz+0xa4>)
1a00664e:	e7fc      	b.n	1a00664a <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a006650:	4806      	ldr	r0, [pc, #24]	; (1a00666c <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a006652:	e7fa      	b.n	1a00664a <Chip_Clock_GetClockInputHz+0x92>
1a006654:	00b71b00 	.word	0x00b71b00
1a006658:	40043000 	.word	0x40043000
1a00665c:	017d7840 	.word	0x017d7840
1a006660:	1a008644 	.word	0x1a008644
1a006664:	1a008670 	.word	0x1a008670
1a006668:	10003488 	.word	0x10003488
1a00666c:	02faf080 	.word	0x02faf080

1a006670 <Chip_Clock_CalcMainPLLValue>:
{
1a006670:	b538      	push	{r3, r4, r5, lr}
1a006672:	4605      	mov	r5, r0
1a006674:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a006676:	7908      	ldrb	r0, [r1, #4]
1a006678:	f7ff ff9e 	bl	1a0065b8 <Chip_Clock_GetClockInputHz>
1a00667c:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a00667e:	4b19      	ldr	r3, [pc, #100]	; (1a0066e4 <Chip_Clock_CalcMainPLLValue+0x74>)
1a006680:	442b      	add	r3, r5
1a006682:	4a19      	ldr	r2, [pc, #100]	; (1a0066e8 <Chip_Clock_CalcMainPLLValue+0x78>)
1a006684:	4293      	cmp	r3, r2
1a006686:	d821      	bhi.n	1a0066cc <Chip_Clock_CalcMainPLLValue+0x5c>
1a006688:	b318      	cbz	r0, 1a0066d2 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a00668a:	2380      	movs	r3, #128	; 0x80
1a00668c:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a00668e:	2300      	movs	r3, #0
1a006690:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a006692:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a006694:	fbb5 f3f0 	udiv	r3, r5, r0
1a006698:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a00669a:	4a14      	ldr	r2, [pc, #80]	; (1a0066ec <Chip_Clock_CalcMainPLLValue+0x7c>)
1a00669c:	4295      	cmp	r5, r2
1a00669e:	d903      	bls.n	1a0066a8 <Chip_Clock_CalcMainPLLValue+0x38>
1a0066a0:	fb03 f000 	mul.w	r0, r3, r0
1a0066a4:	42a8      	cmp	r0, r5
1a0066a6:	d007      	beq.n	1a0066b8 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a0066a8:	4621      	mov	r1, r4
1a0066aa:	4628      	mov	r0, r5
1a0066ac:	f7ff fe96 	bl	1a0063dc <pll_get_frac>
		if (!ppll->nsel) {
1a0066b0:	68a3      	ldr	r3, [r4, #8]
1a0066b2:	b18b      	cbz	r3, 1a0066d8 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a0066b4:	3b01      	subs	r3, #1
1a0066b6:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a0066b8:	6923      	ldr	r3, [r4, #16]
1a0066ba:	b183      	cbz	r3, 1a0066de <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a0066bc:	68e2      	ldr	r2, [r4, #12]
1a0066be:	b10a      	cbz	r2, 1a0066c4 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a0066c0:	3a01      	subs	r2, #1
1a0066c2:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a0066c4:	3b01      	subs	r3, #1
1a0066c6:	6123      	str	r3, [r4, #16]
	return 0;
1a0066c8:	2000      	movs	r0, #0
}
1a0066ca:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a0066cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0066d0:	e7fb      	b.n	1a0066ca <Chip_Clock_CalcMainPLLValue+0x5a>
1a0066d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0066d6:	e7f8      	b.n	1a0066ca <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a0066d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0066dc:	e7f5      	b.n	1a0066ca <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a0066de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0066e2:	e7f2      	b.n	1a0066ca <Chip_Clock_CalcMainPLLValue+0x5a>
1a0066e4:	ff6b3a10 	.word	0xff6b3a10
1a0066e8:	0b940510 	.word	0x0b940510
1a0066ec:	094c5eff 	.word	0x094c5eff

1a0066f0 <Chip_Clock_GetMainPLLHz>:
{
1a0066f0:	b530      	push	{r4, r5, lr}
1a0066f2:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a0066f4:	4d17      	ldr	r5, [pc, #92]	; (1a006754 <Chip_Clock_GetMainPLLHz+0x64>)
1a0066f6:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a0066f8:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a0066fc:	f7ff ff5c 	bl	1a0065b8 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a006700:	4b15      	ldr	r3, [pc, #84]	; (1a006758 <Chip_Clock_GetMainPLLHz+0x68>)
1a006702:	681b      	ldr	r3, [r3, #0]
1a006704:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a006706:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a006708:	f013 0f01 	tst.w	r3, #1
1a00670c:	d01f      	beq.n	1a00674e <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a00670e:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a006712:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a006716:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a00671a:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a00671e:	3301      	adds	r3, #1
	n = nsel + 1;
1a006720:	3201      	adds	r2, #1
	p = ptab[psel];
1a006722:	f10d 0c08 	add.w	ip, sp, #8
1a006726:	4461      	add	r1, ip
1a006728:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a00672c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a006730:	d108      	bne.n	1a006744 <Chip_Clock_GetMainPLLHz+0x54>
1a006732:	b93d      	cbnz	r5, 1a006744 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a006734:	0049      	lsls	r1, r1, #1
1a006736:	fbb3 f3f1 	udiv	r3, r3, r1
1a00673a:	fbb0 f0f2 	udiv	r0, r0, r2
1a00673e:	fb00 f003 	mul.w	r0, r0, r3
1a006742:	e005      	b.n	1a006750 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a006744:	fbb0 f0f2 	udiv	r0, r0, r2
1a006748:	fb03 f000 	mul.w	r0, r3, r0
1a00674c:	e000      	b.n	1a006750 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a00674e:	2000      	movs	r0, #0
}
1a006750:	b003      	add	sp, #12
1a006752:	bd30      	pop	{r4, r5, pc}
1a006754:	40050000 	.word	0x40050000
1a006758:	1a0086fc 	.word	0x1a0086fc

1a00675c <Chip_Clock_GetDivRate>:
{
1a00675c:	b538      	push	{r3, r4, r5, lr}
1a00675e:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a006760:	4608      	mov	r0, r1
1a006762:	f7ff ff0d 	bl	1a006580 <Chip_Clock_GetDividerSource>
1a006766:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a006768:	4620      	mov	r0, r4
1a00676a:	f7ff ff17 	bl	1a00659c <Chip_Clock_GetDividerDivisor>
1a00676e:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a006770:	4628      	mov	r0, r5
1a006772:	f7ff ff21 	bl	1a0065b8 <Chip_Clock_GetClockInputHz>
1a006776:	3401      	adds	r4, #1
}
1a006778:	fbb0 f0f4 	udiv	r0, r0, r4
1a00677c:	bd38      	pop	{r3, r4, r5, pc}
1a00677e:	Address 0x000000001a00677e is out of bounds.


1a006780 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a006780:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a006782:	f100 0416 	add.w	r4, r0, #22
1a006786:	00a4      	lsls	r4, r4, #2
1a006788:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a00678c:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a006790:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a006792:	281b      	cmp	r0, #27
1a006794:	d813      	bhi.n	1a0067be <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a006796:	2911      	cmp	r1, #17
1a006798:	d01a      	beq.n	1a0067d0 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a00679a:	4d0e      	ldr	r5, [pc, #56]	; (1a0067d4 <Chip_Clock_SetBaseClock+0x54>)
1a00679c:	4025      	ands	r5, r4

			if (autoblocken) {
1a00679e:	b10a      	cbz	r2, 1a0067a4 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a0067a0:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a0067a4:	b10b      	cbz	r3, 1a0067aa <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a0067a6:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a0067aa:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0067ae:	3016      	adds	r0, #22
1a0067b0:	0080      	lsls	r0, r0, #2
1a0067b2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0067b6:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0067ba:	6045      	str	r5, [r0, #4]
1a0067bc:	e008      	b.n	1a0067d0 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a0067be:	f044 0401 	orr.w	r4, r4, #1
1a0067c2:	3016      	adds	r0, #22
1a0067c4:	0080      	lsls	r0, r0, #2
1a0067c6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0067ca:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0067ce:	6044      	str	r4, [r0, #4]
	}
}
1a0067d0:	bc30      	pop	{r4, r5}
1a0067d2:	4770      	bx	lr
1a0067d4:	e0fff7fe 	.word	0xe0fff7fe

1a0067d8 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a0067d8:	281b      	cmp	r0, #27
1a0067da:	d80c      	bhi.n	1a0067f6 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a0067dc:	3016      	adds	r0, #22
1a0067de:	0080      	lsls	r0, r0, #2
1a0067e0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0067e4:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0067e8:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a0067ea:	f010 0f01 	tst.w	r0, #1
1a0067ee:	d104      	bne.n	1a0067fa <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0067f0:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0067f4:	4770      	bx	lr
		return CLKINPUT_PD;
1a0067f6:	2011      	movs	r0, #17
1a0067f8:	4770      	bx	lr
		return CLKINPUT_PD;
1a0067fa:	2011      	movs	r0, #17
}
1a0067fc:	4770      	bx	lr

1a0067fe <Chip_Clock_GetBaseClocktHz>:
{
1a0067fe:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a006800:	f7ff ffea 	bl	1a0067d8 <Chip_Clock_GetBaseClock>
1a006804:	f7ff fed8 	bl	1a0065b8 <Chip_Clock_GetClockInputHz>
}
1a006808:	bd08      	pop	{r3, pc}
1a00680a:	Address 0x000000001a00680a is out of bounds.


1a00680c <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a00680c:	b969      	cbnz	r1, 1a00682a <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a00680e:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a006810:	b10a      	cbz	r2, 1a006816 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a006812:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a006816:	2b02      	cmp	r3, #2
1a006818:	d009      	beq.n	1a00682e <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a00681a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00681e:	d209      	bcs.n	1a006834 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a006820:	3020      	adds	r0, #32
1a006822:	4b07      	ldr	r3, [pc, #28]	; (1a006840 <Chip_Clock_EnableOpts+0x34>)
1a006824:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a006828:	4770      	bx	lr
		reg |= (1 << 1);
1a00682a:	2103      	movs	r1, #3
1a00682c:	e7f0      	b.n	1a006810 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a00682e:	f041 0120 	orr.w	r1, r1, #32
1a006832:	e7f2      	b.n	1a00681a <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a006834:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a006838:	4b02      	ldr	r3, [pc, #8]	; (1a006844 <Chip_Clock_EnableOpts+0x38>)
1a00683a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a00683e:	4770      	bx	lr
1a006840:	40051000 	.word	0x40051000
1a006844:	40052000 	.word	0x40052000

1a006848 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a006848:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00684c:	d208      	bcs.n	1a006860 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a00684e:	4a09      	ldr	r2, [pc, #36]	; (1a006874 <Chip_Clock_Enable+0x2c>)
1a006850:	3020      	adds	r0, #32
1a006852:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a006856:	f043 0301 	orr.w	r3, r3, #1
1a00685a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a00685e:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a006860:	4a05      	ldr	r2, [pc, #20]	; (1a006878 <Chip_Clock_Enable+0x30>)
1a006862:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a006866:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00686a:	f043 0301 	orr.w	r3, r3, #1
1a00686e:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a006872:	4770      	bx	lr
1a006874:	40051000 	.word	0x40051000
1a006878:	40052000 	.word	0x40052000

1a00687c <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a00687c:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a00687e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a006882:	d309      	bcc.n	1a006898 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a006884:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a006888:	4a0d      	ldr	r2, [pc, #52]	; (1a0068c0 <Chip_Clock_GetRate+0x44>)
1a00688a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a00688e:	f014 0f01 	tst.w	r4, #1
1a006892:	d107      	bne.n	1a0068a4 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a006894:	2000      	movs	r0, #0
	}

	return rate;
}
1a006896:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a006898:	f100 0320 	add.w	r3, r0, #32
1a00689c:	4a09      	ldr	r2, [pc, #36]	; (1a0068c4 <Chip_Clock_GetRate+0x48>)
1a00689e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0068a2:	e7f4      	b.n	1a00688e <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a0068a4:	f7ff fe20 	bl	1a0064e8 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0068a8:	f7ff ffa9 	bl	1a0067fe <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a0068ac:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0068b0:	d103      	bne.n	1a0068ba <Chip_Clock_GetRate+0x3e>
			div = 1;
1a0068b2:	2301      	movs	r3, #1
		rate = rate / div;
1a0068b4:	fbb0 f0f3 	udiv	r0, r0, r3
1a0068b8:	e7ed      	b.n	1a006896 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a0068ba:	2302      	movs	r3, #2
1a0068bc:	e7fa      	b.n	1a0068b4 <Chip_Clock_GetRate+0x38>
1a0068be:	bf00      	nop
1a0068c0:	40052000 	.word	0x40052000
1a0068c4:	40051000 	.word	0x40051000

1a0068c8 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0068c8:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0068ca:	2069      	movs	r0, #105	; 0x69
1a0068cc:	f7ff ffd6 	bl	1a00687c <Chip_Clock_GetRate>
1a0068d0:	4b01      	ldr	r3, [pc, #4]	; (1a0068d8 <SystemCoreClockUpdate+0x10>)
1a0068d2:	6018      	str	r0, [r3, #0]
}
1a0068d4:	bd08      	pop	{r3, pc}
1a0068d6:	bf00      	nop
1a0068d8:	10003584 	.word	0x10003584

1a0068dc <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0068dc:	b570      	push	{r4, r5, r6, lr}
1a0068de:	b08a      	sub	sp, #40	; 0x28
1a0068e0:	4605      	mov	r5, r0
1a0068e2:	460e      	mov	r6, r1
1a0068e4:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0068e6:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0068ea:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0068ec:	2806      	cmp	r0, #6
1a0068ee:	d018      	beq.n	1a006922 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0068f0:	2300      	movs	r3, #0
1a0068f2:	2201      	movs	r2, #1
1a0068f4:	4629      	mov	r1, r5
1a0068f6:	2004      	movs	r0, #4
1a0068f8:	f7ff ff42 	bl	1a006780 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0068fc:	4a49      	ldr	r2, [pc, #292]	; (1a006a24 <Chip_SetupCoreClock+0x148>)
1a0068fe:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a006900:	f043 0301 	orr.w	r3, r3, #1
1a006904:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a006906:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a00690a:	a901      	add	r1, sp, #4
1a00690c:	4630      	mov	r0, r6
1a00690e:	f7ff feaf 	bl	1a006670 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a006912:	4b45      	ldr	r3, [pc, #276]	; (1a006a28 <Chip_SetupCoreClock+0x14c>)
1a006914:	429e      	cmp	r6, r3
1a006916:	d916      	bls.n	1a006946 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a006918:	9b01      	ldr	r3, [sp, #4]
1a00691a:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00691e:	d003      	beq.n	1a006928 <Chip_SetupCoreClock+0x4c>
1a006920:	e7fe      	b.n	1a006920 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a006922:	f7ff fe07 	bl	1a006534 <Chip_Clock_EnableCrystal>
1a006926:	e7e3      	b.n	1a0068f0 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a006928:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00692c:	d005      	beq.n	1a00693a <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a00692e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a006932:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a006934:	2500      	movs	r5, #0
			direct = 1;
1a006936:	2601      	movs	r6, #1
1a006938:	e007      	b.n	1a00694a <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a00693a:	9b04      	ldr	r3, [sp, #16]
1a00693c:	3301      	adds	r3, #1
1a00693e:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a006940:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a006942:	2600      	movs	r6, #0
1a006944:	e001      	b.n	1a00694a <Chip_SetupCoreClock+0x6e>
1a006946:	2500      	movs	r5, #0
1a006948:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00694a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00694e:	9b01      	ldr	r3, [sp, #4]
1a006950:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a006954:	9a05      	ldr	r2, [sp, #20]
1a006956:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00695a:	9a03      	ldr	r2, [sp, #12]
1a00695c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a006960:	9a04      	ldr	r2, [sp, #16]
1a006962:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a006966:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00696a:	4a2e      	ldr	r2, [pc, #184]	; (1a006a24 <Chip_SetupCoreClock+0x148>)
1a00696c:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a00696e:	4b2d      	ldr	r3, [pc, #180]	; (1a006a24 <Chip_SetupCoreClock+0x148>)
1a006970:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a006972:	f013 0f01 	tst.w	r3, #1
1a006976:	d0fa      	beq.n	1a00696e <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a006978:	2300      	movs	r3, #0
1a00697a:	2201      	movs	r2, #1
1a00697c:	2109      	movs	r1, #9
1a00697e:	2004      	movs	r0, #4
1a006980:	f7ff fefe 	bl	1a006780 <Chip_Clock_SetBaseClock>

	if (direct) {
1a006984:	b1fe      	cbz	r6, 1a0069c6 <Chip_SetupCoreClock+0xea>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a006986:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00698a:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a00698c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00698e:	1e5a      	subs	r2, r3, #1
1a006990:	9209      	str	r2, [sp, #36]	; 0x24
1a006992:	2b00      	cmp	r3, #0
1a006994:	d1fa      	bne.n	1a00698c <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a006996:	9b01      	ldr	r3, [sp, #4]
1a006998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00699c:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00699e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0069a2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0069a6:	9a05      	ldr	r2, [sp, #20]
1a0069a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0069ac:	9a03      	ldr	r2, [sp, #12]
1a0069ae:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0069b2:	9a04      	ldr	r2, [sp, #16]
1a0069b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0069b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0069bc:	4a19      	ldr	r2, [pc, #100]	; (1a006a24 <Chip_SetupCoreClock+0x148>)
1a0069be:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0069c0:	b36c      	cbz	r4, 1a006a1e <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0069c2:	2400      	movs	r4, #0
1a0069c4:	e029      	b.n	1a006a1a <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a0069c6:	2d00      	cmp	r5, #0
1a0069c8:	d0fa      	beq.n	1a0069c0 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0069ca:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0069ce:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0069d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0069d2:	1e5a      	subs	r2, r3, #1
1a0069d4:	9209      	str	r2, [sp, #36]	; 0x24
1a0069d6:	2b00      	cmp	r3, #0
1a0069d8:	d1fa      	bne.n	1a0069d0 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a0069da:	9b04      	ldr	r3, [sp, #16]
1a0069dc:	1e5a      	subs	r2, r3, #1
1a0069de:	9204      	str	r2, [sp, #16]
1a0069e0:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a0069e4:	9b01      	ldr	r3, [sp, #4]
1a0069e6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a0069ea:	9905      	ldr	r1, [sp, #20]
1a0069ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0069f0:	9903      	ldr	r1, [sp, #12]
1a0069f2:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a0069f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0069fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0069fe:	4a09      	ldr	r2, [pc, #36]	; (1a006a24 <Chip_SetupCoreClock+0x148>)
1a006a00:	6453      	str	r3, [r2, #68]	; 0x44
1a006a02:	e7dd      	b.n	1a0069c0 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a006a04:	4809      	ldr	r0, [pc, #36]	; (1a006a2c <Chip_SetupCoreClock+0x150>)
1a006a06:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a006a0a:	78cb      	ldrb	r3, [r1, #3]
1a006a0c:	788a      	ldrb	r2, [r1, #2]
1a006a0e:	7849      	ldrb	r1, [r1, #1]
1a006a10:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a006a14:	f7ff feb4 	bl	1a006780 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a006a18:	3401      	adds	r4, #1
1a006a1a:	2c11      	cmp	r4, #17
1a006a1c:	d9f2      	bls.n	1a006a04 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a006a1e:	b00a      	add	sp, #40	; 0x28
1a006a20:	bd70      	pop	{r4, r5, r6, pc}
1a006a22:	bf00      	nop
1a006a24:	40050000 	.word	0x40050000
1a006a28:	068e7780 	.word	0x068e7780
1a006a2c:	1a008774 	.word	0x1a008774

1a006a30 <Chip_RTC_GetFullTime>:
	pRTC->CCR = ccr_val;
}

/* Get full time from the RTC peripheral */
void Chip_RTC_GetFullTime(LPC_RTC_T *pRTC, RTC_TIME_T *pFullTime)
{
1a006a30:	b410      	push	{r4}
	RTC_TIMEINDEX_T i;
	uint32_t secs = 0xFF;
1a006a32:	24ff      	movs	r4, #255	; 0xff

	/* Read full time, but verify second tick didn't change during the read. If
	   it did, re-read the time again so it will be consistent across all fields. */
	while (secs != pRTC->TIME[RTC_TIMETYPE_SECOND]) {
1a006a34:	e009      	b.n	1a006a4a <Chip_RTC_GetFullTime+0x1a>
		secs = pFullTime->time[RTC_TIMETYPE_SECOND] = pRTC->TIME[RTC_TIMETYPE_SECOND];
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
			pFullTime->time[i] = pRTC->TIME[i];
1a006a36:	f103 0208 	add.w	r2, r3, #8
1a006a3a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
1a006a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
1a006a42:	3301      	adds	r3, #1
1a006a44:	b2db      	uxtb	r3, r3
1a006a46:	2b07      	cmp	r3, #7
1a006a48:	d9f5      	bls.n	1a006a36 <Chip_RTC_GetFullTime+0x6>
	while (secs != pRTC->TIME[RTC_TIMETYPE_SECOND]) {
1a006a4a:	6a03      	ldr	r3, [r0, #32]
1a006a4c:	42a3      	cmp	r3, r4
1a006a4e:	d003      	beq.n	1a006a58 <Chip_RTC_GetFullTime+0x28>
		secs = pFullTime->time[RTC_TIMETYPE_SECOND] = pRTC->TIME[RTC_TIMETYPE_SECOND];
1a006a50:	6a04      	ldr	r4, [r0, #32]
1a006a52:	600c      	str	r4, [r1, #0]
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
1a006a54:	2301      	movs	r3, #1
1a006a56:	e7f6      	b.n	1a006a46 <Chip_RTC_GetFullTime+0x16>
		}
	}
}
1a006a58:	f85d 4b04 	ldr.w	r4, [sp], #4
1a006a5c:	4770      	bx	lr

1a006a5e <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a006a5e:	4770      	bx	lr

1a006a60 <SSP_Write2BFifo>:
 * Private functions
 ****************************************************************************/

STATIC void SSP_Write2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
1a006a60:	680b      	ldr	r3, [r1, #0]
1a006a62:	b133      	cbz	r3, 1a006a72 <SSP_Write2BFifo+0x12>
		Chip_SSP_SendFrame(pSSP, (*(uint16_t *) ((uint32_t) xf_setup->tx_data +
												 xf_setup->tx_cnt)));
1a006a64:	684a      	ldr	r2, [r1, #4]
		Chip_SSP_SendFrame(pSSP, (*(uint16_t *) ((uint32_t) xf_setup->tx_data +
1a006a66:	5a9b      	ldrh	r3, [r3, r2]
	pSSP->DR = SSP_DR_BITMASK(tx_data);
1a006a68:	6083      	str	r3, [r0, #8]
	}
	else {
		Chip_SSP_SendFrame(pSSP, 0xFFFF);
	}

	xf_setup->tx_cnt += 2;
1a006a6a:	684b      	ldr	r3, [r1, #4]
1a006a6c:	3302      	adds	r3, #2
1a006a6e:	604b      	str	r3, [r1, #4]
}
1a006a70:	4770      	bx	lr
1a006a72:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a006a76:	6083      	str	r3, [r0, #8]
1a006a78:	e7f7      	b.n	1a006a6a <SSP_Write2BFifo+0xa>

1a006a7a <SSP_Write1BFifo>:

/** SSP macro: write 1 bytes to FIFO buffer */
STATIC void SSP_Write1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
1a006a7a:	680b      	ldr	r3, [r1, #0]
1a006a7c:	b133      	cbz	r3, 1a006a8c <SSP_Write1BFifo+0x12>
		Chip_SSP_SendFrame(pSSP, (*(uint8_t *) ((uint32_t) xf_setup->tx_data + xf_setup->tx_cnt)));
1a006a7e:	684a      	ldr	r2, [r1, #4]
1a006a80:	5c9b      	ldrb	r3, [r3, r2]
1a006a82:	6083      	str	r3, [r0, #8]
	}
	else {
		Chip_SSP_SendFrame(pSSP, 0xFF);
	}

	xf_setup->tx_cnt++;
1a006a84:	684b      	ldr	r3, [r1, #4]
1a006a86:	3301      	adds	r3, #1
1a006a88:	604b      	str	r3, [r1, #4]
}
1a006a8a:	4770      	bx	lr
1a006a8c:	23ff      	movs	r3, #255	; 0xff
1a006a8e:	6083      	str	r3, [r0, #8]
1a006a90:	e7f8      	b.n	1a006a84 <SSP_Write1BFifo+0xa>

1a006a92 <SSP_Read2BFifo>:
	return (pSSP->SR & Stat) ? SET : RESET;
1a006a92:	68c3      	ldr	r3, [r0, #12]
/** SSP macro: read 1 bytes from FIFO buffer */
STATIC void SSP_Read2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a006a94:	f013 0f04 	tst.w	r3, #4
1a006a98:	d01b      	beq.n	1a006ad2 <SSP_Read2BFifo+0x40>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a006a9a:	68ca      	ldr	r2, [r1, #12]
1a006a9c:	690b      	ldr	r3, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a006a9e:	429a      	cmp	r2, r3
1a006aa0:	d216      	bcs.n	1a006ad0 <SSP_Read2BFifo+0x3e>
{
1a006aa2:	b410      	push	{r4}
1a006aa4:	e00a      	b.n	1a006abc <SSP_Read2BFifo+0x2a>
		rDat = Chip_SSP_ReceiveFrame(pSSP);
		if (xf_setup->rx_data) {
			*(uint16_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
		}

		xf_setup->rx_cnt += 2;
1a006aa6:	68cb      	ldr	r3, [r1, #12]
1a006aa8:	3302      	adds	r3, #2
1a006aaa:	60cb      	str	r3, [r1, #12]
1a006aac:	68c3      	ldr	r3, [r0, #12]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a006aae:	f013 0f04 	tst.w	r3, #4
1a006ab2:	d00a      	beq.n	1a006aca <SSP_Read2BFifo+0x38>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a006ab4:	68ca      	ldr	r2, [r1, #12]
1a006ab6:	690b      	ldr	r3, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a006ab8:	429a      	cmp	r2, r3
1a006aba:	d206      	bcs.n	1a006aca <SSP_Read2BFifo+0x38>
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a006abc:	6883      	ldr	r3, [r0, #8]
1a006abe:	b29b      	uxth	r3, r3
		if (xf_setup->rx_data) {
1a006ac0:	688c      	ldr	r4, [r1, #8]
1a006ac2:	2c00      	cmp	r4, #0
1a006ac4:	d0ef      	beq.n	1a006aa6 <SSP_Read2BFifo+0x14>
			*(uint16_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
1a006ac6:	52a3      	strh	r3, [r4, r2]
1a006ac8:	e7ed      	b.n	1a006aa6 <SSP_Read2BFifo+0x14>
	}
}
1a006aca:	f85d 4b04 	ldr.w	r4, [sp], #4
1a006ace:	4770      	bx	lr
1a006ad0:	4770      	bx	lr
1a006ad2:	4770      	bx	lr

1a006ad4 <SSP_Read1BFifo>:
	return (pSSP->SR & Stat) ? SET : RESET;
1a006ad4:	68c3      	ldr	r3, [r0, #12]
/** SSP macro: read 2 bytes from FIFO buffer */
STATIC void SSP_Read1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a006ad6:	f013 0f04 	tst.w	r3, #4
1a006ada:	d01a      	beq.n	1a006b12 <SSP_Read1BFifo+0x3e>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a006adc:	68cb      	ldr	r3, [r1, #12]
1a006ade:	690a      	ldr	r2, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a006ae0:	4293      	cmp	r3, r2
1a006ae2:	d215      	bcs.n	1a006b10 <SSP_Read1BFifo+0x3c>
{
1a006ae4:	b410      	push	{r4}
1a006ae6:	e00a      	b.n	1a006afe <SSP_Read1BFifo+0x2a>
		rDat = Chip_SSP_ReceiveFrame(pSSP);
		if (xf_setup->rx_data) {
			*(uint8_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
		}

		xf_setup->rx_cnt++;
1a006ae8:	68cb      	ldr	r3, [r1, #12]
1a006aea:	3301      	adds	r3, #1
1a006aec:	60cb      	str	r3, [r1, #12]
1a006aee:	68c3      	ldr	r3, [r0, #12]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a006af0:	f013 0f04 	tst.w	r3, #4
1a006af4:	d009      	beq.n	1a006b0a <SSP_Read1BFifo+0x36>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a006af6:	68cb      	ldr	r3, [r1, #12]
1a006af8:	690a      	ldr	r2, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a006afa:	4293      	cmp	r3, r2
1a006afc:	d205      	bcs.n	1a006b0a <SSP_Read1BFifo+0x36>
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a006afe:	6884      	ldr	r4, [r0, #8]
		if (xf_setup->rx_data) {
1a006b00:	688a      	ldr	r2, [r1, #8]
1a006b02:	2a00      	cmp	r2, #0
1a006b04:	d0f0      	beq.n	1a006ae8 <SSP_Read1BFifo+0x14>
			*(uint8_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
1a006b06:	54d4      	strb	r4, [r2, r3]
1a006b08:	e7ee      	b.n	1a006ae8 <SSP_Read1BFifo+0x14>
	}
}
1a006b0a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a006b0e:	4770      	bx	lr
1a006b10:	4770      	bx	lr
1a006b12:	4770      	bx	lr

1a006b14 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a006b14:	4b03      	ldr	r3, [pc, #12]	; (1a006b24 <Chip_SSP_GetClockIndex+0x10>)
1a006b16:	4298      	cmp	r0, r3
1a006b18:	d001      	beq.n	1a006b1e <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a006b1a:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a006b1c:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a006b1e:	20a5      	movs	r0, #165	; 0xa5
1a006b20:	4770      	bx	lr
1a006b22:	bf00      	nop
1a006b24:	400c5000 	.word	0x400c5000

1a006b28 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a006b28:	4b04      	ldr	r3, [pc, #16]	; (1a006b3c <Chip_SSP_GetPeriphClockIndex+0x14>)
1a006b2a:	4298      	cmp	r0, r3
1a006b2c:	d002      	beq.n	1a006b34 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a006b2e:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a006b32:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a006b34:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a006b38:	4770      	bx	lr
1a006b3a:	bf00      	nop
1a006b3c:	400c5000 	.word	0x400c5000

1a006b40 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a006b40:	6803      	ldr	r3, [r0, #0]
1a006b42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a006b46:	0209      	lsls	r1, r1, #8
1a006b48:	b289      	uxth	r1, r1
1a006b4a:	4319      	orrs	r1, r3
1a006b4c:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a006b4e:	6102      	str	r2, [r0, #16]
}
1a006b50:	4770      	bx	lr

1a006b52 <Chip_SSP_RWFrames_Blocking>:

/* SSP Polling Read/Write in blocking mode */
uint32_t Chip_SSP_RWFrames_Blocking(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
1a006b52:	b538      	push	{r3, r4, r5, lr}
1a006b54:	4604      	mov	r4, r0
1a006b56:	460d      	mov	r5, r1
	/* Clear all remaining frames in RX FIFO */
	while (Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE)) {
1a006b58:	e000      	b.n	1a006b5c <Chip_SSP_RWFrames_Blocking+0xa>
1a006b5a:	68a3      	ldr	r3, [r4, #8]
	return (pSSP->SR & Stat) ? SET : RESET;
1a006b5c:	68e3      	ldr	r3, [r4, #12]
1a006b5e:	f013 0f04 	tst.w	r3, #4
1a006b62:	d1fa      	bne.n	1a006b5a <Chip_SSP_RWFrames_Blocking+0x8>
	pSSP->ICR = IntClear;
1a006b64:	2303      	movs	r3, #3
1a006b66:	6223      	str	r3, [r4, #32]
	return SSP_CR0_DSS(pSSP->CR0);
1a006b68:	6823      	ldr	r3, [r4, #0]
1a006b6a:	f003 030f 	and.w	r3, r3, #15
	}

	/* Clear status */
	Chip_SSP_ClearIntPending(pSSP, SSP_INT_CLEAR_BITMASK);

	if (Chip_SSP_GetDataSize(pSSP) > SSP_BITS_8) {
1a006b6e:	2b07      	cmp	r3, #7
1a006b70:	d808      	bhi.n	1a006b84 <Chip_SSP_RWFrames_Blocking+0x32>
1a006b72:	e022      	b.n	1a006bba <Chip_SSP_RWFrames_Blocking+0x68>
	return (pSSP->RIS & RawInt) ? SET : RESET;
1a006b74:	69a3      	ldr	r3, [r4, #24]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
				SSP_Write2BFifo(pSSP, xf_setup);
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
1a006b76:	f013 0f01 	tst.w	r3, #1
1a006b7a:	d139      	bne.n	1a006bf0 <Chip_SSP_RWFrames_Blocking+0x9e>
				return ERROR;
			}

			/* Check for any data available in RX FIFO */
			SSP_Read2BFifo(pSSP, xf_setup);
1a006b7c:	4629      	mov	r1, r5
1a006b7e:	4620      	mov	r0, r4
1a006b80:	f7ff ff87 	bl	1a006a92 <SSP_Read2BFifo>
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
1a006b84:	68ea      	ldr	r2, [r5, #12]
1a006b86:	692b      	ldr	r3, [r5, #16]
1a006b88:	429a      	cmp	r2, r3
1a006b8a:	d302      	bcc.n	1a006b92 <Chip_SSP_RWFrames_Blocking+0x40>
1a006b8c:	686a      	ldr	r2, [r5, #4]
1a006b8e:	4293      	cmp	r3, r2
1a006b90:	d926      	bls.n	1a006be0 <Chip_SSP_RWFrames_Blocking+0x8e>
	return (pSSP->SR & Stat) ? SET : RESET;
1a006b92:	68e2      	ldr	r2, [r4, #12]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
1a006b94:	f012 0f02 	tst.w	r2, #2
1a006b98:	d0ec      	beq.n	1a006b74 <Chip_SSP_RWFrames_Blocking+0x22>
1a006b9a:	686a      	ldr	r2, [r5, #4]
1a006b9c:	429a      	cmp	r2, r3
1a006b9e:	d2e9      	bcs.n	1a006b74 <Chip_SSP_RWFrames_Blocking+0x22>
				SSP_Write2BFifo(pSSP, xf_setup);
1a006ba0:	4629      	mov	r1, r5
1a006ba2:	4620      	mov	r0, r4
1a006ba4:	f7ff ff5c 	bl	1a006a60 <SSP_Write2BFifo>
1a006ba8:	e7e4      	b.n	1a006b74 <Chip_SSP_RWFrames_Blocking+0x22>
	return (pSSP->RIS & RawInt) ? SET : RESET;
1a006baa:	69a3      	ldr	r3, [r4, #24]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
				SSP_Write1BFifo(pSSP, xf_setup);
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
1a006bac:	f013 0f01 	tst.w	r3, #1
1a006bb0:	d120      	bne.n	1a006bf4 <Chip_SSP_RWFrames_Blocking+0xa2>
				return ERROR;
			}

			/* Check for any data available in RX FIFO */
			SSP_Read1BFifo(pSSP, xf_setup);
1a006bb2:	4629      	mov	r1, r5
1a006bb4:	4620      	mov	r0, r4
1a006bb6:	f7ff ff8d 	bl	1a006ad4 <SSP_Read1BFifo>
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
1a006bba:	68ea      	ldr	r2, [r5, #12]
1a006bbc:	692b      	ldr	r3, [r5, #16]
1a006bbe:	429a      	cmp	r2, r3
1a006bc0:	d302      	bcc.n	1a006bc8 <Chip_SSP_RWFrames_Blocking+0x76>
1a006bc2:	686a      	ldr	r2, [r5, #4]
1a006bc4:	4293      	cmp	r3, r2
1a006bc6:	d90b      	bls.n	1a006be0 <Chip_SSP_RWFrames_Blocking+0x8e>
	return (pSSP->SR & Stat) ? SET : RESET;
1a006bc8:	68e2      	ldr	r2, [r4, #12]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
1a006bca:	f012 0f02 	tst.w	r2, #2
1a006bce:	d0ec      	beq.n	1a006baa <Chip_SSP_RWFrames_Blocking+0x58>
1a006bd0:	686a      	ldr	r2, [r5, #4]
1a006bd2:	429a      	cmp	r2, r3
1a006bd4:	d2e9      	bcs.n	1a006baa <Chip_SSP_RWFrames_Blocking+0x58>
				SSP_Write1BFifo(pSSP, xf_setup);
1a006bd6:	4629      	mov	r1, r5
1a006bd8:	4620      	mov	r0, r4
1a006bda:	f7ff ff4e 	bl	1a006a7a <SSP_Write1BFifo>
1a006bde:	e7e4      	b.n	1a006baa <Chip_SSP_RWFrames_Blocking+0x58>
		}
	}
	if (xf_setup->tx_data) {
1a006be0:	682b      	ldr	r3, [r5, #0]
1a006be2:	b10b      	cbz	r3, 1a006be8 <Chip_SSP_RWFrames_Blocking+0x96>
		return xf_setup->tx_cnt;
1a006be4:	6868      	ldr	r0, [r5, #4]
1a006be6:	e004      	b.n	1a006bf2 <Chip_SSP_RWFrames_Blocking+0xa0>
	}
	else if (xf_setup->rx_data) {
1a006be8:	68ab      	ldr	r3, [r5, #8]
1a006bea:	b12b      	cbz	r3, 1a006bf8 <Chip_SSP_RWFrames_Blocking+0xa6>
		return xf_setup->rx_cnt;
1a006bec:	68e8      	ldr	r0, [r5, #12]
1a006bee:	e000      	b.n	1a006bf2 <Chip_SSP_RWFrames_Blocking+0xa0>
				return ERROR;
1a006bf0:	2000      	movs	r0, #0
	}

	return 0;
}
1a006bf2:	bd38      	pop	{r3, r4, r5, pc}
				return ERROR;
1a006bf4:	2000      	movs	r0, #0
1a006bf6:	e7fc      	b.n	1a006bf2 <Chip_SSP_RWFrames_Blocking+0xa0>
	return 0;
1a006bf8:	2000      	movs	r0, #0
1a006bfa:	e7fa      	b.n	1a006bf2 <Chip_SSP_RWFrames_Blocking+0xa0>

1a006bfc <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a006bfc:	b570      	push	{r4, r5, r6, lr}
1a006bfe:	4606      	mov	r6, r0
1a006c00:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a006c02:	f7ff ff91 	bl	1a006b28 <Chip_SSP_GetPeriphClockIndex>
1a006c06:	f7ff fe39 	bl	1a00687c <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a006c0a:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a006c0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a006c10:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a006c12:	e000      	b.n	1a006c16 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a006c14:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a006c16:	42ab      	cmp	r3, r5
1a006c18:	d90b      	bls.n	1a006c32 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a006c1a:	1c4c      	adds	r4, r1, #1
1a006c1c:	fb02 f304 	mul.w	r3, r2, r4
1a006c20:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a006c24:	429d      	cmp	r5, r3
1a006c26:	d2f6      	bcs.n	1a006c16 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a006c28:	2cff      	cmp	r4, #255	; 0xff
1a006c2a:	d9f3      	bls.n	1a006c14 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a006c2c:	3202      	adds	r2, #2
				cr0_div = 0;
1a006c2e:	2100      	movs	r1, #0
1a006c30:	e7f1      	b.n	1a006c16 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a006c32:	4630      	mov	r0, r6
1a006c34:	f7ff ff84 	bl	1a006b40 <Chip_SSP_SetClockRate>
}
1a006c38:	bd70      	pop	{r4, r5, r6, pc}
1a006c3a:	Address 0x000000001a006c3a is out of bounds.


1a006c3c <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a006c3c:	b510      	push	{r4, lr}
1a006c3e:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a006c40:	f7ff ff68 	bl	1a006b14 <Chip_SSP_GetClockIndex>
1a006c44:	f7ff fe00 	bl	1a006848 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a006c48:	4620      	mov	r0, r4
1a006c4a:	f7ff ff6d 	bl	1a006b28 <Chip_SSP_GetPeriphClockIndex>
1a006c4e:	f7ff fdfb 	bl	1a006848 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a006c52:	6863      	ldr	r3, [r4, #4]
1a006c54:	f023 0304 	bic.w	r3, r3, #4
1a006c58:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a006c5a:	6823      	ldr	r3, [r4, #0]
1a006c5c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a006c60:	f043 0307 	orr.w	r3, r3, #7
1a006c64:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a006c66:	4902      	ldr	r1, [pc, #8]	; (1a006c70 <Chip_SSP_Init+0x34>)
1a006c68:	4620      	mov	r0, r4
1a006c6a:	f7ff ffc7 	bl	1a006bfc <Chip_SSP_SetBitRate>
}
1a006c6e:	bd10      	pop	{r4, pc}
1a006c70:	000186a0 	.word	0x000186a0

1a006c74 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a006c74:	2901      	cmp	r1, #1
1a006c76:	d000      	beq.n	1a006c7a <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a006c78:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a006c7a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a006c7e:	0082      	lsls	r2, r0, #2
1a006c80:	4b03      	ldr	r3, [pc, #12]	; (1a006c90 <Chip_I2C_EventHandler+0x1c>)
1a006c82:	4413      	add	r3, r2
1a006c84:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a006c86:	7d13      	ldrb	r3, [r2, #20]
1a006c88:	b2db      	uxtb	r3, r3
1a006c8a:	2b04      	cmp	r3, #4
1a006c8c:	d0fb      	beq.n	1a006c86 <Chip_I2C_EventHandler+0x12>
1a006c8e:	e7f3      	b.n	1a006c78 <Chip_I2C_EventHandler+0x4>
1a006c90:	1000001c 	.word	0x1000001c

1a006c94 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a006c94:	b570      	push	{r4, r5, r6, lr}
1a006c96:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a006c98:	4e06      	ldr	r6, [pc, #24]	; (1a006cb4 <Chip_I2C_Init+0x20>)
1a006c9a:	00c4      	lsls	r4, r0, #3
1a006c9c:	1a22      	subs	r2, r4, r0
1a006c9e:	0093      	lsls	r3, r2, #2
1a006ca0:	4433      	add	r3, r6
1a006ca2:	8898      	ldrh	r0, [r3, #4]
1a006ca4:	f7ff fdd0 	bl	1a006848 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a006ca8:	1b64      	subs	r4, r4, r5
1a006caa:	00a3      	lsls	r3, r4, #2
1a006cac:	58f3      	ldr	r3, [r6, r3]
1a006cae:	226c      	movs	r2, #108	; 0x6c
1a006cb0:	619a      	str	r2, [r3, #24]
}
1a006cb2:	bd70      	pop	{r4, r5, r6, pc}
1a006cb4:	1000001c 	.word	0x1000001c

1a006cb8 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a006cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a006cbc:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a006cbe:	4e0b      	ldr	r6, [pc, #44]	; (1a006cec <Chip_I2C_SetClockRate+0x34>)
1a006cc0:	00c5      	lsls	r5, r0, #3
1a006cc2:	1a2b      	subs	r3, r5, r0
1a006cc4:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a006cc8:	eb06 0308 	add.w	r3, r6, r8
1a006ccc:	8898      	ldrh	r0, [r3, #4]
1a006cce:	f7ff fdd5 	bl	1a00687c <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a006cd2:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a006cd6:	f856 3008 	ldr.w	r3, [r6, r8]
1a006cda:	0842      	lsrs	r2, r0, #1
1a006cdc:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a006cde:	f856 3008 	ldr.w	r3, [r6, r8]
1a006ce2:	691a      	ldr	r2, [r3, #16]
1a006ce4:	1a80      	subs	r0, r0, r2
1a006ce6:	6158      	str	r0, [r3, #20]
}
1a006ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a006cec:	1000001c 	.word	0x1000001c

1a006cf0 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a006cf0:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a006cf2:	4a0b      	ldr	r2, [pc, #44]	; (1a006d20 <SystemInit+0x30>)
1a006cf4:	4b0b      	ldr	r3, [pc, #44]	; (1a006d24 <SystemInit+0x34>)
1a006cf6:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a006cf8:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a006cfc:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a006cfe:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a006d02:	2b20      	cmp	r3, #32
1a006d04:	d004      	beq.n	1a006d10 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a006d06:	f7ff f9d9 	bl	1a0060bc <Board_SystemInit>
   Board_Init();
1a006d0a:	f7ff f96b 	bl	1a005fe4 <Board_Init>
}
1a006d0e:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a006d10:	4a04      	ldr	r2, [pc, #16]	; (1a006d24 <SystemInit+0x34>)
1a006d12:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a006d16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a006d1a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a006d1e:	e7f2      	b.n	1a006d06 <SystemInit+0x16>
1a006d20:	1a000000 	.word	0x1a000000
1a006d24:	e000ed00 	.word	0xe000ed00

1a006d28 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a006d28:	4b04      	ldr	r3, [pc, #16]	; (1a006d3c <cyclesCounterInit+0x14>)
1a006d2a:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a006d2c:	4a04      	ldr	r2, [pc, #16]	; (1a006d40 <cyclesCounterInit+0x18>)
1a006d2e:	6813      	ldr	r3, [r2, #0]
1a006d30:	f043 0301 	orr.w	r3, r3, #1
1a006d34:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a006d36:	2001      	movs	r0, #1
1a006d38:	4770      	bx	lr
1a006d3a:	bf00      	nop
1a006d3c:	10000054 	.word	0x10000054
1a006d40:	e0001000 	.word	0xe0001000

1a006d44 <uartProcessIRQ>:
{
1a006d44:	b570      	push	{r4, r5, r6, lr}
1a006d46:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a006d48:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a006d4c:	0093      	lsls	r3, r2, #2
1a006d4e:	4a1f      	ldr	r2, [pc, #124]	; (1a006dcc <uartProcessIRQ+0x88>)
1a006d50:	58d6      	ldr	r6, [r2, r3]
	return pUART->LSR;
1a006d52:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a006d54:	b2ed      	uxtb	r5, r5
1a006d56:	f015 0f01 	tst.w	r5, #1
1a006d5a:	d009      	beq.n	1a006d70 <uartProcessIRQ+0x2c>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a006d5c:	b920      	cbnz	r0, 1a006d68 <uartProcessIRQ+0x24>
1a006d5e:	4b1c      	ldr	r3, [pc, #112]	; (1a006dd0 <uartProcessIRQ+0x8c>)
1a006d60:	681b      	ldr	r3, [r3, #0]
1a006d62:	b10b      	cbz	r3, 1a006d68 <uartProcessIRQ+0x24>
         (*rxIsrCallbackUART0)(0);
1a006d64:	2000      	movs	r0, #0
1a006d66:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a006d68:	2c03      	cmp	r4, #3
1a006d6a:	d013      	beq.n	1a006d94 <uartProcessIRQ+0x50>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a006d6c:	2c05      	cmp	r4, #5
1a006d6e:	d018      	beq.n	1a006da2 <uartProcessIRQ+0x5e>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a006d70:	f015 0f20 	tst.w	r5, #32
1a006d74:	d00d      	beq.n	1a006d92 <uartProcessIRQ+0x4e>
	return pUART->IER;
1a006d76:	6873      	ldr	r3, [r6, #4]
1a006d78:	f013 0f02 	tst.w	r3, #2
1a006d7c:	d009      	beq.n	1a006d92 <uartProcessIRQ+0x4e>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a006d7e:	b924      	cbnz	r4, 1a006d8a <uartProcessIRQ+0x46>
1a006d80:	4b14      	ldr	r3, [pc, #80]	; (1a006dd4 <uartProcessIRQ+0x90>)
1a006d82:	681b      	ldr	r3, [r3, #0]
1a006d84:	b10b      	cbz	r3, 1a006d8a <uartProcessIRQ+0x46>
         (*txIsrCallbackUART0)(0);
1a006d86:	2000      	movs	r0, #0
1a006d88:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a006d8a:	2c03      	cmp	r4, #3
1a006d8c:	d010      	beq.n	1a006db0 <uartProcessIRQ+0x6c>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a006d8e:	2c05      	cmp	r4, #5
1a006d90:	d015      	beq.n	1a006dbe <uartProcessIRQ+0x7a>
}
1a006d92:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a006d94:	4b10      	ldr	r3, [pc, #64]	; (1a006dd8 <uartProcessIRQ+0x94>)
1a006d96:	681b      	ldr	r3, [r3, #0]
1a006d98:	2b00      	cmp	r3, #0
1a006d9a:	d0e7      	beq.n	1a006d6c <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART2)(0);
1a006d9c:	2000      	movs	r0, #0
1a006d9e:	4798      	blx	r3
1a006da0:	e7e4      	b.n	1a006d6c <uartProcessIRQ+0x28>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a006da2:	4b0e      	ldr	r3, [pc, #56]	; (1a006ddc <uartProcessIRQ+0x98>)
1a006da4:	681b      	ldr	r3, [r3, #0]
1a006da6:	2b00      	cmp	r3, #0
1a006da8:	d0e2      	beq.n	1a006d70 <uartProcessIRQ+0x2c>
         (*rxIsrCallbackUART3)(0);
1a006daa:	2000      	movs	r0, #0
1a006dac:	4798      	blx	r3
1a006dae:	e7df      	b.n	1a006d70 <uartProcessIRQ+0x2c>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a006db0:	4b0b      	ldr	r3, [pc, #44]	; (1a006de0 <uartProcessIRQ+0x9c>)
1a006db2:	681b      	ldr	r3, [r3, #0]
1a006db4:	2b00      	cmp	r3, #0
1a006db6:	d0ea      	beq.n	1a006d8e <uartProcessIRQ+0x4a>
         (*txIsrCallbackUART2)(0);
1a006db8:	2000      	movs	r0, #0
1a006dba:	4798      	blx	r3
1a006dbc:	e7e7      	b.n	1a006d8e <uartProcessIRQ+0x4a>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a006dbe:	4b09      	ldr	r3, [pc, #36]	; (1a006de4 <uartProcessIRQ+0xa0>)
1a006dc0:	681b      	ldr	r3, [r3, #0]
1a006dc2:	2b00      	cmp	r3, #0
1a006dc4:	d0e5      	beq.n	1a006d92 <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART3)(0);
1a006dc6:	2000      	movs	r0, #0
1a006dc8:	4798      	blx	r3
}
1a006dca:	e7e2      	b.n	1a006d92 <uartProcessIRQ+0x4e>
1a006dcc:	1a0087bc 	.word	0x1a0087bc
1a006dd0:	10003490 	.word	0x10003490
1a006dd4:	1000349c 	.word	0x1000349c
1a006dd8:	10003494 	.word	0x10003494
1a006ddc:	10003498 	.word	0x10003498
1a006de0:	100034a0 	.word	0x100034a0
1a006de4:	100034a4 	.word	0x100034a4

1a006de8 <uartRxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
1a006de8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a006dec:	0083      	lsls	r3, r0, #2
1a006dee:	4a03      	ldr	r2, [pc, #12]	; (1a006dfc <uartRxReady+0x14>)
1a006df0:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a006df2:	6958      	ldr	r0, [r3, #20]
}
1a006df4:	f000 0001 	and.w	r0, r0, #1
1a006df8:	4770      	bx	lr
1a006dfa:	bf00      	nop
1a006dfc:	1a0087bc 	.word	0x1a0087bc

1a006e00 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a006e00:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a006e04:	0083      	lsls	r3, r0, #2
1a006e06:	4a03      	ldr	r2, [pc, #12]	; (1a006e14 <uartTxReady+0x14>)
1a006e08:	58d3      	ldr	r3, [r2, r3]
1a006e0a:	6958      	ldr	r0, [r3, #20]
}
1a006e0c:	f000 0020 	and.w	r0, r0, #32
1a006e10:	4770      	bx	lr
1a006e12:	bf00      	nop
1a006e14:	1a0087bc 	.word	0x1a0087bc

1a006e18 <uartRxRead>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a006e18:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a006e1c:	0083      	lsls	r3, r0, #2
1a006e1e:	4a02      	ldr	r2, [pc, #8]	; (1a006e28 <uartRxRead+0x10>)
1a006e20:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a006e22:	6818      	ldr	r0, [r3, #0]
}
1a006e24:	b2c0      	uxtb	r0, r0
1a006e26:	4770      	bx	lr
1a006e28:	1a0087bc 	.word	0x1a0087bc

1a006e2c <uartTxWrite>:
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a006e2c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a006e30:	0083      	lsls	r3, r0, #2
1a006e32:	4a02      	ldr	r2, [pc, #8]	; (1a006e3c <uartTxWrite+0x10>)
1a006e34:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a006e36:	6019      	str	r1, [r3, #0]
}
1a006e38:	4770      	bx	lr
1a006e3a:	bf00      	nop
1a006e3c:	1a0087bc 	.word	0x1a0087bc

1a006e40 <uartInit>:
{
1a006e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a006e44:	4680      	mov	r8, r0
1a006e46:	4689      	mov	r9, r1
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a006e48:	4c19      	ldr	r4, [pc, #100]	; (1a006eb0 <uartInit+0x70>)
1a006e4a:	0045      	lsls	r5, r0, #1
1a006e4c:	182a      	adds	r2, r5, r0
1a006e4e:	0093      	lsls	r3, r2, #2
1a006e50:	18e6      	adds	r6, r4, r3
1a006e52:	58e7      	ldr	r7, [r4, r3]
1a006e54:	4638      	mov	r0, r7
1a006e56:	f7ff f94d 	bl	1a0060f4 <Chip_UART_Init>
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a006e5a:	4649      	mov	r1, r9
1a006e5c:	4638      	mov	r0, r7
1a006e5e:	f7ff f973 	bl	1a006148 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a006e62:	2307      	movs	r3, #7
1a006e64:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a006e66:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a006e68:	2301      	movs	r3, #1
1a006e6a:	65fb      	str	r3, [r7, #92]	; 0x5c
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a006e6c:	7930      	ldrb	r0, [r6, #4]
1a006e6e:	7973      	ldrb	r3, [r6, #5]
1a006e70:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a006e72:	f042 0218 	orr.w	r2, r2, #24
1a006e76:	490f      	ldr	r1, [pc, #60]	; (1a006eb4 <uartInit+0x74>)
1a006e78:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a006e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a006e80:	79f0      	ldrb	r0, [r6, #7]
1a006e82:	7a33      	ldrb	r3, [r6, #8]
1a006e84:	7a72      	ldrb	r2, [r6, #9]
1a006e86:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a006e8a:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a006e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   if( uart == UART_485 ) {
1a006e92:	f1b8 0f01 	cmp.w	r8, #1
1a006e96:	d001      	beq.n	1a006e9c <uartInit+0x5c>
}
1a006e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a006e9c:	4a06      	ldr	r2, [pc, #24]	; (1a006eb8 <uartInit+0x78>)
1a006e9e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a006ea0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a006ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
1a006ea6:	221a      	movs	r2, #26
1a006ea8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a006eac:	e7f4      	b.n	1a006e98 <uartInit+0x58>
1a006eae:	bf00      	nop
1a006eb0:	1a0087bc 	.word	0x1a0087bc
1a006eb4:	40086000 	.word	0x40086000
1a006eb8:	40081000 	.word	0x40081000

1a006ebc <uartReadByte>:
{
1a006ebc:	b538      	push	{r3, r4, r5, lr}
1a006ebe:	4605      	mov	r5, r0
1a006ec0:	460c      	mov	r4, r1
   if ( uartRxReady(uart) ) {
1a006ec2:	f7ff ff91 	bl	1a006de8 <uartRxReady>
1a006ec6:	4603      	mov	r3, r0
1a006ec8:	b908      	cbnz	r0, 1a006ece <uartReadByte+0x12>
}
1a006eca:	4618      	mov	r0, r3
1a006ecc:	bd38      	pop	{r3, r4, r5, pc}
      *receivedByte = uartRxRead(uart);
1a006ece:	4628      	mov	r0, r5
1a006ed0:	f7ff ffa2 	bl	1a006e18 <uartRxRead>
1a006ed4:	7020      	strb	r0, [r4, #0]
   bool_t retVal = TRUE;
1a006ed6:	2301      	movs	r3, #1
1a006ed8:	e7f7      	b.n	1a006eca <uartReadByte+0xe>

1a006eda <waitForReceiveStringOrTimeout>:
{
1a006eda:	b510      	push	{r4, lr}
1a006edc:	b082      	sub	sp, #8
1a006ede:	460c      	mov	r4, r1
   switch( instance->state ) {
1a006ee0:	780b      	ldrb	r3, [r1, #0]
1a006ee2:	2b04      	cmp	r3, #4
1a006ee4:	d836      	bhi.n	1a006f54 <waitForReceiveStringOrTimeout+0x7a>
1a006ee6:	e8df f003 	tbb	[pc, r3]
1a006eea:	1003      	.short	0x1003
1a006eec:	352f      	.short	0x352f
1a006eee:	32          	.byte	0x32
1a006eef:	00          	.byte	0x00
      delayInit( &(instance->delay), instance->timeout );
1a006ef0:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a006ef4:	f101 0018 	add.w	r0, r1, #24
1a006ef8:	f000 fac8 	bl	1a00748c <delayInit>
      instance->stringIndex = 0;
1a006efc:	2300      	movs	r3, #0
1a006efe:	8163      	strh	r3, [r4, #10]
      instance->state = UART_RECEIVE_STRING_RECEIVING;
1a006f00:	2301      	movs	r3, #1
1a006f02:	7023      	strb	r3, [r4, #0]
}
1a006f04:	7820      	ldrb	r0, [r4, #0]
1a006f06:	b002      	add	sp, #8
1a006f08:	bd10      	pop	{r4, pc}
      if( uartReadByte( uart, &receiveByte ) ) {
1a006f0a:	f10d 0107 	add.w	r1, sp, #7
1a006f0e:	f7ff ffd5 	bl	1a006ebc <uartReadByte>
1a006f12:	b130      	cbz	r0, 1a006f22 <waitForReceiveStringOrTimeout+0x48>
         if( (instance->string)[(instance->stringIndex)] == receiveByte ) {
1a006f14:	6862      	ldr	r2, [r4, #4]
1a006f16:	8963      	ldrh	r3, [r4, #10]
1a006f18:	5cd1      	ldrb	r1, [r2, r3]
1a006f1a:	f89d 2007 	ldrb.w	r2, [sp, #7]
1a006f1e:	4291      	cmp	r1, r2
1a006f20:	d008      	beq.n	1a006f34 <waitForReceiveStringOrTimeout+0x5a>
      if( delayRead( &(instance->delay) ) ) {
1a006f22:	f104 0018 	add.w	r0, r4, #24
1a006f26:	f000 fac1 	bl	1a0074ac <delayRead>
1a006f2a:	2800      	cmp	r0, #0
1a006f2c:	d0ea      	beq.n	1a006f04 <waitForReceiveStringOrTimeout+0x2a>
         instance->state = UART_RECEIVE_STRING_TIMEOUT;
1a006f2e:	2304      	movs	r3, #4
1a006f30:	7023      	strb	r3, [r4, #0]
1a006f32:	e7e7      	b.n	1a006f04 <waitForReceiveStringOrTimeout+0x2a>
            (instance->stringIndex)++;
1a006f34:	3301      	adds	r3, #1
1a006f36:	b29b      	uxth	r3, r3
1a006f38:	8163      	strh	r3, [r4, #10]
            if( (instance->stringIndex) == (instance->stringSize - 1) ) {
1a006f3a:	8922      	ldrh	r2, [r4, #8]
1a006f3c:	3a01      	subs	r2, #1
1a006f3e:	4293      	cmp	r3, r2
1a006f40:	d1ef      	bne.n	1a006f22 <waitForReceiveStringOrTimeout+0x48>
               instance->state = UART_RECEIVE_STRING_RECEIVED_OK;
1a006f42:	2302      	movs	r3, #2
1a006f44:	7023      	strb	r3, [r4, #0]
1a006f46:	e7ec      	b.n	1a006f22 <waitForReceiveStringOrTimeout+0x48>
      instance->state = UART_RECEIVE_STRING_CONFIG;
1a006f48:	2300      	movs	r3, #0
1a006f4a:	700b      	strb	r3, [r1, #0]
      break;
1a006f4c:	e7da      	b.n	1a006f04 <waitForReceiveStringOrTimeout+0x2a>
      instance->state = UART_RECEIVE_STRING_CONFIG;
1a006f4e:	2300      	movs	r3, #0
1a006f50:	700b      	strb	r3, [r1, #0]
      break;
1a006f52:	e7d7      	b.n	1a006f04 <waitForReceiveStringOrTimeout+0x2a>
      instance->state = UART_RECEIVE_STRING_CONFIG;
1a006f54:	2300      	movs	r3, #0
1a006f56:	700b      	strb	r3, [r1, #0]
      break;
1a006f58:	e7d4      	b.n	1a006f04 <waitForReceiveStringOrTimeout+0x2a>

1a006f5a <waitForReceiveStringOrTimeoutBlocking>:
{
1a006f5a:	b510      	push	{r4, lr}
1a006f5c:	b08c      	sub	sp, #48	; 0x30
1a006f5e:	4604      	mov	r4, r0
   waitText.state = UART_RECEIVE_STRING_CONFIG;
1a006f60:	2000      	movs	r0, #0
1a006f62:	f88d 0000 	strb.w	r0, [sp]
   waitText.string =  string;
1a006f66:	9101      	str	r1, [sp, #4]
   waitText.stringSize = stringSize;
1a006f68:	f8ad 2008 	strh.w	r2, [sp, #8]
   waitText.timeout = timeout;
1a006f6c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
1a006f70:	e9cd 2304 	strd	r2, r3, [sp, #16]
   while( waitTextState != UART_RECEIVE_STRING_RECEIVED_OK &&
1a006f74:	e003      	b.n	1a006f7e <waitForReceiveStringOrTimeoutBlocking+0x24>
      waitTextState = waitForReceiveStringOrTimeout( uart, &waitText );
1a006f76:	4669      	mov	r1, sp
1a006f78:	4620      	mov	r0, r4
1a006f7a:	f7ff ffae 	bl	1a006eda <waitForReceiveStringOrTimeout>
   while( waitTextState != UART_RECEIVE_STRING_RECEIVED_OK &&
1a006f7e:	2802      	cmp	r0, #2
1a006f80:	d001      	beq.n	1a006f86 <waitForReceiveStringOrTimeoutBlocking+0x2c>
1a006f82:	2804      	cmp	r0, #4
1a006f84:	d1f7      	bne.n	1a006f76 <waitForReceiveStringOrTimeoutBlocking+0x1c>
   if( waitTextState == UART_RECEIVE_STRING_TIMEOUT ) {
1a006f86:	2804      	cmp	r0, #4
1a006f88:	d002      	beq.n	1a006f90 <waitForReceiveStringOrTimeoutBlocking+0x36>
   bool_t retVal = TRUE; // True if OK
1a006f8a:	2001      	movs	r0, #1
}
1a006f8c:	b00c      	add	sp, #48	; 0x30
1a006f8e:	bd10      	pop	{r4, pc}
      retVal = FALSE;
1a006f90:	2000      	movs	r0, #0
1a006f92:	e7fb      	b.n	1a006f8c <waitForReceiveStringOrTimeoutBlocking+0x32>

1a006f94 <uartWriteByte>:
{
1a006f94:	b538      	push	{r3, r4, r5, lr}
1a006f96:	4604      	mov	r4, r0
1a006f98:	460d      	mov	r5, r1
   while( uartTxReady( uart ) == FALSE );
1a006f9a:	4620      	mov	r0, r4
1a006f9c:	f7ff ff30 	bl	1a006e00 <uartTxReady>
1a006fa0:	2800      	cmp	r0, #0
1a006fa2:	d0fa      	beq.n	1a006f9a <uartWriteByte+0x6>
   uartTxWrite( uart, value );
1a006fa4:	4629      	mov	r1, r5
1a006fa6:	4620      	mov	r0, r4
1a006fa8:	f7ff ff40 	bl	1a006e2c <uartTxWrite>
}
1a006fac:	bd38      	pop	{r3, r4, r5, pc}

1a006fae <uartWriteString>:
{
1a006fae:	b538      	push	{r3, r4, r5, lr}
1a006fb0:	4605      	mov	r5, r0
1a006fb2:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a006fb4:	e003      	b.n	1a006fbe <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a006fb6:	4628      	mov	r0, r5
1a006fb8:	f7ff ffec 	bl	1a006f94 <uartWriteByte>
      str++;
1a006fbc:	3401      	adds	r4, #1
   while( *str != 0 ) {
1a006fbe:	7821      	ldrb	r1, [r4, #0]
1a006fc0:	2900      	cmp	r1, #0
1a006fc2:	d1f8      	bne.n	1a006fb6 <uartWriteString+0x8>
}
1a006fc4:	bd38      	pop	{r3, r4, r5, pc}

1a006fc6 <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a006fc6:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a006fc8:	2003      	movs	r0, #3
1a006fca:	f7ff febb 	bl	1a006d44 <uartProcessIRQ>
}
1a006fce:	bd08      	pop	{r3, pc}

1a006fd0 <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a006fd0:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a006fd2:	2005      	movs	r0, #5
1a006fd4:	f7ff feb6 	bl	1a006d44 <uartProcessIRQ>
}
1a006fd8:	bd08      	pop	{r3, pc}
1a006fda:	Address 0x000000001a006fda is out of bounds.


1a006fdc <spiInit>:
bool_t spiInit( spiMap_t spi )
{

   bool_t retVal = TRUE;

   if( spi == SPI0 ) {
1a006fdc:	b108      	cbz	r0, 1a006fe2 <spiInit+0x6>
      #else
         #error BOARD compile variable must be defined
      #endif

   } else {
      retVal = FALSE;
1a006fde:	2000      	movs	r0, #0
   }

   return retVal;
}
1a006fe0:	4770      	bx	lr
{
1a006fe2:	b570      	push	{r4, r5, r6, lr}
1a006fe4:	4c0e      	ldr	r4, [pc, #56]	; (1a007020 <spiInit+0x44>)
1a006fe6:	2600      	movs	r6, #0
1a006fe8:	f8c4 6790 	str.w	r6, [r4, #1936]	; 0x790
1a006fec:	23c5      	movs	r3, #197	; 0xc5
1a006fee:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
1a006ff2:	2305      	movs	r3, #5
1a006ff4:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
         Chip_SSP_Init( LPC_SSP1 );
1a006ff8:	4d0a      	ldr	r5, [pc, #40]	; (1a007024 <spiInit+0x48>)
1a006ffa:	4628      	mov	r0, r5
1a006ffc:	f7ff fe1e 	bl	1a006c3c <Chip_SSP_Init>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a007000:	686b      	ldr	r3, [r5, #4]
1a007002:	f043 0302 	orr.w	r3, r3, #2
1a007006:	606b      	str	r3, [r5, #4]
1a007008:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
	pGPIO->DIR[port] |= 1UL << pin;
1a00700c:	4906      	ldr	r1, [pc, #24]	; (1a007028 <spiInit+0x4c>)
1a00700e:	f242 020c 	movw	r2, #8204	; 0x200c
1a007012:	588b      	ldr	r3, [r1, r2]
1a007014:	f043 0301 	orr.w	r3, r3, #1
1a007018:	508b      	str	r3, [r1, r2]
   bool_t retVal = TRUE;
1a00701a:	2001      	movs	r0, #1
}
1a00701c:	bd70      	pop	{r4, r5, r6, pc}
1a00701e:	bf00      	nop
1a007020:	40086000 	.word	0x40086000
1a007024:	400c5000 	.word	0x400c5000
1a007028:	400f4000 	.word	0x400f4000

1a00702c <tickRead>:
}
*/

// Read Tick Counter
tick_t tickRead( void )
{
1a00702c:	b508      	push	{r3, lr}
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
1a00702e:	f7fd fbd1 	bl	1a0047d4 <xTaskGetTickCount>
   #else
      return tickCounter;
   #endif
}
1a007032:	2100      	movs	r1, #0
1a007034:	bd08      	pop	{r3, pc}

1a007036 <errorOcurred>:

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
1a007036:	e7fe      	b.n	1a007036 <errorOcurred>

1a007038 <doNothing>:
   while(1);
}

static void doNothing( void* ptr )
{
}
1a007038:	4770      	bx	lr
1a00703a:	Address 0x000000001a00703a is out of bounds.


1a00703c <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a00703c:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00703e:	2400      	movs	r4, #0
1a007040:	e001      	b.n	1a007046 <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a007042:	3401      	adds	r4, #1
1a007044:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a007046:	2c03      	cmp	r4, #3
1a007048:	d812      	bhi.n	1a007070 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a00704a:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00704c:	4b09      	ldr	r3, [pc, #36]	; (1a007074 <TIMER0_IRQHandler+0x38>)
1a00704e:	681a      	ldr	r2, [r3, #0]
1a007050:	f004 010f 	and.w	r1, r4, #15
1a007054:	2301      	movs	r3, #1
1a007056:	408b      	lsls	r3, r1
1a007058:	421a      	tst	r2, r3
1a00705a:	d0f2      	beq.n	1a007042 <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a00705c:	4b06      	ldr	r3, [pc, #24]	; (1a007078 <TIMER0_IRQHandler+0x3c>)
1a00705e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a007062:	2000      	movs	r0, #0
1a007064:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a007066:	2301      	movs	r3, #1
1a007068:	40ab      	lsls	r3, r5
1a00706a:	4a02      	ldr	r2, [pc, #8]	; (1a007074 <TIMER0_IRQHandler+0x38>)
1a00706c:	6013      	str	r3, [r2, #0]
1a00706e:	e7e8      	b.n	1a007042 <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a007070:	bd38      	pop	{r3, r4, r5, pc}
1a007072:	bf00      	nop
1a007074:	40084000 	.word	0x40084000
1a007078:	10000060 	.word	0x10000060

1a00707c <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a00707c:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00707e:	2400      	movs	r4, #0
1a007080:	e001      	b.n	1a007086 <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a007082:	3401      	adds	r4, #1
1a007084:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a007086:	2c03      	cmp	r4, #3
1a007088:	d813      	bhi.n	1a0070b2 <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a00708a:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00708c:	4b09      	ldr	r3, [pc, #36]	; (1a0070b4 <TIMER1_IRQHandler+0x38>)
1a00708e:	681a      	ldr	r2, [r3, #0]
1a007090:	f004 010f 	and.w	r1, r4, #15
1a007094:	2301      	movs	r3, #1
1a007096:	408b      	lsls	r3, r1
1a007098:	421a      	tst	r2, r3
1a00709a:	d0f2      	beq.n	1a007082 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a00709c:	1d23      	adds	r3, r4, #4
1a00709e:	4a06      	ldr	r2, [pc, #24]	; (1a0070b8 <TIMER1_IRQHandler+0x3c>)
1a0070a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0070a4:	2000      	movs	r0, #0
1a0070a6:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0070a8:	2301      	movs	r3, #1
1a0070aa:	40ab      	lsls	r3, r5
1a0070ac:	4a01      	ldr	r2, [pc, #4]	; (1a0070b4 <TIMER1_IRQHandler+0x38>)
1a0070ae:	6013      	str	r3, [r2, #0]
1a0070b0:	e7e7      	b.n	1a007082 <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a0070b2:	bd38      	pop	{r3, r4, r5, pc}
1a0070b4:	40085000 	.word	0x40085000
1a0070b8:	10000060 	.word	0x10000060

1a0070bc <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a0070bc:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0070be:	2400      	movs	r4, #0
1a0070c0:	e001      	b.n	1a0070c6 <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0070c2:	3401      	adds	r4, #1
1a0070c4:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0070c6:	2c03      	cmp	r4, #3
1a0070c8:	d814      	bhi.n	1a0070f4 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a0070ca:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0070cc:	4b0a      	ldr	r3, [pc, #40]	; (1a0070f8 <TIMER2_IRQHandler+0x3c>)
1a0070ce:	681a      	ldr	r2, [r3, #0]
1a0070d0:	f004 010f 	and.w	r1, r4, #15
1a0070d4:	2301      	movs	r3, #1
1a0070d6:	408b      	lsls	r3, r1
1a0070d8:	421a      	tst	r2, r3
1a0070da:	d0f2      	beq.n	1a0070c2 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0070dc:	f104 0308 	add.w	r3, r4, #8
1a0070e0:	4a06      	ldr	r2, [pc, #24]	; (1a0070fc <TIMER2_IRQHandler+0x40>)
1a0070e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0070e6:	2000      	movs	r0, #0
1a0070e8:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0070ea:	2301      	movs	r3, #1
1a0070ec:	40ab      	lsls	r3, r5
1a0070ee:	4a02      	ldr	r2, [pc, #8]	; (1a0070f8 <TIMER2_IRQHandler+0x3c>)
1a0070f0:	6013      	str	r3, [r2, #0]
1a0070f2:	e7e6      	b.n	1a0070c2 <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a0070f4:	bd38      	pop	{r3, r4, r5, pc}
1a0070f6:	bf00      	nop
1a0070f8:	400c3000 	.word	0x400c3000
1a0070fc:	10000060 	.word	0x10000060

1a007100 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a007100:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a007102:	2400      	movs	r4, #0
1a007104:	e001      	b.n	1a00710a <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a007106:	3401      	adds	r4, #1
1a007108:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00710a:	2c03      	cmp	r4, #3
1a00710c:	d814      	bhi.n	1a007138 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a00710e:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a007110:	4b0a      	ldr	r3, [pc, #40]	; (1a00713c <TIMER3_IRQHandler+0x3c>)
1a007112:	681a      	ldr	r2, [r3, #0]
1a007114:	f004 010f 	and.w	r1, r4, #15
1a007118:	2301      	movs	r3, #1
1a00711a:	408b      	lsls	r3, r1
1a00711c:	421a      	tst	r2, r3
1a00711e:	d0f2      	beq.n	1a007106 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a007120:	f104 030c 	add.w	r3, r4, #12
1a007124:	4a06      	ldr	r2, [pc, #24]	; (1a007140 <TIMER3_IRQHandler+0x40>)
1a007126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00712a:	2000      	movs	r0, #0
1a00712c:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00712e:	2301      	movs	r3, #1
1a007130:	40ab      	lsls	r3, r5
1a007132:	4a02      	ldr	r2, [pc, #8]	; (1a00713c <TIMER3_IRQHandler+0x3c>)
1a007134:	6013      	str	r3, [r2, #0]
1a007136:	e7e6      	b.n	1a007106 <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a007138:	bd38      	pop	{r3, r4, r5, pc}
1a00713a:	bf00      	nop
1a00713c:	400c4000 	.word	0x400c4000
1a007140:	10000060 	.word	0x10000060

1a007144 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a007144:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a007146:	4d0b      	ldr	r5, [pc, #44]	; (1a007174 <gpioObtainPinInit+0x30>)
1a007148:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a00714c:	182c      	adds	r4, r5, r0
1a00714e:	5628      	ldrsb	r0, [r5, r0]
1a007150:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a007152:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a007156:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a007158:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a00715c:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a00715e:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a007162:	9b02      	ldr	r3, [sp, #8]
1a007164:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a007166:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a00716a:	9b03      	ldr	r3, [sp, #12]
1a00716c:	701a      	strb	r2, [r3, #0]
}
1a00716e:	bc30      	pop	{r4, r5}
1a007170:	4770      	bx	lr
1a007172:	bf00      	nop
1a007174:	1a008804 	.word	0x1a008804

1a007178 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a007178:	b570      	push	{r4, r5, r6, lr}
1a00717a:	b084      	sub	sp, #16
1a00717c:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00717e:	2300      	movs	r3, #0
1a007180:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a007184:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a007188:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00718c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a007190:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a007194:	f10d 030b 	add.w	r3, sp, #11
1a007198:	9301      	str	r3, [sp, #4]
1a00719a:	ab03      	add	r3, sp, #12
1a00719c:	9300      	str	r3, [sp, #0]
1a00719e:	f10d 030d 	add.w	r3, sp, #13
1a0071a2:	f10d 020e 	add.w	r2, sp, #14
1a0071a6:	f10d 010f 	add.w	r1, sp, #15
1a0071aa:	f7ff ffcb 	bl	1a007144 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a0071ae:	2c05      	cmp	r4, #5
1a0071b0:	f200 80a5 	bhi.w	1a0072fe <gpioInit+0x186>
1a0071b4:	e8df f004 	tbb	[pc, r4]
1a0071b8:	45278109 	.word	0x45278109
1a0071bc:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0071be:	4851      	ldr	r0, [pc, #324]	; (1a007304 <gpioInit+0x18c>)
1a0071c0:	f7ff fc4d 	bl	1a006a5e <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a0071c4:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a0071c6:	b004      	add	sp, #16
1a0071c8:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a0071ca:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0071ce:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0071d2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0071d6:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0071da:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0071de:	494a      	ldr	r1, [pc, #296]	; (1a007308 <gpioInit+0x190>)
1a0071e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0071e4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0071e8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0071ec:	2001      	movs	r0, #1
1a0071ee:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] &= ~bitValue;
1a0071f2:	4c44      	ldr	r4, [pc, #272]	; (1a007304 <gpioInit+0x18c>)
1a0071f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0071f8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0071fc:	ea22 0201 	bic.w	r2, r2, r1
1a007200:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a007204:	e7df      	b.n	1a0071c6 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a007206:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00720a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00720e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a007212:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a007216:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00721a:	493b      	ldr	r1, [pc, #236]	; (1a007308 <gpioInit+0x190>)
1a00721c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a007220:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a007224:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a007228:	2001      	movs	r0, #1
1a00722a:	fa00 f102 	lsl.w	r1, r0, r2
1a00722e:	4c35      	ldr	r4, [pc, #212]	; (1a007304 <gpioInit+0x18c>)
1a007230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a007234:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a007238:	ea22 0201 	bic.w	r2, r2, r1
1a00723c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a007240:	e7c1      	b.n	1a0071c6 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a007242:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a007246:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00724a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00724e:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a007252:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a007256:	492c      	ldr	r1, [pc, #176]	; (1a007308 <gpioInit+0x190>)
1a007258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00725c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a007260:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a007264:	2001      	movs	r0, #1
1a007266:	fa00 f102 	lsl.w	r1, r0, r2
1a00726a:	4c26      	ldr	r4, [pc, #152]	; (1a007304 <gpioInit+0x18c>)
1a00726c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a007270:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a007274:	ea22 0201 	bic.w	r2, r2, r1
1a007278:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00727c:	e7a3      	b.n	1a0071c6 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a00727e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a007282:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a007286:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00728a:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a00728e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a007292:	491d      	ldr	r1, [pc, #116]	; (1a007308 <gpioInit+0x190>)
1a007294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a007298:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00729c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0072a0:	2001      	movs	r0, #1
1a0072a2:	fa00 f102 	lsl.w	r1, r0, r2
1a0072a6:	4c17      	ldr	r4, [pc, #92]	; (1a007304 <gpioInit+0x18c>)
1a0072a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0072ac:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0072b0:	ea22 0201 	bic.w	r2, r2, r1
1a0072b4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0072b8:	e785      	b.n	1a0071c6 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0072ba:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0072be:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0072c2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0072c6:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0072ca:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0072ce:	490e      	ldr	r1, [pc, #56]	; (1a007308 <gpioInit+0x190>)
1a0072d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0072d4:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0072d8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0072dc:	2001      	movs	r0, #1
1a0072de:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0072e2:	4b08      	ldr	r3, [pc, #32]	; (1a007304 <gpioInit+0x18c>)
1a0072e4:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0072e8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0072ec:	4331      	orrs	r1, r6
1a0072ee:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0072f2:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0072f4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0072f8:	2100      	movs	r1, #0
1a0072fa:	5499      	strb	r1, [r3, r2]
1a0072fc:	e763      	b.n	1a0071c6 <gpioInit+0x4e>
      ret_val = 0;
1a0072fe:	2000      	movs	r0, #0
1a007300:	e761      	b.n	1a0071c6 <gpioInit+0x4e>
1a007302:	bf00      	nop
1a007304:	400f4000 	.word	0x400f4000
1a007308:	40086000 	.word	0x40086000

1a00730c <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a00730c:	b510      	push	{r4, lr}
1a00730e:	b084      	sub	sp, #16
1a007310:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a007312:	2300      	movs	r3, #0
1a007314:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a007318:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00731c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a007320:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a007324:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a007328:	f10d 030b 	add.w	r3, sp, #11
1a00732c:	9301      	str	r3, [sp, #4]
1a00732e:	ab03      	add	r3, sp, #12
1a007330:	9300      	str	r3, [sp, #0]
1a007332:	f10d 030d 	add.w	r3, sp, #13
1a007336:	f10d 020e 	add.w	r2, sp, #14
1a00733a:	f10d 010f 	add.w	r1, sp, #15
1a00733e:	f7ff ff01 	bl	1a007144 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a007342:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a007346:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a00734a:	3400      	adds	r4, #0
1a00734c:	bf18      	it	ne
1a00734e:	2401      	movne	r4, #1
1a007350:	015b      	lsls	r3, r3, #5
1a007352:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a007356:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00735a:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a00735c:	2001      	movs	r0, #1
1a00735e:	b004      	add	sp, #16
1a007360:	bd10      	pop	{r4, pc}

1a007362 <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a007362:	b500      	push	{lr}
1a007364:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a007366:	2300      	movs	r3, #0
1a007368:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00736c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a007370:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a007374:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a007378:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00737c:	f10d 030b 	add.w	r3, sp, #11
1a007380:	9301      	str	r3, [sp, #4]
1a007382:	ab03      	add	r3, sp, #12
1a007384:	9300      	str	r3, [sp, #0]
1a007386:	f10d 030d 	add.w	r3, sp, #13
1a00738a:	f10d 020e 	add.w	r2, sp, #14
1a00738e:	f10d 010f 	add.w	r1, sp, #15
1a007392:	f7ff fed7 	bl	1a007144 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a007396:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a00739a:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a00739e:	015b      	lsls	r3, r3, #5
1a0073a0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0073a4:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0073a8:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a0073aa:	3000      	adds	r0, #0
1a0073ac:	bf18      	it	ne
1a0073ae:	2001      	movne	r0, #1
1a0073b0:	b005      	add	sp, #20
1a0073b2:	f85d fb04 	ldr.w	pc, [sp], #4

1a0073b6 <gpioToggle>:
{
1a0073b6:	b510      	push	{r4, lr}
1a0073b8:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a0073ba:	f7ff ffd2 	bl	1a007362 <gpioRead>
1a0073be:	fab0 f180 	clz	r1, r0
1a0073c2:	0949      	lsrs	r1, r1, #5
1a0073c4:	4620      	mov	r0, r4
1a0073c6:	f7ff ffa1 	bl	1a00730c <gpioWrite>
}
1a0073ca:	bd10      	pop	{r4, pc}

1a0073cc <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a0073cc:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a0073ce:	4b04      	ldr	r3, [pc, #16]	; (1a0073e0 <USB0_IRQHandler+0x14>)
1a0073d0:	681b      	ldr	r3, [r3, #0]
1a0073d2:	681b      	ldr	r3, [r3, #0]
1a0073d4:	68db      	ldr	r3, [r3, #12]
1a0073d6:	4a03      	ldr	r2, [pc, #12]	; (1a0073e4 <USB0_IRQHandler+0x18>)
1a0073d8:	6810      	ldr	r0, [r2, #0]
1a0073da:	4798      	blx	r3
}
1a0073dc:	bd08      	pop	{r3, pc}
1a0073de:	bf00      	nop
1a0073e0:	10003588 	.word	0x10003588
1a0073e4:	100034a8 	.word	0x100034a8

1a0073e8 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a0073e8:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a0073ea:	f7ff fa6d 	bl	1a0068c8 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a0073ee:	4b18      	ldr	r3, [pc, #96]	; (1a007450 <boardInit+0x68>)
1a0073f0:	6818      	ldr	r0, [r3, #0]
1a0073f2:	f7ff fc99 	bl	1a006d28 <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a0073f6:	2105      	movs	r1, #5
1a0073f8:	2000      	movs	r0, #0
1a0073fa:	f7ff febd 	bl	1a007178 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a0073fe:	2100      	movs	r1, #0
1a007400:	2024      	movs	r0, #36	; 0x24
1a007402:	f7ff feb9 	bl	1a007178 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a007406:	2100      	movs	r1, #0
1a007408:	2025      	movs	r0, #37	; 0x25
1a00740a:	f7ff feb5 	bl	1a007178 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a00740e:	2100      	movs	r1, #0
1a007410:	2026      	movs	r0, #38	; 0x26
1a007412:	f7ff feb1 	bl	1a007178 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a007416:	2100      	movs	r1, #0
1a007418:	2027      	movs	r0, #39	; 0x27
1a00741a:	f7ff fead 	bl	1a007178 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a00741e:	2101      	movs	r1, #1
1a007420:	2028      	movs	r0, #40	; 0x28
1a007422:	f7ff fea9 	bl	1a007178 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a007426:	2101      	movs	r1, #1
1a007428:	2029      	movs	r0, #41	; 0x29
1a00742a:	f7ff fea5 	bl	1a007178 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a00742e:	2101      	movs	r1, #1
1a007430:	202a      	movs	r0, #42	; 0x2a
1a007432:	f7ff fea1 	bl	1a007178 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a007436:	2101      	movs	r1, #1
1a007438:	202b      	movs	r0, #43	; 0x2b
1a00743a:	f7ff fe9d 	bl	1a007178 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a00743e:	2101      	movs	r1, #1
1a007440:	202c      	movs	r0, #44	; 0x2c
1a007442:	f7ff fe99 	bl	1a007178 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a007446:	2101      	movs	r1, #1
1a007448:	202d      	movs	r0, #45	; 0x2d
1a00744a:	f7ff fe95 	bl	1a007178 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a00744e:	bd08      	pop	{r3, pc}
1a007450:	10003584 	.word	0x10003584

1a007454 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay( tick_t duration_ms )
{
1a007454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a007458:	4680      	mov	r8, r0
1a00745a:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a00745c:	f7ff fde6 	bl	1a00702c <tickRead>
1a007460:	4606      	mov	r6, r0
1a007462:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration_ms/tickRateMS );
1a007464:	f7ff fde2 	bl	1a00702c <tickRead>
1a007468:	1b84      	subs	r4, r0, r6
1a00746a:	eb61 0507 	sbc.w	r5, r1, r7
1a00746e:	4b06      	ldr	r3, [pc, #24]	; (1a007488 <delay+0x34>)
1a007470:	e9d3 2300 	ldrd	r2, r3, [r3]
1a007474:	4640      	mov	r0, r8
1a007476:	4649      	mov	r1, r9
1a007478:	f000 f880 	bl	1a00757c <__aeabi_uldivmod>
1a00747c:	428d      	cmp	r5, r1
1a00747e:	bf08      	it	eq
1a007480:	4284      	cmpeq	r4, r0
1a007482:	d3ef      	bcc.n	1a007464 <delay+0x10>
}
1a007484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a007488:	10000058 	.word	0x10000058

1a00748c <delayInit>:


/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a00748c:	b510      	push	{r4, lr}
1a00748e:	4604      	mov	r4, r0
1a007490:	4610      	mov	r0, r2
1a007492:	4619      	mov	r1, r3
   delay->duration = duration/tickRateMS;
1a007494:	4b04      	ldr	r3, [pc, #16]	; (1a0074a8 <delayInit+0x1c>)
1a007496:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00749a:	f000 f86f 	bl	1a00757c <__aeabi_uldivmod>
1a00749e:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a0074a2:	2300      	movs	r3, #0
1a0074a4:	7423      	strb	r3, [r4, #16]
}
1a0074a6:	bd10      	pop	{r4, pc}
1a0074a8:	10000058 	.word	0x10000058

1a0074ac <delayRead>:

bool_t delayRead( delay_t * delay )
{
1a0074ac:	b570      	push	{r4, r5, r6, lr}
1a0074ae:	4604      	mov	r4, r0

   bool_t timeArrived = 0;

   if( !delay->running ) {
1a0074b0:	7c05      	ldrb	r5, [r0, #16]
1a0074b2:	b195      	cbz	r5, 1a0074da <delayRead+0x2e>
      delay->startTime = tickRead();
      delay->running = 1;
   } else {
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
1a0074b4:	f7ff fdba 	bl	1a00702c <tickRead>
1a0074b8:	e9d4 2300 	ldrd	r2, r3, [r4]
1a0074bc:	1a82      	subs	r2, r0, r2
1a0074be:	eb61 0303 	sbc.w	r3, r1, r3
1a0074c2:	4615      	mov	r5, r2
1a0074c4:	461e      	mov	r6, r3
1a0074c6:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a0074ca:	429e      	cmp	r6, r3
1a0074cc:	bf08      	it	eq
1a0074ce:	4295      	cmpeq	r5, r2
1a0074d0:	d30b      	bcc.n	1a0074ea <delayRead+0x3e>
         timeArrived = 1;
         delay->running = 0;
1a0074d2:	2300      	movs	r3, #0
1a0074d4:	7423      	strb	r3, [r4, #16]
         timeArrived = 1;
1a0074d6:	2501      	movs	r5, #1
1a0074d8:	e005      	b.n	1a0074e6 <delayRead+0x3a>
      delay->startTime = tickRead();
1a0074da:	f7ff fda7 	bl	1a00702c <tickRead>
1a0074de:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a0074e2:	2301      	movs	r3, #1
1a0074e4:	7423      	strb	r3, [r4, #16]
      }
   }

   return timeArrived;
}
1a0074e6:	4628      	mov	r0, r5
1a0074e8:	bd70      	pop	{r4, r5, r6, pc}
   bool_t timeArrived = 0;
1a0074ea:	2500      	movs	r5, #0
1a0074ec:	e7fb      	b.n	1a0074e6 <delayRead+0x3a>
1a0074ee:	Address 0x000000001a0074ee is out of bounds.


1a0074f0 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a0074f0:	2301      	movs	r3, #1
1a0074f2:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a0074f6:	4b01      	ldr	r3, [pc, #4]	; (1a0074fc <clearInterrupt+0xc>)
1a0074f8:	6258      	str	r0, [r3, #36]	; 0x24
}
1a0074fa:	4770      	bx	lr
1a0074fc:	40087000 	.word	0x40087000

1a007500 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a007500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a007502:	4b12      	ldr	r3, [pc, #72]	; (1a00754c <serveInterrupt+0x4c>)
1a007504:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a007506:	4b12      	ldr	r3, [pc, #72]	; (1a007550 <serveInterrupt+0x50>)
1a007508:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a00750a:	2301      	movs	r3, #1
1a00750c:	4083      	lsls	r3, r0
1a00750e:	420b      	tst	r3, r1
1a007510:	d111      	bne.n	1a007536 <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a007512:	4910      	ldr	r1, [pc, #64]	; (1a007554 <serveInterrupt+0x54>)
1a007514:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a007516:	4d10      	ldr	r5, [pc, #64]	; (1a007558 <serveInterrupt+0x58>)
1a007518:	0051      	lsls	r1, r2, #1
1a00751a:	188f      	adds	r7, r1, r2
1a00751c:	00fc      	lsls	r4, r7, #3
1a00751e:	4627      	mov	r7, r4
1a007520:	442c      	add	r4, r5
1a007522:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a007524:	6864      	ldr	r4, [r4, #4]
1a007526:	1b36      	subs	r6, r6, r4
1a007528:	443d      	add	r5, r7
1a00752a:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a00752c:	4a08      	ldr	r2, [pc, #32]	; (1a007550 <serveInterrupt+0x50>)
1a00752e:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a007530:	f7ff ffde 	bl	1a0074f0 <clearInterrupt>
}
1a007534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a007536:	4907      	ldr	r1, [pc, #28]	; (1a007554 <serveInterrupt+0x54>)
1a007538:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a00753a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a00753e:	00d1      	lsls	r1, r2, #3
1a007540:	4a05      	ldr	r2, [pc, #20]	; (1a007558 <serveInterrupt+0x58>)
1a007542:	440a      	add	r2, r1
1a007544:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a007546:	4a02      	ldr	r2, [pc, #8]	; (1a007550 <serveInterrupt+0x50>)
1a007548:	61d3      	str	r3, [r2, #28]
1a00754a:	e7f1      	b.n	1a007530 <serveInterrupt+0x30>
1a00754c:	1a0088ec 	.word	0x1a0088ec
1a007550:	40087000 	.word	0x40087000
1a007554:	40084000 	.word	0x40084000
1a007558:	100000a0 	.word	0x100000a0

1a00755c <GPIO0_IRQHandler>:
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifdef SAPI_USE_INTERRUPTS
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a00755c:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a00755e:	2000      	movs	r0, #0
1a007560:	f7ff ffce 	bl	1a007500 <serveInterrupt>
}
1a007564:	bd08      	pop	{r3, pc}

1a007566 <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a007566:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a007568:	2001      	movs	r0, #1
1a00756a:	f7ff ffc9 	bl	1a007500 <serveInterrupt>
}
1a00756e:	bd08      	pop	{r3, pc}

1a007570 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a007570:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a007572:	2002      	movs	r0, #2
1a007574:	f7ff ffc4 	bl	1a007500 <serveInterrupt>
}
1a007578:	bd08      	pop	{r3, pc}
1a00757a:	Address 0x000000001a00757a is out of bounds.


1a00757c <__aeabi_uldivmod>:
1a00757c:	b953      	cbnz	r3, 1a007594 <__aeabi_uldivmod+0x18>
1a00757e:	b94a      	cbnz	r2, 1a007594 <__aeabi_uldivmod+0x18>
1a007580:	2900      	cmp	r1, #0
1a007582:	bf08      	it	eq
1a007584:	2800      	cmpeq	r0, #0
1a007586:	bf1c      	itt	ne
1a007588:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a00758c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a007590:	f000 b972 	b.w	1a007878 <__aeabi_idiv0>
1a007594:	f1ad 0c08 	sub.w	ip, sp, #8
1a007598:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a00759c:	f000 f806 	bl	1a0075ac <__udivmoddi4>
1a0075a0:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0075a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0075a8:	b004      	add	sp, #16
1a0075aa:	4770      	bx	lr

1a0075ac <__udivmoddi4>:
1a0075ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0075b0:	9e08      	ldr	r6, [sp, #32]
1a0075b2:	4604      	mov	r4, r0
1a0075b4:	4688      	mov	r8, r1
1a0075b6:	2b00      	cmp	r3, #0
1a0075b8:	d14b      	bne.n	1a007652 <__udivmoddi4+0xa6>
1a0075ba:	428a      	cmp	r2, r1
1a0075bc:	4615      	mov	r5, r2
1a0075be:	d967      	bls.n	1a007690 <__udivmoddi4+0xe4>
1a0075c0:	fab2 f282 	clz	r2, r2
1a0075c4:	b14a      	cbz	r2, 1a0075da <__udivmoddi4+0x2e>
1a0075c6:	f1c2 0720 	rsb	r7, r2, #32
1a0075ca:	fa01 f302 	lsl.w	r3, r1, r2
1a0075ce:	fa20 f707 	lsr.w	r7, r0, r7
1a0075d2:	4095      	lsls	r5, r2
1a0075d4:	ea47 0803 	orr.w	r8, r7, r3
1a0075d8:	4094      	lsls	r4, r2
1a0075da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0075de:	0c23      	lsrs	r3, r4, #16
1a0075e0:	fbb8 f7fe 	udiv	r7, r8, lr
1a0075e4:	fa1f fc85 	uxth.w	ip, r5
1a0075e8:	fb0e 8817 	mls	r8, lr, r7, r8
1a0075ec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0075f0:	fb07 f10c 	mul.w	r1, r7, ip
1a0075f4:	4299      	cmp	r1, r3
1a0075f6:	d909      	bls.n	1a00760c <__udivmoddi4+0x60>
1a0075f8:	18eb      	adds	r3, r5, r3
1a0075fa:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a0075fe:	f080 811b 	bcs.w	1a007838 <__udivmoddi4+0x28c>
1a007602:	4299      	cmp	r1, r3
1a007604:	f240 8118 	bls.w	1a007838 <__udivmoddi4+0x28c>
1a007608:	3f02      	subs	r7, #2
1a00760a:	442b      	add	r3, r5
1a00760c:	1a5b      	subs	r3, r3, r1
1a00760e:	b2a4      	uxth	r4, r4
1a007610:	fbb3 f0fe 	udiv	r0, r3, lr
1a007614:	fb0e 3310 	mls	r3, lr, r0, r3
1a007618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a00761c:	fb00 fc0c 	mul.w	ip, r0, ip
1a007620:	45a4      	cmp	ip, r4
1a007622:	d909      	bls.n	1a007638 <__udivmoddi4+0x8c>
1a007624:	192c      	adds	r4, r5, r4
1a007626:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00762a:	f080 8107 	bcs.w	1a00783c <__udivmoddi4+0x290>
1a00762e:	45a4      	cmp	ip, r4
1a007630:	f240 8104 	bls.w	1a00783c <__udivmoddi4+0x290>
1a007634:	3802      	subs	r0, #2
1a007636:	442c      	add	r4, r5
1a007638:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a00763c:	eba4 040c 	sub.w	r4, r4, ip
1a007640:	2700      	movs	r7, #0
1a007642:	b11e      	cbz	r6, 1a00764c <__udivmoddi4+0xa0>
1a007644:	40d4      	lsrs	r4, r2
1a007646:	2300      	movs	r3, #0
1a007648:	e9c6 4300 	strd	r4, r3, [r6]
1a00764c:	4639      	mov	r1, r7
1a00764e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a007652:	428b      	cmp	r3, r1
1a007654:	d909      	bls.n	1a00766a <__udivmoddi4+0xbe>
1a007656:	2e00      	cmp	r6, #0
1a007658:	f000 80eb 	beq.w	1a007832 <__udivmoddi4+0x286>
1a00765c:	2700      	movs	r7, #0
1a00765e:	e9c6 0100 	strd	r0, r1, [r6]
1a007662:	4638      	mov	r0, r7
1a007664:	4639      	mov	r1, r7
1a007666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00766a:	fab3 f783 	clz	r7, r3
1a00766e:	2f00      	cmp	r7, #0
1a007670:	d147      	bne.n	1a007702 <__udivmoddi4+0x156>
1a007672:	428b      	cmp	r3, r1
1a007674:	d302      	bcc.n	1a00767c <__udivmoddi4+0xd0>
1a007676:	4282      	cmp	r2, r0
1a007678:	f200 80fa 	bhi.w	1a007870 <__udivmoddi4+0x2c4>
1a00767c:	1a84      	subs	r4, r0, r2
1a00767e:	eb61 0303 	sbc.w	r3, r1, r3
1a007682:	2001      	movs	r0, #1
1a007684:	4698      	mov	r8, r3
1a007686:	2e00      	cmp	r6, #0
1a007688:	d0e0      	beq.n	1a00764c <__udivmoddi4+0xa0>
1a00768a:	e9c6 4800 	strd	r4, r8, [r6]
1a00768e:	e7dd      	b.n	1a00764c <__udivmoddi4+0xa0>
1a007690:	b902      	cbnz	r2, 1a007694 <__udivmoddi4+0xe8>
1a007692:	deff      	udf	#255	; 0xff
1a007694:	fab2 f282 	clz	r2, r2
1a007698:	2a00      	cmp	r2, #0
1a00769a:	f040 808f 	bne.w	1a0077bc <__udivmoddi4+0x210>
1a00769e:	1b49      	subs	r1, r1, r5
1a0076a0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0076a4:	fa1f f885 	uxth.w	r8, r5
1a0076a8:	2701      	movs	r7, #1
1a0076aa:	fbb1 fcfe 	udiv	ip, r1, lr
1a0076ae:	0c23      	lsrs	r3, r4, #16
1a0076b0:	fb0e 111c 	mls	r1, lr, ip, r1
1a0076b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0076b8:	fb08 f10c 	mul.w	r1, r8, ip
1a0076bc:	4299      	cmp	r1, r3
1a0076be:	d907      	bls.n	1a0076d0 <__udivmoddi4+0x124>
1a0076c0:	18eb      	adds	r3, r5, r3
1a0076c2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a0076c6:	d202      	bcs.n	1a0076ce <__udivmoddi4+0x122>
1a0076c8:	4299      	cmp	r1, r3
1a0076ca:	f200 80cd 	bhi.w	1a007868 <__udivmoddi4+0x2bc>
1a0076ce:	4684      	mov	ip, r0
1a0076d0:	1a59      	subs	r1, r3, r1
1a0076d2:	b2a3      	uxth	r3, r4
1a0076d4:	fbb1 f0fe 	udiv	r0, r1, lr
1a0076d8:	fb0e 1410 	mls	r4, lr, r0, r1
1a0076dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a0076e0:	fb08 f800 	mul.w	r8, r8, r0
1a0076e4:	45a0      	cmp	r8, r4
1a0076e6:	d907      	bls.n	1a0076f8 <__udivmoddi4+0x14c>
1a0076e8:	192c      	adds	r4, r5, r4
1a0076ea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0076ee:	d202      	bcs.n	1a0076f6 <__udivmoddi4+0x14a>
1a0076f0:	45a0      	cmp	r8, r4
1a0076f2:	f200 80b6 	bhi.w	1a007862 <__udivmoddi4+0x2b6>
1a0076f6:	4618      	mov	r0, r3
1a0076f8:	eba4 0408 	sub.w	r4, r4, r8
1a0076fc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a007700:	e79f      	b.n	1a007642 <__udivmoddi4+0x96>
1a007702:	f1c7 0c20 	rsb	ip, r7, #32
1a007706:	40bb      	lsls	r3, r7
1a007708:	fa22 fe0c 	lsr.w	lr, r2, ip
1a00770c:	ea4e 0e03 	orr.w	lr, lr, r3
1a007710:	fa01 f407 	lsl.w	r4, r1, r7
1a007714:	fa20 f50c 	lsr.w	r5, r0, ip
1a007718:	fa21 f30c 	lsr.w	r3, r1, ip
1a00771c:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a007720:	4325      	orrs	r5, r4
1a007722:	fbb3 f9f8 	udiv	r9, r3, r8
1a007726:	0c2c      	lsrs	r4, r5, #16
1a007728:	fb08 3319 	mls	r3, r8, r9, r3
1a00772c:	fa1f fa8e 	uxth.w	sl, lr
1a007730:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a007734:	fb09 f40a 	mul.w	r4, r9, sl
1a007738:	429c      	cmp	r4, r3
1a00773a:	fa02 f207 	lsl.w	r2, r2, r7
1a00773e:	fa00 f107 	lsl.w	r1, r0, r7
1a007742:	d90b      	bls.n	1a00775c <__udivmoddi4+0x1b0>
1a007744:	eb1e 0303 	adds.w	r3, lr, r3
1a007748:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a00774c:	f080 8087 	bcs.w	1a00785e <__udivmoddi4+0x2b2>
1a007750:	429c      	cmp	r4, r3
1a007752:	f240 8084 	bls.w	1a00785e <__udivmoddi4+0x2b2>
1a007756:	f1a9 0902 	sub.w	r9, r9, #2
1a00775a:	4473      	add	r3, lr
1a00775c:	1b1b      	subs	r3, r3, r4
1a00775e:	b2ad      	uxth	r5, r5
1a007760:	fbb3 f0f8 	udiv	r0, r3, r8
1a007764:	fb08 3310 	mls	r3, r8, r0, r3
1a007768:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a00776c:	fb00 fa0a 	mul.w	sl, r0, sl
1a007770:	45a2      	cmp	sl, r4
1a007772:	d908      	bls.n	1a007786 <__udivmoddi4+0x1da>
1a007774:	eb1e 0404 	adds.w	r4, lr, r4
1a007778:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00777c:	d26b      	bcs.n	1a007856 <__udivmoddi4+0x2aa>
1a00777e:	45a2      	cmp	sl, r4
1a007780:	d969      	bls.n	1a007856 <__udivmoddi4+0x2aa>
1a007782:	3802      	subs	r0, #2
1a007784:	4474      	add	r4, lr
1a007786:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a00778a:	fba0 8902 	umull	r8, r9, r0, r2
1a00778e:	eba4 040a 	sub.w	r4, r4, sl
1a007792:	454c      	cmp	r4, r9
1a007794:	46c2      	mov	sl, r8
1a007796:	464b      	mov	r3, r9
1a007798:	d354      	bcc.n	1a007844 <__udivmoddi4+0x298>
1a00779a:	d051      	beq.n	1a007840 <__udivmoddi4+0x294>
1a00779c:	2e00      	cmp	r6, #0
1a00779e:	d069      	beq.n	1a007874 <__udivmoddi4+0x2c8>
1a0077a0:	ebb1 050a 	subs.w	r5, r1, sl
1a0077a4:	eb64 0403 	sbc.w	r4, r4, r3
1a0077a8:	fa04 fc0c 	lsl.w	ip, r4, ip
1a0077ac:	40fd      	lsrs	r5, r7
1a0077ae:	40fc      	lsrs	r4, r7
1a0077b0:	ea4c 0505 	orr.w	r5, ip, r5
1a0077b4:	e9c6 5400 	strd	r5, r4, [r6]
1a0077b8:	2700      	movs	r7, #0
1a0077ba:	e747      	b.n	1a00764c <__udivmoddi4+0xa0>
1a0077bc:	f1c2 0320 	rsb	r3, r2, #32
1a0077c0:	fa20 f703 	lsr.w	r7, r0, r3
1a0077c4:	4095      	lsls	r5, r2
1a0077c6:	fa01 f002 	lsl.w	r0, r1, r2
1a0077ca:	fa21 f303 	lsr.w	r3, r1, r3
1a0077ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0077d2:	4338      	orrs	r0, r7
1a0077d4:	0c01      	lsrs	r1, r0, #16
1a0077d6:	fbb3 f7fe 	udiv	r7, r3, lr
1a0077da:	fa1f f885 	uxth.w	r8, r5
1a0077de:	fb0e 3317 	mls	r3, lr, r7, r3
1a0077e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0077e6:	fb07 f308 	mul.w	r3, r7, r8
1a0077ea:	428b      	cmp	r3, r1
1a0077ec:	fa04 f402 	lsl.w	r4, r4, r2
1a0077f0:	d907      	bls.n	1a007802 <__udivmoddi4+0x256>
1a0077f2:	1869      	adds	r1, r5, r1
1a0077f4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a0077f8:	d22f      	bcs.n	1a00785a <__udivmoddi4+0x2ae>
1a0077fa:	428b      	cmp	r3, r1
1a0077fc:	d92d      	bls.n	1a00785a <__udivmoddi4+0x2ae>
1a0077fe:	3f02      	subs	r7, #2
1a007800:	4429      	add	r1, r5
1a007802:	1acb      	subs	r3, r1, r3
1a007804:	b281      	uxth	r1, r0
1a007806:	fbb3 f0fe 	udiv	r0, r3, lr
1a00780a:	fb0e 3310 	mls	r3, lr, r0, r3
1a00780e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a007812:	fb00 f308 	mul.w	r3, r0, r8
1a007816:	428b      	cmp	r3, r1
1a007818:	d907      	bls.n	1a00782a <__udivmoddi4+0x27e>
1a00781a:	1869      	adds	r1, r5, r1
1a00781c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a007820:	d217      	bcs.n	1a007852 <__udivmoddi4+0x2a6>
1a007822:	428b      	cmp	r3, r1
1a007824:	d915      	bls.n	1a007852 <__udivmoddi4+0x2a6>
1a007826:	3802      	subs	r0, #2
1a007828:	4429      	add	r1, r5
1a00782a:	1ac9      	subs	r1, r1, r3
1a00782c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a007830:	e73b      	b.n	1a0076aa <__udivmoddi4+0xfe>
1a007832:	4637      	mov	r7, r6
1a007834:	4630      	mov	r0, r6
1a007836:	e709      	b.n	1a00764c <__udivmoddi4+0xa0>
1a007838:	4607      	mov	r7, r0
1a00783a:	e6e7      	b.n	1a00760c <__udivmoddi4+0x60>
1a00783c:	4618      	mov	r0, r3
1a00783e:	e6fb      	b.n	1a007638 <__udivmoddi4+0x8c>
1a007840:	4541      	cmp	r1, r8
1a007842:	d2ab      	bcs.n	1a00779c <__udivmoddi4+0x1f0>
1a007844:	ebb8 0a02 	subs.w	sl, r8, r2
1a007848:	eb69 020e 	sbc.w	r2, r9, lr
1a00784c:	3801      	subs	r0, #1
1a00784e:	4613      	mov	r3, r2
1a007850:	e7a4      	b.n	1a00779c <__udivmoddi4+0x1f0>
1a007852:	4660      	mov	r0, ip
1a007854:	e7e9      	b.n	1a00782a <__udivmoddi4+0x27e>
1a007856:	4618      	mov	r0, r3
1a007858:	e795      	b.n	1a007786 <__udivmoddi4+0x1da>
1a00785a:	4667      	mov	r7, ip
1a00785c:	e7d1      	b.n	1a007802 <__udivmoddi4+0x256>
1a00785e:	4681      	mov	r9, r0
1a007860:	e77c      	b.n	1a00775c <__udivmoddi4+0x1b0>
1a007862:	3802      	subs	r0, #2
1a007864:	442c      	add	r4, r5
1a007866:	e747      	b.n	1a0076f8 <__udivmoddi4+0x14c>
1a007868:	f1ac 0c02 	sub.w	ip, ip, #2
1a00786c:	442b      	add	r3, r5
1a00786e:	e72f      	b.n	1a0076d0 <__udivmoddi4+0x124>
1a007870:	4638      	mov	r0, r7
1a007872:	e708      	b.n	1a007686 <__udivmoddi4+0xda>
1a007874:	4637      	mov	r7, r6
1a007876:	e6e9      	b.n	1a00764c <__udivmoddi4+0xa0>

1a007878 <__aeabi_idiv0>:
1a007878:	4770      	bx	lr
1a00787a:	bf00      	nop

1a00787c <__libc_init_array>:
1a00787c:	b570      	push	{r4, r5, r6, lr}
1a00787e:	4e0d      	ldr	r6, [pc, #52]	; (1a0078b4 <__libc_init_array+0x38>)
1a007880:	4c0d      	ldr	r4, [pc, #52]	; (1a0078b8 <__libc_init_array+0x3c>)
1a007882:	1ba4      	subs	r4, r4, r6
1a007884:	10a4      	asrs	r4, r4, #2
1a007886:	2500      	movs	r5, #0
1a007888:	42a5      	cmp	r5, r4
1a00788a:	d109      	bne.n	1a0078a0 <__libc_init_array+0x24>
1a00788c:	4e0b      	ldr	r6, [pc, #44]	; (1a0078bc <__libc_init_array+0x40>)
1a00788e:	4c0c      	ldr	r4, [pc, #48]	; (1a0078c0 <__libc_init_array+0x44>)
1a007890:	f7f9 fd9f 	bl	1a0013d2 <_init>
1a007894:	1ba4      	subs	r4, r4, r6
1a007896:	10a4      	asrs	r4, r4, #2
1a007898:	2500      	movs	r5, #0
1a00789a:	42a5      	cmp	r5, r4
1a00789c:	d105      	bne.n	1a0078aa <__libc_init_array+0x2e>
1a00789e:	bd70      	pop	{r4, r5, r6, pc}
1a0078a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a0078a4:	4798      	blx	r3
1a0078a6:	3501      	adds	r5, #1
1a0078a8:	e7ee      	b.n	1a007888 <__libc_init_array+0xc>
1a0078aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a0078ae:	4798      	blx	r3
1a0078b0:	3501      	adds	r5, #1
1a0078b2:	e7f2      	b.n	1a00789a <__libc_init_array+0x1e>
1a0078b4:	1a0088f0 	.word	0x1a0088f0
1a0078b8:	1a0088f0 	.word	0x1a0088f0
1a0078bc:	1a0088f0 	.word	0x1a0088f0
1a0078c0:	1a0088f4 	.word	0x1a0088f4

1a0078c4 <memcpy>:
1a0078c4:	b510      	push	{r4, lr}
1a0078c6:	1e43      	subs	r3, r0, #1
1a0078c8:	440a      	add	r2, r1
1a0078ca:	4291      	cmp	r1, r2
1a0078cc:	d100      	bne.n	1a0078d0 <memcpy+0xc>
1a0078ce:	bd10      	pop	{r4, pc}
1a0078d0:	f811 4b01 	ldrb.w	r4, [r1], #1
1a0078d4:	f803 4f01 	strb.w	r4, [r3, #1]!
1a0078d8:	e7f7      	b.n	1a0078ca <memcpy+0x6>

1a0078da <memset>:
1a0078da:	4402      	add	r2, r0
1a0078dc:	4603      	mov	r3, r0
1a0078de:	4293      	cmp	r3, r2
1a0078e0:	d100      	bne.n	1a0078e4 <memset+0xa>
1a0078e2:	4770      	bx	lr
1a0078e4:	f803 1b01 	strb.w	r1, [r3], #1
1a0078e8:	e7f9      	b.n	1a0078de <memset+0x4>

1a0078ea <strcat>:
1a0078ea:	b510      	push	{r4, lr}
1a0078ec:	4603      	mov	r3, r0
1a0078ee:	781a      	ldrb	r2, [r3, #0]
1a0078f0:	1c5c      	adds	r4, r3, #1
1a0078f2:	b93a      	cbnz	r2, 1a007904 <strcat+0x1a>
1a0078f4:	3b01      	subs	r3, #1
1a0078f6:	f811 2b01 	ldrb.w	r2, [r1], #1
1a0078fa:	f803 2f01 	strb.w	r2, [r3, #1]!
1a0078fe:	2a00      	cmp	r2, #0
1a007900:	d1f9      	bne.n	1a0078f6 <strcat+0xc>
1a007902:	bd10      	pop	{r4, pc}
1a007904:	4623      	mov	r3, r4
1a007906:	e7f2      	b.n	1a0078ee <strcat+0x4>

1a007908 <strcpy>:
1a007908:	4603      	mov	r3, r0
1a00790a:	f811 2b01 	ldrb.w	r2, [r1], #1
1a00790e:	f803 2b01 	strb.w	r2, [r3], #1
1a007912:	2a00      	cmp	r2, #0
1a007914:	d1f9      	bne.n	1a00790a <strcpy+0x2>
1a007916:	4770      	bx	lr
1a007918:	52415453 	.word	0x52415453
1a00791c:	00000054 	.word	0x00000054
1a007920:	504f5453 	.word	0x504f5453
1a007924:	00000000 	.word	0x00000000
1a007928:	43455246 	.word	0x43455246
1a00792c:	0000003d 	.word	0x0000003d
1a007930:	6f727245 	.word	0x6f727245
1a007934:	6e652072 	.word	0x6e652072
1a007938:	72616976 	.word	0x72616976
1a00793c:	6c6f6320 	.word	0x6c6f6320
1a007940:	65642061 	.word	0x65642061
1a007944:	6d6f6320 	.word	0x6d6f6320
1a007948:	6f646e61 	.word	0x6f646e61
1a00794c:	65642073 	.word	0x65642073
1a007950:	756c4220 	.word	0x756c4220
1a007954:	6f6f7465 	.word	0x6f6f7465
1a007958:	0a0d6874 	.word	0x0a0d6874
1a00795c:	ffffff00 	.word	0xffffff00
1a007960:	7778797a 	.word	0x7778797a
1a007964:	73747576 	.word	0x73747576
1a007968:	6f707172 	.word	0x6f707172
1a00796c:	6b6c6d6e 	.word	0x6b6c6d6e
1a007970:	6768696a 	.word	0x6768696a
1a007974:	63646566 	.word	0x63646566
1a007978:	38396162 	.word	0x38396162
1a00797c:	34353637 	.word	0x34353637
1a007980:	30313233 	.word	0x30313233
1a007984:	34333231 	.word	0x34333231
1a007988:	38373635 	.word	0x38373635
1a00798c:	63626139 	.word	0x63626139
1a007990:	67666564 	.word	0x67666564
1a007994:	6b6a6968 	.word	0x6b6a6968
1a007998:	6f6e6d6c 	.word	0x6f6e6d6c
1a00799c:	73727170 	.word	0x73727170
1a0079a0:	77767574 	.word	0x77767574
1a0079a4:	007a7978 	.word	0x007a7978

1a0079a8 <hSin_Cos_Table>:
1a0079a8:	00c90000 025b0192 03ed0324 057f04b6     ......[.$.......
1a0079b8:	07110648 08a207d9 0a33096a 0bc40afb     H.......j.3.....
1a0079c8:	0d540c8c 0ee30e1c 10720fab 1201113a     ..T.......r.:...
1a0079d8:	138f12c8 151c1455 16a815e2 1833176e     ....U.......n.3.
1a0079e8:	19be18f9 1b471a82 1ccf1c0b 1e571d93     ......G.......W.
1a0079f8:	1fdd1f1a 2161209f 22e52223 246723a6     ..... a!#".".#g$
1a007a08:	25e82528 276726a8 28e52826 2a6129a3     (%.%.&g'&(.(.)a*
1a007a18:	2bdc2b1f 2d552c99 2ecc2e11 30412f87     .+.+.,U-...../A0
1a007a28:	31b530fb 3326326e 349633df 3604354d     .0.1n2&3.3.4M5.6
1a007a38:	376f36ba 38d93824 3a40398c 3ba53af2     .6o7$8.8.9@:.:.;
1a007a48:	3d073c56 3e683db8 3fc53f17 41214073     V<.=.=h>.?.?s@!A
1a007a58:	427a41ce 43d04325 4524447a 467545cd     .AzB%C.CzD$E.EuF
1a007a68:	47c3471c 490f4869 4a5849b4 4b9d4afb     .G.GiH.I.IXJ.J.K
1a007a78:	4ce04c3f 4e204d81 4f5d4ebf 50974ffb     ?L.L.M N.N]O.O.P
1a007a88:	51ce5133 53025268 5432539b 556054c9     3Q.QhR.S.S2T.T`U
1a007a98:	568a55f5 57b0571d 58d35842 59f35964     .U.V.W.WBX.XdY.Y
1a007aa8:	5b0f5a82 5c285b9c 5d3e5cb3 5e4f5dc7     .Z.[.[(\.\>].]O^
1a007ab8:	5f5d5ed7 60685fe3 616e60eb 627161f0     .^]_._h`.`na.aqb
1a007ac8:	637062f1 646c63ee 656364e8 665665dd     .bpc.cld.dce.eVf
1a007ad8:	674666cf 683267bc 691968a6 69fd698b     .fFg.g2h.h.i.i.i
1a007ae8:	6adc6a6d 6bb76b4a 6c8e6c23 6d616cf8     mj.jJk.k#l.l.lam
1a007af8:	6e306dc9 6efb6e96 6fc16f5e 70837022     .m0n.n.n^o.o"p.p
1a007b08:	714070e2 71f9719d 72ae7254 735e7307     .p@q.q.qTr.r.s^s
1a007b18:	740a73b5 74b2745f 75557504 75f375a5     .s.t_t.t.uUu.u.u
1a007b28:	768d7641 772276d8 77b3776b 783f77fa     Av.v.v"wkw.w.w?x
1a007b38:	78c77884 794a7909 79c87989 7a417a05     .x.x.yJy.y.y.zAz
1a007b48:	7ab67a7c 7b267aee 7b917b5c 7bf87bc5     |z.z.z&{\{.{.{.{
1a007b58:	7c597c29 7cb67c88 7d0e7ce3 7d627d39     )|Y|.|.|.|.}9}b}
1a007b68:	7db07d89 7dfa7dd5 7e3e7e1d 7e7e7e5f     .}.}.}.}.~>~_~~~
1a007b78:	7eb97e9c 7eef7ed5 7f217f09 7f4d7f37     .~.~.~.~..!.7.M.
1a007b88:	7f747f61 7f977f86 7fb47fa6 7fcd7fc1     a.t.............
1a007b98:	7fe17fd8 7ff07fe9 7ff97ff5 7ffe7ffd     ................
1a007ba8:	3a434453 00000000 3a434453 676f4c2f     SDC:....SDC:/Log
1a007bb8:	7478742e ffffff00 6f727245 6f632072     .txt....Error co
1a007bc8:	6420616c 65742065 73616c63 ff000a0d     la de teclas....

1a007bd8 <teclas>:
1a007bd8:	27262524 0a0d5441 00000000 0a0d4b4f     $%&'AT......OK..
1a007be8:	ffffff00 6f727245 6e652072 65726320     ....Error en cre
1a007bf8:	c3696361 64206eb3 6f632065 6420616c     aci..n de cola d
1a007c08:	6f632065 646e616d 6420736f 6f632065     e comandos de co
1a007c18:	6c6f736e 0a0d2e61 00000000 6f727245     nsola.......Erro
1a007c28:	6e652072 65726320 c3696361 64206eb3     r en creaci..n d
1a007c38:	6f632065 6420616c 6f632065 646e616d     e cola de comand
1a007c48:	6820736f 61696361 6e6f6320 616c6f73     os hacia consola
1a007c58:	000a0d2e 6f727245 6e652072 65726320     ....Error en cre
1a007c68:	c3696361 64206eb3 6f632065 6420616c     aci..n de cola d
1a007c78:	6f632065 646e616d 6420736f 6c422065     e comandos de Bl
1a007c88:	6f746575 2e68746f 00000a0d 6f727245     uetooth.....Erro
1a007c98:	6e652072 65726320 c3696361 64206eb3     r en creaci..n d
1a007ca8:	6f632065 6420616c 6f632065 646e616d     e cola de comand
1a007cb8:	6820736f 61696361 756c4220 6f6f7465     os hacia Bluetoo
1a007cc8:	0d2e6874 0000000a 6f727245 6e652072     th......Error en
1a007cd8:	65726320 c3696361 64206eb3 6f632065      creaci..n de co
1a007ce8:	6420616c 65742065 73616c63 000a0d2e     la de teclas....
1a007cf8:	6f727245 6e652072 65726320 c3696361     Error en creaci.
1a007d08:	64206eb3 6f632065 6420616c 4c204c65     .n de cola deL L
1a007d18:	0d2e474f 0000000a 54524155 2043505f     OG......UART_PC 
1a007d28:	666e6f63 72756769 2e616461 00000a0d     configurada.....
1a007d38:	54524155 554c425f 4f4f5445 70204854     UART_BLUETOOTH p
1a007d48:	20617261 75646f6d 42206f6c 7465756c     ara modulo Bluet
1a007d58:	68746f6f 6e6f6320 75676966 61646172     ooth configurada
1a007d68:	000a0d2e 74736554 206f7465 65206973     ....Testeto si e
1a007d78:	6f6d206c 6f6c7564 74736520 6f632061     l modulo esta co
1a007d88:	7463656e 206f6461 69766e65 6f646e61     nectado enviando
1a007d98:	5441203a 00000a0d 75646f4d 63206f6c     : AT....Modulo c
1a007da8:	63656e6f 6f646174 726f6320 74636572     onectado correct
1a007db8:	6e656d61 0d2e6574 0000000a 5f64654c     amente......Led_
1a007dc8:	70726170 61656461 00000000 65756c42     parpadea....Blue
1a007dd8:	746f6f74 00000068 6c636554 006f6461     tooth...Teclado.
1a007de8:	736e6f43 00616c6f 746e6f43 006c6f72     Consola.Control.
1a007df8:	6b736944 00676f4c 66206f4e 69636e75     DiskLog.No funci
1a007e08:	2c616e6f 69657220 6e65746e 646e6174     ona, reintentand
1a007e18:	0a0d2e6f ffffff00 00000d0a 6f727245     o...........Erro
1a007e28:	6e652072 72616976 6c6f6320 65642061     r enviar cola de
1a007e38:	6d6f6320 6f646e61 65642073 6e6f6320      comandos de con
1a007e48:	616c6f73 ff000a0d 72617453 46202e74     sola....Start. F
1a007e58:	20636572 0020203d 706f7453 00000000     rec =  .Stop....
1a007e68:	2e6e7552 65724620 203d2063 00000020     Run. Frec =  ...
1a007e78:	6f727245 6e652072 206f6976 616c6f63     Error envio cola
1a007e88:	20656420 736e656d 73656a61 6e6f6320      de mensajes con
1a007e98:	616c6f73 00000a0d 6f727245 6e652072     sola....Error en
1a007ea8:	206f6976 616c6f63 20656420 736e656d     vio cola de mens
1a007eb8:	73656a61 756c4220 6f6f7465 0a0d6874     ajes Bluetooth..
1a007ec8:	00000000 6f727245 6e652072 206f6976     ....Error envio 
1a007ed8:	616c6f63 20656420 736e656d 73656a61     cola de mensajes
1a007ee8:	73694420 0a0d6f63 00000000 52415453      Disco......STAR
1a007ef8:	46202c54 3d434552 00000000 6f727245     T, FREC=....Erro
1a007f08:	6e652072 206f6976 616c6f63 20656420     r envio cola de 
1a007f18:	736e656d 73656a61 756c4220 6f6f7465     mensajes Bluetoo
1a007f28:	000a0d74 2c4e5552 45524620 00003d43     t...RUN, FREC=..
1a007f38:	504f5453 5246202c 003d4345 6f727245     STOP, FREC=.Erro
1a007f48:	6e652072 206f6976 616c6f63 20656420     r envio cola de 
1a007f58:	736e656d 73656a61 43206120 6f736e6f     mensajes a Conso
1a007f68:	0a0d616c 00000000 6f727245 6e652072     la......Error en
1a007f78:	206f6976 616c6f63 20656420 736e656d     vio cola de mens
1a007f88:	73656a61 6e6f4320 616c6f73 ff000a0d     ajes Consola....

1a007f98 <ExCvt>:
1a007f98:	41455543 43414141 49454545 41414949     CUEAAAACEEEIIIAA
1a007fa8:	4f929245 55554f4f 4f554f59 9f9e4f9c     E..OOOUUYOUO.O..
1a007fb8:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
1a007fc8:	b3b2b1b0 414141b4 bbbab9b8 bfbebdbc     .....AAA........
1a007fd8:	c3c2c1c0 4141c5c4 cbcac9c8 cfcecdcc     ......AA........
1a007fe8:	4545d1d1 49494945 dbdad949 df49dddc     ..EEEIIII.....I.
1a007ff8:	4f4fe14f e8e64f4f 555555e8 efee5959     O.OOOO...UUUYY..
1a008008:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

1a008018 <LfnOfs>:
1a008018:	07050301 12100e09 1c181614 ffffff1e     ................

1a008028 <VolumeStr>:
1a008028:	1a00805c 1a008060 459076eb 54414658     \...`....v.EXFAT
1a008038:	00202020 00544146 33544146 ffff0032        .FAT.FAT32...
1a008048:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
1a008058:	ff005d5b 00434453 00425355              []..SDC.USB.

1a008064 <cvt1.5491>:
1a008064:	031a0061 031700e0 030700f8 000100ff     a...............
1a008074:	01000178 01320130 01390106 014a0110     x...0.2...9...J.
1a008084:	0179012e 01800106 0243004d 01820181     ..y.....M.C.....
1a008094:	01840182 01860184 01870187 018a0189     ................
1a0080a4:	018b018b 018e018d 0190018f 01910191     ................
1a0080b4:	01940193 019601f6 01980197 023d0198     ..............=.
1a0080c4:	019c019b 0220019d 01a0019f 01a201a0     ...... .........
1a0080d4:	01a401a2 01a601a4 01a701a7 01aa01a9     ................
1a0080e4:	01ac01ab 01ae01ac 01af01af 01b201b1     ................
1a0080f4:	01b301b3 01b501b5 01b801b7 01ba01b8     ................
1a008104:	01bc01bb 01be01bc 01c001f7 01c201c1     ................
1a008114:	01c401c3 01c401c5 01c801c7 01ca01c7     ................
1a008124:	01ca01cb 011001cd 000101dd 01de018e     ................
1a008134:	01f30112 01f10003 01f401f4 012801f8     ..............(.
1a008144:	01120222 0009023a 023b2c65 023d023b     "...:...e,;.;.=.
1a008154:	023f2c66 02410240 02460241 0253010a     f,?.@.A.A.F...S.
1a008164:	01810040 02550186 018a0189 018f0258     @.....U.....X...
1a008174:	0190025a 025d025c 025f025e 02610193     Z...\.].^._...a.
1a008184:	01940262 02650264 02670266 01960197     b...d.e.f.g.....
1a008194:	2c62026a 026d026c 019c026e 02710270     j.b,l.m.n...p.q.
1a0081a4:	0273019d 019f0274 02770276 02790278     ..s.t...v.w.x.y.
1a0081b4:	027b027a 2c64027c 027f027e 028101a6     z.{.|.d,~.......
1a0081c4:	01a90282 02850284 02870286 024401ae     ..............D.
1a0081d4:	01b201b1 028d0245 028f028e 02910290     ....E...........
1a0081e4:	037b01b7 03fd0003 03ff03fe 000403ac     ..{.............
1a0081f4:	03880386 038a0389 031103b1 000203c2     ................
1a008204:	03a303a3 030803c4 000303cc 038e038c     ................
1a008214:	03d8038f 03f20118 03f9000a 03f403f3     ................
1a008224:	03f603f5 03f703f7 03fa03f9 043003fa     ..............0.
1a008234:	04500320 04600710 048a0122 04c10136      .P...`."...6...
1a008244:	04cf010e 04c00001 014404d0 04260561     ..........D.a.&.
1a008254:	ffff0000                                ....

1a008258 <cvt2.5492>:
1a008258:	00011d7d 1e002c63 1ea00196 1f00015a     }...c,......Z...
1a008268:	1f100608 1f200606 1f300608 1f400608     ...... ...0...@.
1a008278:	1f510606 1f590007 1f5b1f52 1f5d1f54     ..Q...Y.R.[.T.].
1a008288:	1f5f1f56 06081f60 000e1f70 1fbb1fba     V._.`...p.......
1a008298:	1fc91fc8 1fcb1fca 1fdb1fda 1ff91ff8     ................
1a0082a8:	1feb1fea 1ffb1ffa 06081f80 06081f90     ................
1a0082b8:	06081fa0 00041fb0 1fb91fb8 1fbc1fb2     ................
1a0082c8:	00011fcc 1fd01fc3 1fe00602 1fe50602     ................
1a0082d8:	1fec0001 00011ff3 214e1ffc 21320001     ..........N!..2!
1a0082e8:	02102170 00012184 24d02183 2c30051a     p!...!...!.$..0,
1a0082f8:	2c60042f 2c670102 2c750106 2c800102     /.`,..g,..u,...,
1a008308:	2d000164 ff410826 0000031a              d..-&.A.....

1a008314 <uc850>:
1a008314:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
1a008324:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
1a008334:	00e600c9 00f400c6 00f200f6 00f900fb     ................
1a008344:	00d600ff 00f800dc 00d800a3 019200d7     ................
1a008354:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
1a008364:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
1a008374:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
1a008384:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
1a008394:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
1a0083a4:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
1a0083b4:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
1a0083c4:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
1a0083d4:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
1a0083e4:	00da00de 00d900db 00dd00fd 00b400af     ................
1a0083f4:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
1a008404:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..
1a008414:	454c4449 ffffff00 51726d54 ffffff00     IDLE....TmrQ....
1a008424:	20726d54 00637653 44535346 5b203a43     Tmr Svc.FSSDC: [
1a008434:	74696e49 6f4e205d 72616320 6e692064     Init] No card in
1a008444:	636f7320 2e74656b 00000a0d 44535346      socket.....FSSD
1a008454:	5b203a43 74696e49 6e49205d 61697469     C: [Init] Initia
1a008464:	617a696c 6e6f6974 67656220 2e736e69     lization begins.
1a008474:	00000a0d 44535346 5b203a43 74696e49     ....FSSDC: [Init
1a008484:	654e205d 61632077 73206472 75746174     ] New card statu
1a008494:	4e203a73 76697461 6f4d2065 0d2e6564     s: Native Mode..
1a0084a4:	0000000a 44535346 5b203a43 74696e49     ....FSSDC: [Init
1a0084b4:	654e205d 61632077 73206472 75746174     ] New card statu
1a0084c4:	49203a73 6974696e 7a696c61 2e676e69     s: Initializing.
1a0084d4:	00000a0d 44535346 5b203a43 74696e49     ....FSSDC: [Init
1a0084e4:	654e205d 61632077 73206472 75746174     ] New card statu
1a0084f4:	52203a73 79646165 61462820 43207473     s: Ready (Fast C
1a008504:	6b636f6c 0a0d2e29 00000000 44535346     lock).......FSSD
1a008514:	5b203a43 74696e49 654e205d 61632077     C: [Init] New ca
1a008524:	73206472 75746174 45203a73 726f7272     rd status: Error
1a008534:	6f4e2820 6e492074 61697469 657a696c      (Not Initialize
1a008544:	0d2e2964 ffff000a 44535346 5b203a43     d)......FSSDC: [
1a008554:	74434f49 43205d6c 20647261 20746f6e     IOCtl] Card not 
1a008564:	74696e69 696c6169 2e64657a 00000a0d     initialized.....
1a008574:	44535346 5b203a43 74434f49 52205d6c     FSSDC: [IOCtl] R
1a008584:	72757465 676e696e 72724520 0d2e726f     eturning Error..
1a008594:	ffff000a 44535346 5b203a43 64616552     ....FSSDC: [Read
1a0085a4:	6143205d 6e206472 6920746f 6974696e     ] Card not initi
1a0085b4:	7a696c61 0d2e6465 ffff000a 44535346     alized......FSSD
1a0085c4:	5b203a43 74697257 43205d65 20647261     C: [Write] Card 
1a0085d4:	20746f6e 74696e69 696c6169 2e64657a     not initialized.
1a0085e4:	00000a0d 44535346 5b203a43 74697257     ....FSSDC: [Writ
1a0085f4:	43205d65 20647261 77207369 65746972     e] Card is write
1a008604:	6f727020 74636574 0d2e6465 ffff000a      protected......
1a008614:	44535346 5b203a43 74696e49 5d495053     FSSDC: [InitSPI]
1a008624:	77654e20 72616320 74732064 73757461      New card status
1a008634:	6e49203a 74726573 0d2e6465 ffff000a     : Inserted......

1a008644 <ExtRateIn>:
1a008644:	00000000                                ....

1a008648 <GpioButtons>:
1a008648:	08000400 09010900                       ........

1a008650 <GpioLeds>:
1a008650:	01050005 0e000205 0c010b01              ............

1a00865c <GpioPorts>:
1a00865c:	03030003 0f050403 05031005 07030603     ................
1a00866c:	ffff0802                                ....

1a008670 <OscRateIn>:
1a008670:	00b71b00                                ....

1a008674 <InitClkStates>:
1a008674:	01010f01                                ....

1a008678 <pinmuxing>:
1a008678:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a008688:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a008698:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a0086a8:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a0086b8:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a0086c8:	00d50301 00d50401 00160107 00560207     ..............V.
1a0086d8:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a0086e8:	00570206                                ..W.

1a0086ec <UART_BClock>:
1a0086ec:	01a201c2 01620182                       ......b.

1a0086f4 <UART_PClock>:
1a0086f4:	00820081 00a200a1 08040201 0f0f0f03     ................
1a008704:	000000ff                                ....

1a008708 <periph_to_base>:
1a008708:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a008718:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a008728:	000100e0 01000100 01200003 00060120     .......... . ...
1a008738:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a008748:	01820013 00120182 01a201a2 01c20011     ................
1a008758:	001001c2 01e201e2 0202000f 000e0202     ................
1a008768:	02220222 0223000d 001c0223              "."...#.#...

1a008774 <InitClkStates>:
1a008774:	00010100 00010909 0001090a 01010701     ................
1a008784:	00010902 00010906 0101090c 0001090d     ................
1a008794:	0001090e 0001090f 00010910 00010911     ................
1a0087a4:	00010912 00010913 00011114 00011119     ................
1a0087b4:	0001111a 0001111b                       ........

1a0087bc <lpcUarts>:
1a0087bc:	40081000 06020406 00180205 40081000     ...@...........@
1a0087cc:	09070509 00180706 40082000 00000000     ......... .@....
1a0087dc:	00190000 400c1000 07060107 001a0602     .......@........
1a0087ec:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a0087fc:	02020302 001b0204                       ........

1a008804 <gpioPinsInit>:
1a008804:	02000104 00050701 05010d03 04080100     ................
1a008814:	02020002 02000304 00000403 04070002     ................
1a008824:	030c0300 09050402 05040103 04030208     ................
1a008834:	04020305 06040504 0802000c 03000b06     ................
1a008844:	00090607 07060503 060f0504 03030004     ................
1a008854:	02000404 00050404 06040502 04060200     ................
1a008864:	0c050408 05040a04 0003010e 14010a00     ................
1a008874:	010f0000 0d000012 00001101 0010010c     ................
1a008884:	07070300 000f0300 01000001 00000000     ................
1a008894:	000a0600 08060603 06100504 04030005     ................
1a0088a4:	03000106 04090400 04010d05 010b0000     ................
1a0088b4:	0200000f 00000001 00010104 02010800     ................
1a0088c4:	01090000 09010006 05040002 04010200     ................
1a0088d4:	02020105 02020504 0e00000a 01000b02     ................
1a0088e4:	000c020b ffff0c01                       ........

1a0088ec <ultrasonicSensorsIrqMap>:
1a0088ec:	ff020100                                ....
